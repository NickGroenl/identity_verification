// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "builders.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface VerificationResult ()
+ (VerificationResult *)fromMap:(NSDictionary *)dict;
+ (nullable VerificationResult *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FieldValidator ()
+ (FieldValidator *)fromMap:(NSDictionary *)dict;
+ (nullable FieldValidator *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DocumentFilter ()
+ (DocumentFilter *)fromMap:(NSDictionary *)dict;
+ (nullable DocumentFilter *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ModificationConfig ()
+ (ModificationConfig *)fromMap:(NSDictionary *)dict;
+ (nullable ModificationConfig *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DocumentField ()
+ (DocumentField *)fromMap:(NSDictionary *)dict;
+ (nullable DocumentField *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VerificationServiceSettings ()
+ (VerificationServiceSettings *)fromMap:(NSDictionary *)dict;
+ (nullable VerificationServiceSettings *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LivenessStep ()
+ (LivenessStep *)fromMap:(NSDictionary *)dict;
+ (nullable LivenessStep *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface LivenessStepOptions ()
+ (LivenessStepOptions *)fromMap:(NSDictionary *)dict;
+ (nullable LivenessStepOptions *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface RequestTimeout ()
+ (RequestTimeout *)fromMap:(NSDictionary *)dict;
+ (nullable RequestTimeout *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DocumentScanStep ()
+ (DocumentScanStep *)fromMap:(NSDictionary *)dict;
+ (nullable DocumentScanStep *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvConfiguration ()
+ (IdvConfiguration *)fromMap:(NSDictionary *)dict;
+ (nullable IdvConfiguration *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SimpleDate ()
+ (SimpleDate *)fromMap:(NSDictionary *)dict;
+ (nullable SimpleDate *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ResultField ()
+ (ResultField *)fromMap:(NSDictionary *)dict;
+ (nullable ResultField *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ClassInfo ()
+ (ClassInfo *)fromMap:(NSDictionary *)dict;
+ (nullable ClassInfo *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ImageAnalysisResult ()
+ (ImageAnalysisResult *)fromMap:(NSDictionary *)dict;
+ (nullable ImageAnalysisResult *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface DocumentResult ()
+ (DocumentResult *)fromMap:(NSDictionary *)dict;
+ (nullable DocumentResult *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvColor ()
+ (IdvColor *)fromMap:(NSDictionary *)dict;
+ (nullable IdvColor *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvFont ()
+ (IdvFont *)fromMap:(NSDictionary *)dict;
+ (nullable IdvFont *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvFontFamily ()
+ (IdvFontFamily *)fromMap:(NSDictionary *)dict;
+ (nullable IdvFontFamily *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvLocalizationTheme ()
+ (IdvLocalizationTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvLocalizationTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvColorTheme ()
+ (IdvColorTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvColorTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvFontTheme ()
+ (IdvFontTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvFontTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvImageTheme ()
+ (IdvImageTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvImageTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvSize ()
+ (IdvSize *)fromMap:(NSDictionary *)dict;
+ (nullable IdvSize *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvViewTheme ()
+ (IdvViewTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvViewTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvNavigationTheme ()
+ (IdvNavigationTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvNavigationTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface IdvDateFormatterTheme ()
+ (IdvDateFormatterTheme *)fromMap:(NSDictionary *)dict;
+ (nullable IdvDateFormatterTheme *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation VerificationResult
+ (instancetype)makeWithVerificationType:(VerificationType)verificationType {
  VerificationResult* pigeonResult = [[VerificationResult alloc] init];
  pigeonResult.verificationType = verificationType;
  return pigeonResult;
}
+ (VerificationResult *)fromMap:(NSDictionary *)dict {
  VerificationResult *pigeonResult = [[VerificationResult alloc] init];
  pigeonResult.verificationType = [GetNullableObject(dict, @"verificationType") integerValue];
  return pigeonResult;
}
+ (nullable VerificationResult *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [VerificationResult fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"verificationType" : @(self.verificationType),
  };
}
@end

@implementation FieldValidator
+ (instancetype)makeWithConditionName:(ConditionName)conditionName
    stringValue:(nullable NSString *)stringValue
    intValue:(nullable NSNumber *)intValue
    ignoreCase:(nullable NSNumber *)ignoreCase {
  FieldValidator* pigeonResult = [[FieldValidator alloc] init];
  pigeonResult.conditionName = conditionName;
  pigeonResult.stringValue = stringValue;
  pigeonResult.intValue = intValue;
  pigeonResult.ignoreCase = ignoreCase;
  return pigeonResult;
}
+ (FieldValidator *)fromMap:(NSDictionary *)dict {
  FieldValidator *pigeonResult = [[FieldValidator alloc] init];
  pigeonResult.conditionName = [GetNullableObject(dict, @"conditionName") integerValue];
  pigeonResult.stringValue = GetNullableObject(dict, @"stringValue");
  pigeonResult.intValue = GetNullableObject(dict, @"intValue");
  pigeonResult.ignoreCase = GetNullableObject(dict, @"ignoreCase");
  return pigeonResult;
}
+ (nullable FieldValidator *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FieldValidator fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"conditionName" : @(self.conditionName),
    @"stringValue" : (self.stringValue ?: [NSNull null]),
    @"intValue" : (self.intValue ?: [NSNull null]),
    @"ignoreCase" : (self.ignoreCase ?: [NSNull null]),
  };
}
@end

@implementation DocumentFilter
+ (instancetype)makeWithCountries:(nullable NSArray<NSNumber *> *)countries
    regions:(nullable NSArray<NSNumber *> *)regions
    types:(nullable NSArray<NSNumber *> *)types
    allowScanning:(NSNumber *)allowScanning {
  DocumentFilter* pigeonResult = [[DocumentFilter alloc] init];
  pigeonResult.countries = countries;
  pigeonResult.regions = regions;
  pigeonResult.types = types;
  pigeonResult.allowScanning = allowScanning;
  return pigeonResult;
}
+ (DocumentFilter *)fromMap:(NSDictionary *)dict {
  DocumentFilter *pigeonResult = [[DocumentFilter alloc] init];
  pigeonResult.countries = GetNullableObject(dict, @"countries");
  pigeonResult.regions = GetNullableObject(dict, @"regions");
  pigeonResult.types = GetNullableObject(dict, @"types");
  pigeonResult.allowScanning = GetNullableObject(dict, @"allowScanning");
  NSAssert(pigeonResult.allowScanning != nil, @"");
  return pigeonResult;
}
+ (nullable DocumentFilter *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [DocumentFilter fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"countries" : (self.countries ?: [NSNull null]),
    @"regions" : (self.regions ?: [NSNull null]),
    @"types" : (self.types ?: [NSNull null]),
    @"allowScanning" : (self.allowScanning ?: [NSNull null]),
  };
}
@end

@implementation ModificationConfig
+ (instancetype)makeWithEditable:(NSNumber *)editable
    insertable:(NSNumber *)insertable
    validators:(nullable NSArray<FieldValidator *> *)validators
    keyboardType:(KeyboardType)keyboardType {
  ModificationConfig* pigeonResult = [[ModificationConfig alloc] init];
  pigeonResult.editable = editable;
  pigeonResult.insertable = insertable;
  pigeonResult.validators = validators;
  pigeonResult.keyboardType = keyboardType;
  return pigeonResult;
}
+ (ModificationConfig *)fromMap:(NSDictionary *)dict {
  ModificationConfig *pigeonResult = [[ModificationConfig alloc] init];
  pigeonResult.editable = GetNullableObject(dict, @"editable");
  NSAssert(pigeonResult.editable != nil, @"");
  pigeonResult.insertable = GetNullableObject(dict, @"insertable");
  NSAssert(pigeonResult.insertable != nil, @"");
  pigeonResult.validators = GetNullableObject(dict, @"validators");
  pigeonResult.keyboardType = [GetNullableObject(dict, @"keyboardType") integerValue];
  return pigeonResult;
}
+ (nullable ModificationConfig *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ModificationConfig fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"editable" : (self.editable ?: [NSNull null]),
    @"insertable" : (self.insertable ?: [NSNull null]),
    @"validators" : (self.validators ?: [NSNull null]),
    @"keyboardType" : @(self.keyboardType),
  };
}
@end

@implementation DocumentField
+ (instancetype)makeWithType:(FieldType)type
    modificationConfig:(nullable ModificationConfig *)modificationConfig {
  DocumentField* pigeonResult = [[DocumentField alloc] init];
  pigeonResult.type = type;
  pigeonResult.modificationConfig = modificationConfig;
  return pigeonResult;
}
+ (DocumentField *)fromMap:(NSDictionary *)dict {
  DocumentField *pigeonResult = [[DocumentField alloc] init];
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  pigeonResult.modificationConfig = [ModificationConfig nullableFromMap:GetNullableObject(dict, @"modificationConfig")];
  return pigeonResult;
}
+ (nullable DocumentField *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [DocumentField fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"type" : @(self.type),
    @"modificationConfig" : (self.modificationConfig ? [self.modificationConfig toMap] : [NSNull null]),
  };
}
@end

@implementation VerificationServiceSettings
+ (instancetype)makeWithUrl:(NSString *)url
    requestTimeout:(nullable RequestTimeout *)requestTimeout
    headers:(nullable NSDictionary<NSString *, NSString *> *)headers
    publicKeyPins:(nullable NSArray<NSString *> *)publicKeyPins
    isUsingSelfSignedCertificate:(nullable NSNumber *)isUsingSelfSignedCertificate {
  VerificationServiceSettings* pigeonResult = [[VerificationServiceSettings alloc] init];
  pigeonResult.url = url;
  pigeonResult.requestTimeout = requestTimeout;
  pigeonResult.headers = headers;
  pigeonResult.publicKeyPins = publicKeyPins;
  pigeonResult.isUsingSelfSignedCertificate = isUsingSelfSignedCertificate;
  return pigeonResult;
}
+ (VerificationServiceSettings *)fromMap:(NSDictionary *)dict {
  VerificationServiceSettings *pigeonResult = [[VerificationServiceSettings alloc] init];
  pigeonResult.url = GetNullableObject(dict, @"url");
  NSAssert(pigeonResult.url != nil, @"");
  pigeonResult.requestTimeout = [RequestTimeout nullableFromMap:GetNullableObject(dict, @"requestTimeout")];
  pigeonResult.headers = GetNullableObject(dict, @"headers");
  pigeonResult.publicKeyPins = GetNullableObject(dict, @"publicKeyPins");
  pigeonResult.isUsingSelfSignedCertificate = GetNullableObject(dict, @"isUsingSelfSignedCertificate");
  return pigeonResult;
}
+ (nullable VerificationServiceSettings *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [VerificationServiceSettings fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"url" : (self.url ?: [NSNull null]),
    @"requestTimeout" : (self.requestTimeout ? [self.requestTimeout toMap] : [NSNull null]),
    @"headers" : (self.headers ?: [NSNull null]),
    @"publicKeyPins" : (self.publicKeyPins ?: [NSNull null]),
    @"isUsingSelfSignedCertificate" : (self.isUsingSelfSignedCertificate ?: [NSNull null]),
  };
}
@end

@implementation LivenessStep
+ (instancetype)makeWithInitializeInProduction:(nullable NSNumber *)initializeInProduction
    liveness:(Liveness)liveness
    options:(nullable LivenessStepOptions *)options {
  LivenessStep* pigeonResult = [[LivenessStep alloc] init];
  pigeonResult.initializeInProduction = initializeInProduction;
  pigeonResult.liveness = liveness;
  pigeonResult.options = options;
  return pigeonResult;
}
+ (LivenessStep *)fromMap:(NSDictionary *)dict {
  LivenessStep *pigeonResult = [[LivenessStep alloc] init];
  pigeonResult.initializeInProduction = GetNullableObject(dict, @"initializeInProduction");
  pigeonResult.liveness = [GetNullableObject(dict, @"liveness") integerValue];
  pigeonResult.options = [LivenessStepOptions nullableFromMap:GetNullableObject(dict, @"options")];
  return pigeonResult;
}
+ (nullable LivenessStep *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [LivenessStep fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"initializeInProduction" : (self.initializeInProduction ?: [NSNull null]),
    @"liveness" : @(self.liveness),
    @"options" : (self.options ? [self.options toMap] : [NSNull null]),
  };
}
@end

@implementation LivenessStepOptions
+ (instancetype)makeWithFilter:(LivenessUIFilter)filter {
  LivenessStepOptions* pigeonResult = [[LivenessStepOptions alloc] init];
  pigeonResult.filter = filter;
  return pigeonResult;
}
+ (LivenessStepOptions *)fromMap:(NSDictionary *)dict {
  LivenessStepOptions *pigeonResult = [[LivenessStepOptions alloc] init];
  pigeonResult.filter = [GetNullableObject(dict, @"filter") integerValue];
  return pigeonResult;
}
+ (nullable LivenessStepOptions *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [LivenessStepOptions fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"filter" : @(self.filter),
  };
}
@end

@implementation RequestTimeout
+ (instancetype)makeWithConnectionTimeout:(NSNumber *)connectionTimeout
    writeTimeout:(NSNumber *)writeTimeout
    readTimeout:(NSNumber *)readTimeout
    timeoutIntervalForRequest:(NSNumber *)timeoutIntervalForRequest
    timeoutIntervalForResource:(NSNumber *)timeoutIntervalForResource {
  RequestTimeout* pigeonResult = [[RequestTimeout alloc] init];
  pigeonResult.connectionTimeout = connectionTimeout;
  pigeonResult.writeTimeout = writeTimeout;
  pigeonResult.readTimeout = readTimeout;
  pigeonResult.timeoutIntervalForRequest = timeoutIntervalForRequest;
  pigeonResult.timeoutIntervalForResource = timeoutIntervalForResource;
  return pigeonResult;
}
+ (RequestTimeout *)fromMap:(NSDictionary *)dict {
  RequestTimeout *pigeonResult = [[RequestTimeout alloc] init];
  pigeonResult.connectionTimeout = GetNullableObject(dict, @"connectionTimeout");
  NSAssert(pigeonResult.connectionTimeout != nil, @"");
  pigeonResult.writeTimeout = GetNullableObject(dict, @"writeTimeout");
  NSAssert(pigeonResult.writeTimeout != nil, @"");
  pigeonResult.readTimeout = GetNullableObject(dict, @"readTimeout");
  NSAssert(pigeonResult.readTimeout != nil, @"");
  pigeonResult.timeoutIntervalForRequest = GetNullableObject(dict, @"timeoutIntervalForRequest");
  NSAssert(pigeonResult.timeoutIntervalForRequest != nil, @"");
  pigeonResult.timeoutIntervalForResource = GetNullableObject(dict, @"timeoutIntervalForResource");
  NSAssert(pigeonResult.timeoutIntervalForResource != nil, @"");
  return pigeonResult;
}
+ (nullable RequestTimeout *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [RequestTimeout fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"connectionTimeout" : (self.connectionTimeout ?: [NSNull null]),
    @"writeTimeout" : (self.writeTimeout ?: [NSNull null]),
    @"readTimeout" : (self.readTimeout ?: [NSNull null]),
    @"timeoutIntervalForRequest" : (self.timeoutIntervalForRequest ?: [NSNull null]),
    @"timeoutIntervalForResource" : (self.timeoutIntervalForResource ?: [NSNull null]),
  };
}
@end

@implementation DocumentScanStep
+ (instancetype)makeWithScanStep:(ScanStep)scanStep
    androidLicenseFileName:(nullable NSString *)androidLicenseFileName
    iOSLicense:(nullable NSString *)iOSLicense
    showDocumentImages:(nullable NSNumber *)showDocumentImages
    documentFields:(nullable NSArray<DocumentField *> *)documentFields
    hiddenDocumentFields:(nullable NSArray<DocumentField *> *)hiddenDocumentFields
    attachDocumentListener:(nullable NSNumber *)attachDocumentListener
    documentFilter:(nullable DocumentFilter *)documentFilter
    skipUnsupportedBack:(nullable NSNumber *)skipUnsupportedBack
    showResultHeader:(nullable NSNumber *)showResultHeader {
  DocumentScanStep* pigeonResult = [[DocumentScanStep alloc] init];
  pigeonResult.scanStep = scanStep;
  pigeonResult.androidLicenseFileName = androidLicenseFileName;
  pigeonResult.iOSLicense = iOSLicense;
  pigeonResult.showDocumentImages = showDocumentImages;
  pigeonResult.documentFields = documentFields;
  pigeonResult.hiddenDocumentFields = hiddenDocumentFields;
  pigeonResult.attachDocumentListener = attachDocumentListener;
  pigeonResult.documentFilter = documentFilter;
  pigeonResult.skipUnsupportedBack = skipUnsupportedBack;
  pigeonResult.showResultHeader = showResultHeader;
  return pigeonResult;
}
+ (DocumentScanStep *)fromMap:(NSDictionary *)dict {
  DocumentScanStep *pigeonResult = [[DocumentScanStep alloc] init];
  pigeonResult.scanStep = [GetNullableObject(dict, @"scanStep") integerValue];
  pigeonResult.androidLicenseFileName = GetNullableObject(dict, @"androidLicenseFileName");
  pigeonResult.iOSLicense = GetNullableObject(dict, @"iOSLicense");
  pigeonResult.showDocumentImages = GetNullableObject(dict, @"showDocumentImages");
  pigeonResult.documentFields = GetNullableObject(dict, @"documentFields");
  pigeonResult.hiddenDocumentFields = GetNullableObject(dict, @"hiddenDocumentFields");
  pigeonResult.attachDocumentListener = GetNullableObject(dict, @"attachDocumentListener");
  pigeonResult.documentFilter = [DocumentFilter nullableFromMap:GetNullableObject(dict, @"documentFilter")];
  pigeonResult.skipUnsupportedBack = GetNullableObject(dict, @"skipUnsupportedBack");
  pigeonResult.showResultHeader = GetNullableObject(dict, @"showResultHeader");
  return pigeonResult;
}
+ (nullable DocumentScanStep *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [DocumentScanStep fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"scanStep" : @(self.scanStep),
    @"androidLicenseFileName" : (self.androidLicenseFileName ?: [NSNull null]),
    @"iOSLicense" : (self.iOSLicense ?: [NSNull null]),
    @"showDocumentImages" : (self.showDocumentImages ?: [NSNull null]),
    @"documentFields" : (self.documentFields ?: [NSNull null]),
    @"hiddenDocumentFields" : (self.hiddenDocumentFields ?: [NSNull null]),
    @"attachDocumentListener" : (self.attachDocumentListener ?: [NSNull null]),
    @"documentFilter" : (self.documentFilter ? [self.documentFilter toMap] : [NSNull null]),
    @"skipUnsupportedBack" : (self.skipUnsupportedBack ?: [NSNull null]),
    @"showResultHeader" : (self.showResultHeader ?: [NSNull null]),
  };
}
@end

@implementation IdvConfiguration
+ (instancetype)makeWithScanStep:(DocumentScanStep *)scanStep
    livenessStep:(LivenessStep *)livenessStep
    verificationServiceSettings:(VerificationServiceSettings *)verificationServiceSettings
    dateFormat:(nullable NSString *)dateFormat
    disableScreenshots:(nullable NSNumber *)disableScreenshots {
  IdvConfiguration* pigeonResult = [[IdvConfiguration alloc] init];
  pigeonResult.scanStep = scanStep;
  pigeonResult.livenessStep = livenessStep;
  pigeonResult.verificationServiceSettings = verificationServiceSettings;
  pigeonResult.dateFormat = dateFormat;
  pigeonResult.disableScreenshots = disableScreenshots;
  return pigeonResult;
}
+ (IdvConfiguration *)fromMap:(NSDictionary *)dict {
  IdvConfiguration *pigeonResult = [[IdvConfiguration alloc] init];
  pigeonResult.scanStep = [DocumentScanStep nullableFromMap:GetNullableObject(dict, @"scanStep")];
  NSAssert(pigeonResult.scanStep != nil, @"");
  pigeonResult.livenessStep = [LivenessStep nullableFromMap:GetNullableObject(dict, @"livenessStep")];
  NSAssert(pigeonResult.livenessStep != nil, @"");
  pigeonResult.verificationServiceSettings = [VerificationServiceSettings nullableFromMap:GetNullableObject(dict, @"verificationServiceSettings")];
  NSAssert(pigeonResult.verificationServiceSettings != nil, @"");
  pigeonResult.dateFormat = GetNullableObject(dict, @"dateFormat");
  pigeonResult.disableScreenshots = GetNullableObject(dict, @"disableScreenshots");
  return pigeonResult;
}
+ (nullable IdvConfiguration *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvConfiguration fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"scanStep" : (self.scanStep ? [self.scanStep toMap] : [NSNull null]),
    @"livenessStep" : (self.livenessStep ? [self.livenessStep toMap] : [NSNull null]),
    @"verificationServiceSettings" : (self.verificationServiceSettings ? [self.verificationServiceSettings toMap] : [NSNull null]),
    @"dateFormat" : (self.dateFormat ?: [NSNull null]),
    @"disableScreenshots" : (self.disableScreenshots ?: [NSNull null]),
  };
}
@end

@implementation SimpleDate
+ (instancetype)makeWithYear:(NSNumber *)year
    month:(NSNumber *)month
    day:(NSNumber *)day {
  SimpleDate* pigeonResult = [[SimpleDate alloc] init];
  pigeonResult.year = year;
  pigeonResult.month = month;
  pigeonResult.day = day;
  return pigeonResult;
}
+ (SimpleDate *)fromMap:(NSDictionary *)dict {
  SimpleDate *pigeonResult = [[SimpleDate alloc] init];
  pigeonResult.year = GetNullableObject(dict, @"year");
  NSAssert(pigeonResult.year != nil, @"");
  pigeonResult.month = GetNullableObject(dict, @"month");
  NSAssert(pigeonResult.month != nil, @"");
  pigeonResult.day = GetNullableObject(dict, @"day");
  NSAssert(pigeonResult.day != nil, @"");
  return pigeonResult;
}
+ (nullable SimpleDate *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [SimpleDate fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"year" : (self.year ?: [NSNull null]),
    @"month" : (self.month ?: [NSNull null]),
    @"day" : (self.day ?: [NSNull null]),
  };
}
@end

@implementation ResultField
+ (instancetype)makeWithType:(FieldType)type
    resultFieldType:(ResultFieldType)resultFieldType
    value1:(nullable NSString *)value1
    value2:(nullable NSString *)value2
    boolValue:(nullable NSNumber *)boolValue
    simpleDate:(nullable SimpleDate *)simpleDate
    insertable:(nullable NSNumber *)insertable
    editable:(nullable NSNumber *)editable
    keyboardType:(KeyboardType)keyboardType
    originalValue:(nullable NSString *)originalValue
    insertedValue:(nullable NSString *)insertedValue
    editedValue:(nullable NSString *)editedValue
    key:(nullable NSString *)key
    value:(nullable NSString *)value {
  ResultField* pigeonResult = [[ResultField alloc] init];
  pigeonResult.type = type;
  pigeonResult.resultFieldType = resultFieldType;
  pigeonResult.value1 = value1;
  pigeonResult.value2 = value2;
  pigeonResult.boolValue = boolValue;
  pigeonResult.simpleDate = simpleDate;
  pigeonResult.insertable = insertable;
  pigeonResult.editable = editable;
  pigeonResult.keyboardType = keyboardType;
  pigeonResult.originalValue = originalValue;
  pigeonResult.insertedValue = insertedValue;
  pigeonResult.editedValue = editedValue;
  pigeonResult.key = key;
  pigeonResult.value = value;
  return pigeonResult;
}
+ (ResultField *)fromMap:(NSDictionary *)dict {
  ResultField *pigeonResult = [[ResultField alloc] init];
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  pigeonResult.resultFieldType = [GetNullableObject(dict, @"resultFieldType") integerValue];
  pigeonResult.value1 = GetNullableObject(dict, @"value1");
  pigeonResult.value2 = GetNullableObject(dict, @"value2");
  pigeonResult.boolValue = GetNullableObject(dict, @"boolValue");
  pigeonResult.simpleDate = [SimpleDate nullableFromMap:GetNullableObject(dict, @"simpleDate")];
  pigeonResult.insertable = GetNullableObject(dict, @"insertable");
  pigeonResult.editable = GetNullableObject(dict, @"editable");
  pigeonResult.keyboardType = [GetNullableObject(dict, @"keyboardType") integerValue];
  pigeonResult.originalValue = GetNullableObject(dict, @"originalValue");
  pigeonResult.insertedValue = GetNullableObject(dict, @"insertedValue");
  pigeonResult.editedValue = GetNullableObject(dict, @"editedValue");
  pigeonResult.key = GetNullableObject(dict, @"key");
  pigeonResult.value = GetNullableObject(dict, @"value");
  return pigeonResult;
}
+ (nullable ResultField *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ResultField fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"type" : @(self.type),
    @"resultFieldType" : @(self.resultFieldType),
    @"value1" : (self.value1 ?: [NSNull null]),
    @"value2" : (self.value2 ?: [NSNull null]),
    @"boolValue" : (self.boolValue ?: [NSNull null]),
    @"simpleDate" : (self.simpleDate ? [self.simpleDate toMap] : [NSNull null]),
    @"insertable" : (self.insertable ?: [NSNull null]),
    @"editable" : (self.editable ?: [NSNull null]),
    @"keyboardType" : @(self.keyboardType),
    @"originalValue" : (self.originalValue ?: [NSNull null]),
    @"insertedValue" : (self.insertedValue ?: [NSNull null]),
    @"editedValue" : (self.editedValue ?: [NSNull null]),
    @"key" : (self.key ?: [NSNull null]),
    @"value" : (self.value ?: [NSNull null]),
  };
}
@end

@implementation ClassInfo
+ (instancetype)makeWithCountry:(Country)country
    region:(Region)region
    type:(Type)type
    empty:(nullable NSNumber *)empty
    countryName:(nullable NSString *)countryName
    isoNumericCountryCode:(nullable NSString *)isoNumericCountryCode
    isoAlpha2CountryCode:(nullable NSString *)isoAlpha2CountryCode
    isoAlpha3CountryCode:(nullable NSString *)isoAlpha3CountryCode {
  ClassInfo* pigeonResult = [[ClassInfo alloc] init];
  pigeonResult.country = country;
  pigeonResult.region = region;
  pigeonResult.type = type;
  pigeonResult.empty = empty;
  pigeonResult.countryName = countryName;
  pigeonResult.isoNumericCountryCode = isoNumericCountryCode;
  pigeonResult.isoAlpha2CountryCode = isoAlpha2CountryCode;
  pigeonResult.isoAlpha3CountryCode = isoAlpha3CountryCode;
  return pigeonResult;
}
+ (ClassInfo *)fromMap:(NSDictionary *)dict {
  ClassInfo *pigeonResult = [[ClassInfo alloc] init];
  pigeonResult.country = [GetNullableObject(dict, @"country") integerValue];
  pigeonResult.region = [GetNullableObject(dict, @"region") integerValue];
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  pigeonResult.empty = GetNullableObject(dict, @"empty");
  pigeonResult.countryName = GetNullableObject(dict, @"countryName");
  pigeonResult.isoNumericCountryCode = GetNullableObject(dict, @"isoNumericCountryCode");
  pigeonResult.isoAlpha2CountryCode = GetNullableObject(dict, @"isoAlpha2CountryCode");
  pigeonResult.isoAlpha3CountryCode = GetNullableObject(dict, @"isoAlpha3CountryCode");
  return pigeonResult;
}
+ (nullable ClassInfo *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ClassInfo fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"country" : @(self.country),
    @"region" : @(self.region),
    @"type" : @(self.type),
    @"empty" : (self.empty ?: [NSNull null]),
    @"countryName" : (self.countryName ?: [NSNull null]),
    @"isoNumericCountryCode" : (self.isoNumericCountryCode ?: [NSNull null]),
    @"isoAlpha2CountryCode" : (self.isoAlpha2CountryCode ?: [NSNull null]),
    @"isoAlpha3CountryCode" : (self.isoAlpha3CountryCode ?: [NSNull null]),
  };
}
@end

@implementation ImageAnalysisResult
+ (instancetype)makeWithIsBlurred:(nullable NSNumber *)isBlurred
    documentImageColorStatus:(DocumentImageColorStatus)documentImageColorStatus
    documentImageMoireStatus:(ImageAnalysisDetectionStatus)documentImageMoireStatus
    faceDetectionStatus:(ImageAnalysisDetectionStatus)faceDetectionStatus
    mrzDetectionStatus:(ImageAnalysisDetectionStatus)mrzDetectionStatus
    barcodeDetectionStatus:(ImageAnalysisDetectionStatus)barcodeDetectionStatus {
  ImageAnalysisResult* pigeonResult = [[ImageAnalysisResult alloc] init];
  pigeonResult.isBlurred = isBlurred;
  pigeonResult.documentImageColorStatus = documentImageColorStatus;
  pigeonResult.documentImageMoireStatus = documentImageMoireStatus;
  pigeonResult.faceDetectionStatus = faceDetectionStatus;
  pigeonResult.mrzDetectionStatus = mrzDetectionStatus;
  pigeonResult.barcodeDetectionStatus = barcodeDetectionStatus;
  return pigeonResult;
}
+ (ImageAnalysisResult *)fromMap:(NSDictionary *)dict {
  ImageAnalysisResult *pigeonResult = [[ImageAnalysisResult alloc] init];
  pigeonResult.isBlurred = GetNullableObject(dict, @"isBlurred");
  pigeonResult.documentImageColorStatus = [GetNullableObject(dict, @"documentImageColorStatus") integerValue];
  pigeonResult.documentImageMoireStatus = [GetNullableObject(dict, @"documentImageMoireStatus") integerValue];
  pigeonResult.faceDetectionStatus = [GetNullableObject(dict, @"faceDetectionStatus") integerValue];
  pigeonResult.mrzDetectionStatus = [GetNullableObject(dict, @"mrzDetectionStatus") integerValue];
  pigeonResult.barcodeDetectionStatus = [GetNullableObject(dict, @"barcodeDetectionStatus") integerValue];
  return pigeonResult;
}
+ (nullable ImageAnalysisResult *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ImageAnalysisResult fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"isBlurred" : (self.isBlurred ?: [NSNull null]),
    @"documentImageColorStatus" : @(self.documentImageColorStatus),
    @"documentImageMoireStatus" : @(self.documentImageMoireStatus),
    @"faceDetectionStatus" : @(self.faceDetectionStatus),
    @"mrzDetectionStatus" : @(self.mrzDetectionStatus),
    @"barcodeDetectionStatus" : @(self.barcodeDetectionStatus),
  };
}
@end

@implementation DocumentResult
+ (instancetype)makeWithResultsFields:(nullable NSArray<ResultField *> *)resultsFields
    faceImage:(nullable FlutterStandardTypedData *)faceImage
    frontSideDocumentImage:(nullable FlutterStandardTypedData *)frontSideDocumentImage
    backSideDocumentImage:(nullable FlutterStandardTypedData *)backSideDocumentImage
    signatureImage:(nullable FlutterStandardTypedData *)signatureImage
    classInfo:(nullable ClassInfo *)classInfo
    frontImageAnalysisResult:(nullable ImageAnalysisResult *)frontImageAnalysisResult
    backImageAnalysisResult:(nullable ImageAnalysisResult *)backImageAnalysisResult {
  DocumentResult* pigeonResult = [[DocumentResult alloc] init];
  pigeonResult.resultsFields = resultsFields;
  pigeonResult.faceImage = faceImage;
  pigeonResult.frontSideDocumentImage = frontSideDocumentImage;
  pigeonResult.backSideDocumentImage = backSideDocumentImage;
  pigeonResult.signatureImage = signatureImage;
  pigeonResult.classInfo = classInfo;
  pigeonResult.frontImageAnalysisResult = frontImageAnalysisResult;
  pigeonResult.backImageAnalysisResult = backImageAnalysisResult;
  return pigeonResult;
}
+ (DocumentResult *)fromMap:(NSDictionary *)dict {
  DocumentResult *pigeonResult = [[DocumentResult alloc] init];
  pigeonResult.resultsFields = GetNullableObject(dict, @"resultsFields");
  pigeonResult.faceImage = GetNullableObject(dict, @"faceImage");
  pigeonResult.frontSideDocumentImage = GetNullableObject(dict, @"frontSideDocumentImage");
  pigeonResult.backSideDocumentImage = GetNullableObject(dict, @"backSideDocumentImage");
  pigeonResult.signatureImage = GetNullableObject(dict, @"signatureImage");
  pigeonResult.classInfo = [ClassInfo nullableFromMap:GetNullableObject(dict, @"classInfo")];
  pigeonResult.frontImageAnalysisResult = [ImageAnalysisResult nullableFromMap:GetNullableObject(dict, @"frontImageAnalysisResult")];
  pigeonResult.backImageAnalysisResult = [ImageAnalysisResult nullableFromMap:GetNullableObject(dict, @"backImageAnalysisResult")];
  return pigeonResult;
}
+ (nullable DocumentResult *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [DocumentResult fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"resultsFields" : (self.resultsFields ?: [NSNull null]),
    @"faceImage" : (self.faceImage ?: [NSNull null]),
    @"frontSideDocumentImage" : (self.frontSideDocumentImage ?: [NSNull null]),
    @"backSideDocumentImage" : (self.backSideDocumentImage ?: [NSNull null]),
    @"signatureImage" : (self.signatureImage ?: [NSNull null]),
    @"classInfo" : (self.classInfo ? [self.classInfo toMap] : [NSNull null]),
    @"frontImageAnalysisResult" : (self.frontImageAnalysisResult ? [self.frontImageAnalysisResult toMap] : [NSNull null]),
    @"backImageAnalysisResult" : (self.backImageAnalysisResult ? [self.backImageAnalysisResult toMap] : [NSNull null]),
  };
}
@end

@implementation IdvColor
+ (instancetype)makeWithColor:(NSString *)color
    darkModeColor:(nullable NSString *)darkModeColor {
  IdvColor* pigeonResult = [[IdvColor alloc] init];
  pigeonResult.color = color;
  pigeonResult.darkModeColor = darkModeColor;
  return pigeonResult;
}
+ (IdvColor *)fromMap:(NSDictionary *)dict {
  IdvColor *pigeonResult = [[IdvColor alloc] init];
  pigeonResult.color = GetNullableObject(dict, @"color");
  NSAssert(pigeonResult.color != nil, @"");
  pigeonResult.darkModeColor = GetNullableObject(dict, @"darkModeColor");
  return pigeonResult;
}
+ (nullable IdvColor *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvColor fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"color" : (self.color ?: [NSNull null]),
    @"darkModeColor" : (self.darkModeColor ?: [NSNull null]),
  };
}
@end

@implementation IdvFont
+ (instancetype)makeWithSize:(NSNumber *)size
    weight:(nullable NSNumber *)weight {
  IdvFont* pigeonResult = [[IdvFont alloc] init];
  pigeonResult.size = size;
  pigeonResult.weight = weight;
  return pigeonResult;
}
+ (IdvFont *)fromMap:(NSDictionary *)dict {
  IdvFont *pigeonResult = [[IdvFont alloc] init];
  pigeonResult.size = GetNullableObject(dict, @"size");
  NSAssert(pigeonResult.size != nil, @"");
  pigeonResult.weight = GetNullableObject(dict, @"weight");
  return pigeonResult;
}
+ (nullable IdvFont *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvFont fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"size" : (self.size ?: [NSNull null]),
    @"weight" : (self.weight ?: [NSNull null]),
  };
}
@end

@implementation IdvFontFamily
+ (instancetype)makeWithName:(NSString *)name
    path:(NSString *)path {
  IdvFontFamily* pigeonResult = [[IdvFontFamily alloc] init];
  pigeonResult.name = name;
  pigeonResult.path = path;
  return pigeonResult;
}
+ (IdvFontFamily *)fromMap:(NSDictionary *)dict {
  IdvFontFamily *pigeonResult = [[IdvFontFamily alloc] init];
  pigeonResult.name = GetNullableObject(dict, @"name");
  NSAssert(pigeonResult.name != nil, @"");
  pigeonResult.path = GetNullableObject(dict, @"path");
  NSAssert(pigeonResult.path != nil, @"");
  return pigeonResult;
}
+ (nullable IdvFontFamily *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvFontFamily fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"name" : (self.name ?: [NSNull null]),
    @"path" : (self.path ?: [NSNull null]),
  };
}
@end

@implementation IdvLocalizationTheme
+ (instancetype)makeWithLocalizationFileName:(nullable NSString *)localizationFileName
    faceTecLocalizationFileName:(nullable NSString *)faceTecLocalizationFileName {
  IdvLocalizationTheme* pigeonResult = [[IdvLocalizationTheme alloc] init];
  pigeonResult.localizationFileName = localizationFileName;
  pigeonResult.faceTecLocalizationFileName = faceTecLocalizationFileName;
  return pigeonResult;
}
+ (IdvLocalizationTheme *)fromMap:(NSDictionary *)dict {
  IdvLocalizationTheme *pigeonResult = [[IdvLocalizationTheme alloc] init];
  pigeonResult.localizationFileName = GetNullableObject(dict, @"localizationFileName");
  pigeonResult.faceTecLocalizationFileName = GetNullableObject(dict, @"faceTecLocalizationFileName");
  return pigeonResult;
}
+ (nullable IdvLocalizationTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvLocalizationTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"localizationFileName" : (self.localizationFileName ?: [NSNull null]),
    @"faceTecLocalizationFileName" : (self.faceTecLocalizationFileName ?: [NSNull null]),
  };
}
@end

@implementation IdvColorTheme
+ (instancetype)makeWithPrimaryColor:(nullable IdvColor *)primaryColor
    stepCaptionColor:(nullable IdvColor *)stepCaptionColor
    stepDisabledColor:(nullable IdvColor *)stepDisabledColor
    successColor:(nullable IdvColor *)successColor
    highlightColor:(nullable IdvColor *)highlightColor
    stepBackgroundSuccessColor:(nullable IdvColor *)stepBackgroundSuccessColor
    errorColor:(nullable IdvColor *)errorColor
    buttonBackgroundEnabledColor:(nullable IdvColor *)buttonBackgroundEnabledColor
    buttonBackgroundDisabledColor:(nullable IdvColor *)buttonBackgroundDisabledColor
    buttonTextDisabledColor:(nullable IdvColor *)buttonTextDisabledColor
    buttonTextEnabledColor:(nullable IdvColor *)buttonTextEnabledColor
    defaultBackgroundColor:(nullable IdvColor *)defaultBackgroundColor
    stepBackgroundColor:(nullable IdvColor *)stepBackgroundColor
    labelColor:(nullable IdvColor *)labelColor
    secondaryLabelColor:(nullable IdvColor *)secondaryLabelColor
    reviewDataEditBannerBackgroundColor:(nullable IdvColor *)reviewDataEditBannerBackgroundColor
    reviewDataEditBannerTextColor:(nullable IdvColor *)reviewDataEditBannerTextColor
    stepLabelColor:(nullable IdvColor *)stepLabelColor
    alertColor:(nullable IdvColor *)alertColor
    needsReviewColor:(nullable IdvColor *)needsReviewColor
    idInstructionsTextColor:(nullable IdvColor *)idInstructionsTextColor
    idFlashlightWarningBackgroundColor:(nullable IdvColor *)idFlashlightWarningBackgroundColor
    idFlashlightWarningTextColor:(nullable IdvColor *)idFlashlightWarningTextColor
    idReticleErrorColor:(nullable IdvColor *)idReticleErrorColor
    faceTecPrimaryColor:(nullable IdvColor *)faceTecPrimaryColor
    faceTecLoadingBarRailColor:(nullable IdvColor *)faceTecLoadingBarRailColor
    faceTecMainTextColor:(nullable IdvColor *)faceTecMainTextColor
    faceTecSubtextColor:(nullable IdvColor *)faceTecSubtextColor
    faceTecButtonTextColor:(nullable IdvColor *)faceTecButtonTextColor
    faceTecOvalColor:(nullable IdvColor *)faceTecOvalColor
    faceTecOvalProgressColor:(nullable IdvColor *)faceTecOvalProgressColor
    faceTecFeedbackBarBackgroundColor:(nullable IdvColor *)faceTecFeedbackBarBackgroundColor
    faceTecFeedbackBarTextColor:(nullable IdvColor *)faceTecFeedbackBarTextColor
    faceTecResultAnimationCheckmarkForegroundColor:(nullable IdvColor *)faceTecResultAnimationCheckmarkForegroundColor {
  IdvColorTheme* pigeonResult = [[IdvColorTheme alloc] init];
  pigeonResult.primaryColor = primaryColor;
  pigeonResult.stepCaptionColor = stepCaptionColor;
  pigeonResult.stepDisabledColor = stepDisabledColor;
  pigeonResult.successColor = successColor;
  pigeonResult.highlightColor = highlightColor;
  pigeonResult.stepBackgroundSuccessColor = stepBackgroundSuccessColor;
  pigeonResult.errorColor = errorColor;
  pigeonResult.buttonBackgroundEnabledColor = buttonBackgroundEnabledColor;
  pigeonResult.buttonBackgroundDisabledColor = buttonBackgroundDisabledColor;
  pigeonResult.buttonTextDisabledColor = buttonTextDisabledColor;
  pigeonResult.buttonTextEnabledColor = buttonTextEnabledColor;
  pigeonResult.defaultBackgroundColor = defaultBackgroundColor;
  pigeonResult.stepBackgroundColor = stepBackgroundColor;
  pigeonResult.labelColor = labelColor;
  pigeonResult.secondaryLabelColor = secondaryLabelColor;
  pigeonResult.reviewDataEditBannerBackgroundColor = reviewDataEditBannerBackgroundColor;
  pigeonResult.reviewDataEditBannerTextColor = reviewDataEditBannerTextColor;
  pigeonResult.stepLabelColor = stepLabelColor;
  pigeonResult.alertColor = alertColor;
  pigeonResult.needsReviewColor = needsReviewColor;
  pigeonResult.idInstructionsTextColor = idInstructionsTextColor;
  pigeonResult.idFlashlightWarningBackgroundColor = idFlashlightWarningBackgroundColor;
  pigeonResult.idFlashlightWarningTextColor = idFlashlightWarningTextColor;
  pigeonResult.idReticleErrorColor = idReticleErrorColor;
  pigeonResult.faceTecPrimaryColor = faceTecPrimaryColor;
  pigeonResult.faceTecLoadingBarRailColor = faceTecLoadingBarRailColor;
  pigeonResult.faceTecMainTextColor = faceTecMainTextColor;
  pigeonResult.faceTecSubtextColor = faceTecSubtextColor;
  pigeonResult.faceTecButtonTextColor = faceTecButtonTextColor;
  pigeonResult.faceTecOvalColor = faceTecOvalColor;
  pigeonResult.faceTecOvalProgressColor = faceTecOvalProgressColor;
  pigeonResult.faceTecFeedbackBarBackgroundColor = faceTecFeedbackBarBackgroundColor;
  pigeonResult.faceTecFeedbackBarTextColor = faceTecFeedbackBarTextColor;
  pigeonResult.faceTecResultAnimationCheckmarkForegroundColor = faceTecResultAnimationCheckmarkForegroundColor;
  return pigeonResult;
}
+ (IdvColorTheme *)fromMap:(NSDictionary *)dict {
  IdvColorTheme *pigeonResult = [[IdvColorTheme alloc] init];
  pigeonResult.primaryColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"primaryColor")];
  pigeonResult.stepCaptionColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"stepCaptionColor")];
  pigeonResult.stepDisabledColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"stepDisabledColor")];
  pigeonResult.successColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"successColor")];
  pigeonResult.highlightColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"highlightColor")];
  pigeonResult.stepBackgroundSuccessColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"stepBackgroundSuccessColor")];
  pigeonResult.errorColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"errorColor")];
  pigeonResult.buttonBackgroundEnabledColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"buttonBackgroundEnabledColor")];
  pigeonResult.buttonBackgroundDisabledColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"buttonBackgroundDisabledColor")];
  pigeonResult.buttonTextDisabledColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"buttonTextDisabledColor")];
  pigeonResult.buttonTextEnabledColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"buttonTextEnabledColor")];
  pigeonResult.defaultBackgroundColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"defaultBackgroundColor")];
  pigeonResult.stepBackgroundColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"stepBackgroundColor")];
  pigeonResult.labelColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"labelColor")];
  pigeonResult.secondaryLabelColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"secondaryLabelColor")];
  pigeonResult.reviewDataEditBannerBackgroundColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"reviewDataEditBannerBackgroundColor")];
  pigeonResult.reviewDataEditBannerTextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"reviewDataEditBannerTextColor")];
  pigeonResult.stepLabelColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"stepLabelColor")];
  pigeonResult.alertColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"alertColor")];
  pigeonResult.needsReviewColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"needsReviewColor")];
  pigeonResult.idInstructionsTextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"idInstructionsTextColor")];
  pigeonResult.idFlashlightWarningBackgroundColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"idFlashlightWarningBackgroundColor")];
  pigeonResult.idFlashlightWarningTextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"idFlashlightWarningTextColor")];
  pigeonResult.idReticleErrorColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"idReticleErrorColor")];
  pigeonResult.faceTecPrimaryColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecPrimaryColor")];
  pigeonResult.faceTecLoadingBarRailColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecLoadingBarRailColor")];
  pigeonResult.faceTecMainTextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecMainTextColor")];
  pigeonResult.faceTecSubtextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecSubtextColor")];
  pigeonResult.faceTecButtonTextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecButtonTextColor")];
  pigeonResult.faceTecOvalColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecOvalColor")];
  pigeonResult.faceTecOvalProgressColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecOvalProgressColor")];
  pigeonResult.faceTecFeedbackBarBackgroundColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecFeedbackBarBackgroundColor")];
  pigeonResult.faceTecFeedbackBarTextColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecFeedbackBarTextColor")];
  pigeonResult.faceTecResultAnimationCheckmarkForegroundColor = [IdvColor nullableFromMap:GetNullableObject(dict, @"faceTecResultAnimationCheckmarkForegroundColor")];
  return pigeonResult;
}
+ (nullable IdvColorTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvColorTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"primaryColor" : (self.primaryColor ? [self.primaryColor toMap] : [NSNull null]),
    @"stepCaptionColor" : (self.stepCaptionColor ? [self.stepCaptionColor toMap] : [NSNull null]),
    @"stepDisabledColor" : (self.stepDisabledColor ? [self.stepDisabledColor toMap] : [NSNull null]),
    @"successColor" : (self.successColor ? [self.successColor toMap] : [NSNull null]),
    @"highlightColor" : (self.highlightColor ? [self.highlightColor toMap] : [NSNull null]),
    @"stepBackgroundSuccessColor" : (self.stepBackgroundSuccessColor ? [self.stepBackgroundSuccessColor toMap] : [NSNull null]),
    @"errorColor" : (self.errorColor ? [self.errorColor toMap] : [NSNull null]),
    @"buttonBackgroundEnabledColor" : (self.buttonBackgroundEnabledColor ? [self.buttonBackgroundEnabledColor toMap] : [NSNull null]),
    @"buttonBackgroundDisabledColor" : (self.buttonBackgroundDisabledColor ? [self.buttonBackgroundDisabledColor toMap] : [NSNull null]),
    @"buttonTextDisabledColor" : (self.buttonTextDisabledColor ? [self.buttonTextDisabledColor toMap] : [NSNull null]),
    @"buttonTextEnabledColor" : (self.buttonTextEnabledColor ? [self.buttonTextEnabledColor toMap] : [NSNull null]),
    @"defaultBackgroundColor" : (self.defaultBackgroundColor ? [self.defaultBackgroundColor toMap] : [NSNull null]),
    @"stepBackgroundColor" : (self.stepBackgroundColor ? [self.stepBackgroundColor toMap] : [NSNull null]),
    @"labelColor" : (self.labelColor ? [self.labelColor toMap] : [NSNull null]),
    @"secondaryLabelColor" : (self.secondaryLabelColor ? [self.secondaryLabelColor toMap] : [NSNull null]),
    @"reviewDataEditBannerBackgroundColor" : (self.reviewDataEditBannerBackgroundColor ? [self.reviewDataEditBannerBackgroundColor toMap] : [NSNull null]),
    @"reviewDataEditBannerTextColor" : (self.reviewDataEditBannerTextColor ? [self.reviewDataEditBannerTextColor toMap] : [NSNull null]),
    @"stepLabelColor" : (self.stepLabelColor ? [self.stepLabelColor toMap] : [NSNull null]),
    @"alertColor" : (self.alertColor ? [self.alertColor toMap] : [NSNull null]),
    @"needsReviewColor" : (self.needsReviewColor ? [self.needsReviewColor toMap] : [NSNull null]),
    @"idInstructionsTextColor" : (self.idInstructionsTextColor ? [self.idInstructionsTextColor toMap] : [NSNull null]),
    @"idFlashlightWarningBackgroundColor" : (self.idFlashlightWarningBackgroundColor ? [self.idFlashlightWarningBackgroundColor toMap] : [NSNull null]),
    @"idFlashlightWarningTextColor" : (self.idFlashlightWarningTextColor ? [self.idFlashlightWarningTextColor toMap] : [NSNull null]),
    @"idReticleErrorColor" : (self.idReticleErrorColor ? [self.idReticleErrorColor toMap] : [NSNull null]),
    @"faceTecPrimaryColor" : (self.faceTecPrimaryColor ? [self.faceTecPrimaryColor toMap] : [NSNull null]),
    @"faceTecLoadingBarRailColor" : (self.faceTecLoadingBarRailColor ? [self.faceTecLoadingBarRailColor toMap] : [NSNull null]),
    @"faceTecMainTextColor" : (self.faceTecMainTextColor ? [self.faceTecMainTextColor toMap] : [NSNull null]),
    @"faceTecSubtextColor" : (self.faceTecSubtextColor ? [self.faceTecSubtextColor toMap] : [NSNull null]),
    @"faceTecButtonTextColor" : (self.faceTecButtonTextColor ? [self.faceTecButtonTextColor toMap] : [NSNull null]),
    @"faceTecOvalColor" : (self.faceTecOvalColor ? [self.faceTecOvalColor toMap] : [NSNull null]),
    @"faceTecOvalProgressColor" : (self.faceTecOvalProgressColor ? [self.faceTecOvalProgressColor toMap] : [NSNull null]),
    @"faceTecFeedbackBarBackgroundColor" : (self.faceTecFeedbackBarBackgroundColor ? [self.faceTecFeedbackBarBackgroundColor toMap] : [NSNull null]),
    @"faceTecFeedbackBarTextColor" : (self.faceTecFeedbackBarTextColor ? [self.faceTecFeedbackBarTextColor toMap] : [NSNull null]),
    @"faceTecResultAnimationCheckmarkForegroundColor" : (self.faceTecResultAnimationCheckmarkForegroundColor ? [self.faceTecResultAnimationCheckmarkForegroundColor toMap] : [NSNull null]),
  };
}
@end

@implementation IdvFontTheme
+ (instancetype)makeWithNavigationBarTitleFont:(nullable IdvFont *)navigationBarTitleFont
    buttonFont:(nullable IdvFont *)buttonFont
    dataCaptionFont:(nullable IdvFont *)dataCaptionFont
    dataTitleFont:(nullable IdvFont *)dataTitleFont
    dataHeaderFont:(nullable IdvFont *)dataHeaderFont
    titleFont:(nullable IdvFont *)titleFont
    buttonStartFont:(nullable IdvFont *)buttonStartFont
    stepTitleFont:(nullable IdvFont *)stepTitleFont
    stepNumberFont:(nullable IdvFont *)stepNumberFont
    secondaryLabelFont:(nullable IdvFont *)secondaryLabelFont
    faceTecMessageFont:(nullable IdvFont *)faceTecMessageFont
    faceTecHeaderFont:(nullable IdvFont *)faceTecHeaderFont
    faceTecSubtextFont:(nullable IdvFont *)faceTecSubtextFont
    faceTecButtonFont:(nullable IdvFont *)faceTecButtonFont
    idInstructionsFont:(nullable IdvFont *)idInstructionsFont
    idFlashlightWarningFont:(nullable IdvFont *)idFlashlightWarningFont
    fontFamily:(nullable IdvFontFamily *)fontFamily {
  IdvFontTheme* pigeonResult = [[IdvFontTheme alloc] init];
  pigeonResult.navigationBarTitleFont = navigationBarTitleFont;
  pigeonResult.buttonFont = buttonFont;
  pigeonResult.dataCaptionFont = dataCaptionFont;
  pigeonResult.dataTitleFont = dataTitleFont;
  pigeonResult.dataHeaderFont = dataHeaderFont;
  pigeonResult.titleFont = titleFont;
  pigeonResult.buttonStartFont = buttonStartFont;
  pigeonResult.stepTitleFont = stepTitleFont;
  pigeonResult.stepNumberFont = stepNumberFont;
  pigeonResult.secondaryLabelFont = secondaryLabelFont;
  pigeonResult.faceTecMessageFont = faceTecMessageFont;
  pigeonResult.faceTecHeaderFont = faceTecHeaderFont;
  pigeonResult.faceTecSubtextFont = faceTecSubtextFont;
  pigeonResult.faceTecButtonFont = faceTecButtonFont;
  pigeonResult.idInstructionsFont = idInstructionsFont;
  pigeonResult.idFlashlightWarningFont = idFlashlightWarningFont;
  pigeonResult.fontFamily = fontFamily;
  return pigeonResult;
}
+ (IdvFontTheme *)fromMap:(NSDictionary *)dict {
  IdvFontTheme *pigeonResult = [[IdvFontTheme alloc] init];
  pigeonResult.navigationBarTitleFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"navigationBarTitleFont")];
  pigeonResult.buttonFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"buttonFont")];
  pigeonResult.dataCaptionFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"dataCaptionFont")];
  pigeonResult.dataTitleFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"dataTitleFont")];
  pigeonResult.dataHeaderFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"dataHeaderFont")];
  pigeonResult.titleFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"titleFont")];
  pigeonResult.buttonStartFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"buttonStartFont")];
  pigeonResult.stepTitleFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"stepTitleFont")];
  pigeonResult.stepNumberFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"stepNumberFont")];
  pigeonResult.secondaryLabelFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"secondaryLabelFont")];
  pigeonResult.faceTecMessageFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"faceTecMessageFont")];
  pigeonResult.faceTecHeaderFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"faceTecHeaderFont")];
  pigeonResult.faceTecSubtextFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"faceTecSubtextFont")];
  pigeonResult.faceTecButtonFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"faceTecButtonFont")];
  pigeonResult.idInstructionsFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"idInstructionsFont")];
  pigeonResult.idFlashlightWarningFont = [IdvFont nullableFromMap:GetNullableObject(dict, @"idFlashlightWarningFont")];
  pigeonResult.fontFamily = [IdvFontFamily nullableFromMap:GetNullableObject(dict, @"fontFamily")];
  return pigeonResult;
}
+ (nullable IdvFontTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvFontTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"navigationBarTitleFont" : (self.navigationBarTitleFont ? [self.navigationBarTitleFont toMap] : [NSNull null]),
    @"buttonFont" : (self.buttonFont ? [self.buttonFont toMap] : [NSNull null]),
    @"dataCaptionFont" : (self.dataCaptionFont ? [self.dataCaptionFont toMap] : [NSNull null]),
    @"dataTitleFont" : (self.dataTitleFont ? [self.dataTitleFont toMap] : [NSNull null]),
    @"dataHeaderFont" : (self.dataHeaderFont ? [self.dataHeaderFont toMap] : [NSNull null]),
    @"titleFont" : (self.titleFont ? [self.titleFont toMap] : [NSNull null]),
    @"buttonStartFont" : (self.buttonStartFont ? [self.buttonStartFont toMap] : [NSNull null]),
    @"stepTitleFont" : (self.stepTitleFont ? [self.stepTitleFont toMap] : [NSNull null]),
    @"stepNumberFont" : (self.stepNumberFont ? [self.stepNumberFont toMap] : [NSNull null]),
    @"secondaryLabelFont" : (self.secondaryLabelFont ? [self.secondaryLabelFont toMap] : [NSNull null]),
    @"faceTecMessageFont" : (self.faceTecMessageFont ? [self.faceTecMessageFont toMap] : [NSNull null]),
    @"faceTecHeaderFont" : (self.faceTecHeaderFont ? [self.faceTecHeaderFont toMap] : [NSNull null]),
    @"faceTecSubtextFont" : (self.faceTecSubtextFont ? [self.faceTecSubtextFont toMap] : [NSNull null]),
    @"faceTecButtonFont" : (self.faceTecButtonFont ? [self.faceTecButtonFont toMap] : [NSNull null]),
    @"idInstructionsFont" : (self.idInstructionsFont ? [self.idInstructionsFont toMap] : [NSNull null]),
    @"idFlashlightWarningFont" : (self.idFlashlightWarningFont ? [self.idFlashlightWarningFont toMap] : [NSNull null]),
    @"fontFamily" : (self.fontFamily ? [self.fontFamily toMap] : [NSNull null]),
  };
}
@end

@implementation IdvImageTheme
+ (instancetype)makeWithLandingIllustration:(nullable NSString *)landingIllustration
    iconCheckmarkLarge:(nullable NSString *)iconCheckmarkLarge
    iconCrossLarge:(nullable NSString *)iconCrossLarge
    iconCompleteVerificationBackground:(nullable NSString *)iconCompleteVerificationBackground
    iconActionCheckmark:(nullable NSString *)iconActionCheckmark
    iconLock:(nullable NSString *)iconLock
    iconEditField:(nullable NSString *)iconEditField
    editResultsHeaderIcon:(nullable NSString *)editResultsHeaderIcon
    loadingIndicator:(nullable NSString *)loadingIndicator
    idSuccessScanningImage:(nullable NSString *)idSuccessScanningImage
    idFrontCardImage:(nullable NSString *)idFrontCardImage
    idBackCardImage:(nullable NSString *)idBackCardImage
    faceTecCameraPermission:(nullable NSString *)faceTecCameraPermission
    faceTecIdealSelfie:(nullable NSString *)faceTecIdealSelfie
    faceTecProgressSelfieDoneBackground:(nullable NSString *)faceTecProgressSelfieDoneBackground
    faceTecIconClose:(nullable NSString *)faceTecIconClose {
  IdvImageTheme* pigeonResult = [[IdvImageTheme alloc] init];
  pigeonResult.landingIllustration = landingIllustration;
  pigeonResult.iconCheckmarkLarge = iconCheckmarkLarge;
  pigeonResult.iconCrossLarge = iconCrossLarge;
  pigeonResult.iconCompleteVerificationBackground = iconCompleteVerificationBackground;
  pigeonResult.iconActionCheckmark = iconActionCheckmark;
  pigeonResult.iconLock = iconLock;
  pigeonResult.iconEditField = iconEditField;
  pigeonResult.editResultsHeaderIcon = editResultsHeaderIcon;
  pigeonResult.loadingIndicator = loadingIndicator;
  pigeonResult.idSuccessScanningImage = idSuccessScanningImage;
  pigeonResult.idFrontCardImage = idFrontCardImage;
  pigeonResult.idBackCardImage = idBackCardImage;
  pigeonResult.faceTecCameraPermission = faceTecCameraPermission;
  pigeonResult.faceTecIdealSelfie = faceTecIdealSelfie;
  pigeonResult.faceTecProgressSelfieDoneBackground = faceTecProgressSelfieDoneBackground;
  pigeonResult.faceTecIconClose = faceTecIconClose;
  return pigeonResult;
}
+ (IdvImageTheme *)fromMap:(NSDictionary *)dict {
  IdvImageTheme *pigeonResult = [[IdvImageTheme alloc] init];
  pigeonResult.landingIllustration = GetNullableObject(dict, @"landingIllustration");
  pigeonResult.iconCheckmarkLarge = GetNullableObject(dict, @"iconCheckmarkLarge");
  pigeonResult.iconCrossLarge = GetNullableObject(dict, @"iconCrossLarge");
  pigeonResult.iconCompleteVerificationBackground = GetNullableObject(dict, @"iconCompleteVerificationBackground");
  pigeonResult.iconActionCheckmark = GetNullableObject(dict, @"iconActionCheckmark");
  pigeonResult.iconLock = GetNullableObject(dict, @"iconLock");
  pigeonResult.iconEditField = GetNullableObject(dict, @"iconEditField");
  pigeonResult.editResultsHeaderIcon = GetNullableObject(dict, @"editResultsHeaderIcon");
  pigeonResult.loadingIndicator = GetNullableObject(dict, @"loadingIndicator");
  pigeonResult.idSuccessScanningImage = GetNullableObject(dict, @"idSuccessScanningImage");
  pigeonResult.idFrontCardImage = GetNullableObject(dict, @"idFrontCardImage");
  pigeonResult.idBackCardImage = GetNullableObject(dict, @"idBackCardImage");
  pigeonResult.faceTecCameraPermission = GetNullableObject(dict, @"faceTecCameraPermission");
  pigeonResult.faceTecIdealSelfie = GetNullableObject(dict, @"faceTecIdealSelfie");
  pigeonResult.faceTecProgressSelfieDoneBackground = GetNullableObject(dict, @"faceTecProgressSelfieDoneBackground");
  pigeonResult.faceTecIconClose = GetNullableObject(dict, @"faceTecIconClose");
  return pigeonResult;
}
+ (nullable IdvImageTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvImageTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"landingIllustration" : (self.landingIllustration ?: [NSNull null]),
    @"iconCheckmarkLarge" : (self.iconCheckmarkLarge ?: [NSNull null]),
    @"iconCrossLarge" : (self.iconCrossLarge ?: [NSNull null]),
    @"iconCompleteVerificationBackground" : (self.iconCompleteVerificationBackground ?: [NSNull null]),
    @"iconActionCheckmark" : (self.iconActionCheckmark ?: [NSNull null]),
    @"iconLock" : (self.iconLock ?: [NSNull null]),
    @"iconEditField" : (self.iconEditField ?: [NSNull null]),
    @"editResultsHeaderIcon" : (self.editResultsHeaderIcon ?: [NSNull null]),
    @"loadingIndicator" : (self.loadingIndicator ?: [NSNull null]),
    @"idSuccessScanningImage" : (self.idSuccessScanningImage ?: [NSNull null]),
    @"idFrontCardImage" : (self.idFrontCardImage ?: [NSNull null]),
    @"idBackCardImage" : (self.idBackCardImage ?: [NSNull null]),
    @"faceTecCameraPermission" : (self.faceTecCameraPermission ?: [NSNull null]),
    @"faceTecIdealSelfie" : (self.faceTecIdealSelfie ?: [NSNull null]),
    @"faceTecProgressSelfieDoneBackground" : (self.faceTecProgressSelfieDoneBackground ?: [NSNull null]),
    @"faceTecIconClose" : (self.faceTecIconClose ?: [NSNull null]),
  };
}
@end

@implementation IdvSize
+ (instancetype)makeWithWidth:(nullable NSNumber *)width
    height:(nullable NSNumber *)height {
  IdvSize* pigeonResult = [[IdvSize alloc] init];
  pigeonResult.width = width;
  pigeonResult.height = height;
  return pigeonResult;
}
+ (IdvSize *)fromMap:(NSDictionary *)dict {
  IdvSize *pigeonResult = [[IdvSize alloc] init];
  pigeonResult.width = GetNullableObject(dict, @"width");
  pigeonResult.height = GetNullableObject(dict, @"height");
  return pigeonResult;
}
+ (nullable IdvSize *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvSize fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"width" : (self.width ?: [NSNull null]),
    @"height" : (self.height ?: [NSNull null]),
  };
}
@end

@implementation IdvViewTheme
+ (instancetype)makeWithFaceImageCornerRadius:(nullable NSNumber *)faceImageCornerRadius
    buttonCornerRadius:(nullable NSNumber *)buttonCornerRadius
    actionViewCornerRadius:(nullable NSNumber *)actionViewCornerRadius
    actionStepCornerRadius:(nullable NSNumber *)actionStepCornerRadius
    resultsPersonImageCornerRadius:(nullable NSNumber *)resultsPersonImageCornerRadius
    stepViewShadowColor:(nullable NSString *)stepViewShadowColor
    stepViewShadowOffset:(nullable IdvSize *)stepViewShadowOffset
    stepViewShadowOpacity:(nullable NSNumber *)stepViewShadowOpacity
    stepViewShadowRadius:(nullable NSNumber *)stepViewShadowRadius
    buttonHeight:(nullable NSNumber *)buttonHeight
    idInstructionsCornerRadius:(nullable NSNumber *)idInstructionsCornerRadius
    idFlashlightWarningCornerRadius:(nullable NSNumber *)idFlashlightWarningCornerRadius {
  IdvViewTheme* pigeonResult = [[IdvViewTheme alloc] init];
  pigeonResult.faceImageCornerRadius = faceImageCornerRadius;
  pigeonResult.buttonCornerRadius = buttonCornerRadius;
  pigeonResult.actionViewCornerRadius = actionViewCornerRadius;
  pigeonResult.actionStepCornerRadius = actionStepCornerRadius;
  pigeonResult.resultsPersonImageCornerRadius = resultsPersonImageCornerRadius;
  pigeonResult.stepViewShadowColor = stepViewShadowColor;
  pigeonResult.stepViewShadowOffset = stepViewShadowOffset;
  pigeonResult.stepViewShadowOpacity = stepViewShadowOpacity;
  pigeonResult.stepViewShadowRadius = stepViewShadowRadius;
  pigeonResult.buttonHeight = buttonHeight;
  pigeonResult.idInstructionsCornerRadius = idInstructionsCornerRadius;
  pigeonResult.idFlashlightWarningCornerRadius = idFlashlightWarningCornerRadius;
  return pigeonResult;
}
+ (IdvViewTheme *)fromMap:(NSDictionary *)dict {
  IdvViewTheme *pigeonResult = [[IdvViewTheme alloc] init];
  pigeonResult.faceImageCornerRadius = GetNullableObject(dict, @"faceImageCornerRadius");
  pigeonResult.buttonCornerRadius = GetNullableObject(dict, @"buttonCornerRadius");
  pigeonResult.actionViewCornerRadius = GetNullableObject(dict, @"actionViewCornerRadius");
  pigeonResult.actionStepCornerRadius = GetNullableObject(dict, @"actionStepCornerRadius");
  pigeonResult.resultsPersonImageCornerRadius = GetNullableObject(dict, @"resultsPersonImageCornerRadius");
  pigeonResult.stepViewShadowColor = GetNullableObject(dict, @"stepViewShadowColor");
  pigeonResult.stepViewShadowOffset = [IdvSize nullableFromMap:GetNullableObject(dict, @"stepViewShadowOffset")];
  pigeonResult.stepViewShadowOpacity = GetNullableObject(dict, @"stepViewShadowOpacity");
  pigeonResult.stepViewShadowRadius = GetNullableObject(dict, @"stepViewShadowRadius");
  pigeonResult.buttonHeight = GetNullableObject(dict, @"buttonHeight");
  pigeonResult.idInstructionsCornerRadius = GetNullableObject(dict, @"idInstructionsCornerRadius");
  pigeonResult.idFlashlightWarningCornerRadius = GetNullableObject(dict, @"idFlashlightWarningCornerRadius");
  return pigeonResult;
}
+ (nullable IdvViewTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvViewTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"faceImageCornerRadius" : (self.faceImageCornerRadius ?: [NSNull null]),
    @"buttonCornerRadius" : (self.buttonCornerRadius ?: [NSNull null]),
    @"actionViewCornerRadius" : (self.actionViewCornerRadius ?: [NSNull null]),
    @"actionStepCornerRadius" : (self.actionStepCornerRadius ?: [NSNull null]),
    @"resultsPersonImageCornerRadius" : (self.resultsPersonImageCornerRadius ?: [NSNull null]),
    @"stepViewShadowColor" : (self.stepViewShadowColor ?: [NSNull null]),
    @"stepViewShadowOffset" : (self.stepViewShadowOffset ? [self.stepViewShadowOffset toMap] : [NSNull null]),
    @"stepViewShadowOpacity" : (self.stepViewShadowOpacity ?: [NSNull null]),
    @"stepViewShadowRadius" : (self.stepViewShadowRadius ?: [NSNull null]),
    @"buttonHeight" : (self.buttonHeight ?: [NSNull null]),
    @"idInstructionsCornerRadius" : (self.idInstructionsCornerRadius ?: [NSNull null]),
    @"idFlashlightWarningCornerRadius" : (self.idFlashlightWarningCornerRadius ?: [NSNull null]),
  };
}
@end

@implementation IdvNavigationTheme
+ (instancetype)makeWithBarStyle:(BarStyle)barStyle
    isTranslucent:(nullable NSNumber *)isTranslucent
    hideBarButtonOnSuccessfulVerification:(nullable NSNumber *)hideBarButtonOnSuccessfulVerification
    barTintColor:(nullable NSString *)barTintColor
    titleColor:(nullable NSString *)titleColor
    barButtonItemColor:(nullable NSString *)barButtonItemColor {
  IdvNavigationTheme* pigeonResult = [[IdvNavigationTheme alloc] init];
  pigeonResult.barStyle = barStyle;
  pigeonResult.isTranslucent = isTranslucent;
  pigeonResult.hideBarButtonOnSuccessfulVerification = hideBarButtonOnSuccessfulVerification;
  pigeonResult.barTintColor = barTintColor;
  pigeonResult.titleColor = titleColor;
  pigeonResult.barButtonItemColor = barButtonItemColor;
  return pigeonResult;
}
+ (IdvNavigationTheme *)fromMap:(NSDictionary *)dict {
  IdvNavigationTheme *pigeonResult = [[IdvNavigationTheme alloc] init];
  pigeonResult.barStyle = [GetNullableObject(dict, @"barStyle") integerValue];
  pigeonResult.isTranslucent = GetNullableObject(dict, @"isTranslucent");
  pigeonResult.hideBarButtonOnSuccessfulVerification = GetNullableObject(dict, @"hideBarButtonOnSuccessfulVerification");
  pigeonResult.barTintColor = GetNullableObject(dict, @"barTintColor");
  pigeonResult.titleColor = GetNullableObject(dict, @"titleColor");
  pigeonResult.barButtonItemColor = GetNullableObject(dict, @"barButtonItemColor");
  return pigeonResult;
}
+ (nullable IdvNavigationTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvNavigationTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"barStyle" : @(self.barStyle),
    @"isTranslucent" : (self.isTranslucent ?: [NSNull null]),
    @"hideBarButtonOnSuccessfulVerification" : (self.hideBarButtonOnSuccessfulVerification ?: [NSNull null]),
    @"barTintColor" : (self.barTintColor ?: [NSNull null]),
    @"titleColor" : (self.titleColor ?: [NSNull null]),
    @"barButtonItemColor" : (self.barButtonItemColor ?: [NSNull null]),
  };
}
@end

@implementation IdvDateFormatterTheme
+ (instancetype)makeWithCustomDateFormat:(nullable NSString *)customDateFormat {
  IdvDateFormatterTheme* pigeonResult = [[IdvDateFormatterTheme alloc] init];
  pigeonResult.customDateFormat = customDateFormat;
  return pigeonResult;
}
+ (IdvDateFormatterTheme *)fromMap:(NSDictionary *)dict {
  IdvDateFormatterTheme *pigeonResult = [[IdvDateFormatterTheme alloc] init];
  pigeonResult.customDateFormat = GetNullableObject(dict, @"customDateFormat");
  return pigeonResult;
}
+ (nullable IdvDateFormatterTheme *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [IdvDateFormatterTheme fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"customDateFormat" : (self.customDateFormat ?: [NSNull null]),
  };
}
@end

@interface IdvPlatformApiCodecReader : FlutterStandardReader
@end
@implementation IdvPlatformApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [DocumentField fromMap:[self readValue]];
    
    case 129:     
      return [DocumentFilter fromMap:[self readValue]];
    
    case 130:     
      return [DocumentScanStep fromMap:[self readValue]];
    
    case 131:     
      return [FieldValidator fromMap:[self readValue]];
    
    case 132:     
      return [IdvColor fromMap:[self readValue]];
    
    case 133:     
      return [IdvColorTheme fromMap:[self readValue]];
    
    case 134:     
      return [IdvConfiguration fromMap:[self readValue]];
    
    case 135:     
      return [IdvDateFormatterTheme fromMap:[self readValue]];
    
    case 136:     
      return [IdvFont fromMap:[self readValue]];
    
    case 137:     
      return [IdvFontFamily fromMap:[self readValue]];
    
    case 138:     
      return [IdvFontTheme fromMap:[self readValue]];
    
    case 139:     
      return [IdvImageTheme fromMap:[self readValue]];
    
    case 140:     
      return [IdvLocalizationTheme fromMap:[self readValue]];
    
    case 141:     
      return [IdvNavigationTheme fromMap:[self readValue]];
    
    case 142:     
      return [IdvSize fromMap:[self readValue]];
    
    case 143:     
      return [IdvViewTheme fromMap:[self readValue]];
    
    case 144:     
      return [LivenessStep fromMap:[self readValue]];
    
    case 145:     
      return [LivenessStepOptions fromMap:[self readValue]];
    
    case 146:     
      return [ModificationConfig fromMap:[self readValue]];
    
    case 147:     
      return [RequestTimeout fromMap:[self readValue]];
    
    case 148:     
      return [VerificationServiceSettings fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface IdvPlatformApiCodecWriter : FlutterStandardWriter
@end
@implementation IdvPlatformApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[DocumentField class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DocumentFilter class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DocumentScanStep class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FieldValidator class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvColor class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvColorTheme class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvConfiguration class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvDateFormatterTheme class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvFont class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvFontFamily class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvFontTheme class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvImageTheme class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvLocalizationTheme class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvNavigationTheme class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvSize class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[IdvViewTheme class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LivenessStep class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[LivenessStepOptions class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ModificationConfig class]]) {
    [self writeByte:146];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[RequestTimeout class]]) {
    [self writeByte:147];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VerificationServiceSettings class]]) {
    [self writeByte:148];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface IdvPlatformApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation IdvPlatformApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[IdvPlatformApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[IdvPlatformApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *IdvPlatformApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    IdvPlatformApiCodecReaderWriter *readerWriter = [[IdvPlatformApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void IdvPlatformApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<IdvPlatformApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IdvPlatformApi.startVerification"
        binaryMessenger:binaryMessenger
        codec:IdvPlatformApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startVerificationIdvConfiguration:completion:)], @"IdvPlatformApi api (%@) doesn't respond to @selector(startVerificationIdvConfiguration:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IdvConfiguration *arg_idvConfiguration = GetNullableObjectAtIndex(args, 0);
        [api startVerificationIdvConfiguration:arg_idvConfiguration completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.IdvPlatformApi.setupIdentityVerificationCustomization"
        binaryMessenger:binaryMessenger
        codec:IdvPlatformApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setupIdentityVerificationCustomizationColorTheme:fontTheme:imageTheme:localizationTheme:viewTheme:navigationTheme:dateFormatterTheme:completion:)], @"IdvPlatformApi api (%@) doesn't respond to @selector(setupIdentityVerificationCustomizationColorTheme:fontTheme:imageTheme:localizationTheme:viewTheme:navigationTheme:dateFormatterTheme:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        IdvColorTheme *arg_colorTheme = GetNullableObjectAtIndex(args, 0);
        IdvFontTheme *arg_fontTheme = GetNullableObjectAtIndex(args, 1);
        IdvImageTheme *arg_imageTheme = GetNullableObjectAtIndex(args, 2);
        IdvLocalizationTheme *arg_localizationTheme = GetNullableObjectAtIndex(args, 3);
        IdvViewTheme *arg_viewTheme = GetNullableObjectAtIndex(args, 4);
        IdvNavigationTheme *arg_navigationTheme = GetNullableObjectAtIndex(args, 5);
        IdvDateFormatterTheme *arg_dateFormatterTheme = GetNullableObjectAtIndex(args, 6);
        [api setupIdentityVerificationCustomizationColorTheme:arg_colorTheme fontTheme:arg_fontTheme imageTheme:arg_imageTheme localizationTheme:arg_localizationTheme viewTheme:arg_viewTheme navigationTheme:arg_navigationTheme dateFormatterTheme:arg_dateFormatterTheme completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface IdvDartApiCodecReader : FlutterStandardReader
@end
@implementation IdvDartApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [ClassInfo fromMap:[self readValue]];
    
    case 129:     
      return [DocumentResult fromMap:[self readValue]];
    
    case 130:     
      return [ImageAnalysisResult fromMap:[self readValue]];
    
    case 131:     
      return [ResultField fromMap:[self readValue]];
    
    case 132:     
      return [SimpleDate fromMap:[self readValue]];
    
    case 133:     
      return [VerificationResult fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface IdvDartApiCodecWriter : FlutterStandardWriter
@end
@implementation IdvDartApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[ClassInfo class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[DocumentResult class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ImageAnalysisResult class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[ResultField class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[SimpleDate class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VerificationResult class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface IdvDartApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation IdvDartApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[IdvDartApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[IdvDartApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *IdvDartApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    IdvDartApiCodecReaderWriter *readerWriter = [[IdvDartApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface IdvDartApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation IdvDartApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onLivenessCheckSuccessImage:(nullable FlutterStandardTypedData *)arg_image completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.IdvDartApi.onLivenessCheckSuccess"
      binaryMessenger:self.binaryMessenger
      codec:IdvDartApiGetCodec()];
  [channel sendMessage:@[arg_image ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onVerificationResultVerificationResult:(VerificationResult *)arg_verificationResult completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.IdvDartApi.onVerificationResult"
      binaryMessenger:self.binaryMessenger
      codec:IdvDartApiGetCodec()];
  [channel sendMessage:@[arg_verificationResult ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onResultConfirmedDocumentResult:(DocumentResult *)arg_documentResult completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.IdvDartApi.onResultConfirmed"
      binaryMessenger:self.binaryMessenger
      codec:IdvDartApiGetCodec()];
  [channel sendMessage:@[arg_documentResult ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onLivenessCheckFailureFeebackCode:(NSString *)arg_feebackCode completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.IdvDartApi.onLivenessCheckFailure"
      binaryMessenger:self.binaryMessenger
      codec:IdvDartApiGetCodec()];
  [channel sendMessage:@[arg_feebackCode ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onLivenessCheckErrorError:(nullable NSString *)arg_error completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.IdvDartApi.onLivenessCheckError"
      binaryMessenger:self.binaryMessenger
      codec:IdvDartApiGetCodec()];
  [channel sendMessage:@[arg_error ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
