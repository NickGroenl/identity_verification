// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.microblink.identityverification.flutter.config;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class DartConfig {

  public enum ScanStep {
    BlinkId(0),
    DocumentVerification(1);

    private int index;
    private ScanStep(final int index) {
      this.index = index;
    }
  }

  public enum Liveness {
    Facetec(0),
    IProov(1);

    private int index;
    private Liveness(final int index) {
      this.index = index;
    }
  }

  public enum LivenessUIFilter {
    Classic(0),
    Shaded(1),
    Vibrant(2);

    private int index;
    private LivenessUIFilter(final int index) {
      this.index = index;
    }
  }

  public enum ResultFieldType {
    StringResult(0),
    InsertedStringResult(1),
    EditedStringResult(2),
    DateResult(3),
    BooleanResult(4);

    private int index;
    private ResultFieldType(final int index) {
      this.index = index;
    }
  }

  public enum FieldType {
    FIRST_NAME(0),
    LAST_NAME(1),
    FULL_NAME(2),
    LOCALIZED_NAME(3),
    ADDITIONAL_NAME_INFORMATION(4),
    DATE_OF_BIRTH(5),
    PLACE_OF_BIRTH(6),
    DATE_OF_ISSUE(7),
    DATE_OF_EXPIRY(8),
    DATE_OF_EXPIRY_PERMANENT(9),
    DOCUMENT_NUMBER(10),
    PERSONAL_ID_NUMBER(11),
    DOCUMENT_ADDITIONAL_NUMBER(12),
    ADDRESS(13),
    RESIDENTIAL_STATUS(14),
    ADDITIONAL_ADDRESS_INFORMATION(15),
    NATIONALITY(16),
    ISSUING_AUTHORITY(17),
    SEX(18),
    MARITAL_STATUS(19),
    RACE(20),
    RELIGION(21),
    PROFESSION(22),
    EMPLOYER(23);

    private int index;
    private FieldType(final int index) {
      this.index = index;
    }
  }

  public enum VerificationType {
    SUCCESS(0),
    FAILED(1),
    CANCELLED(2),
    NEEDS_REVIEW(3);

    private int index;
    private VerificationType(final int index) {
      this.index = index;
    }
  }

  public enum BarStyle {
    white(0),
    black(1);

    private int index;
    private BarStyle(final int index) {
      this.index = index;
    }
  }

  public enum KeyboardType {
    DEFAULT(0),
    ASCII_CAPABLE(1),
    NUMBERS_AND_PUNCTUATIONS(2),
    URL(3),
    NUMBER_PAD(4),
    PHONE_PAD(5),
    NAME_PHONE_PAD(6),
    EMAIL(7),
    DECIMAL_PAD(8),
    TWITTER(9),
    WEB_SEARCH(10),
    ASCII_CAPABLE_NUMPAD(11);

    private int index;
    private KeyboardType(final int index) {
      this.index = index;
    }
  }

  public enum DocumentImageColorStatus {
    NotAvailable(0),
    BlackAndWhite(1),
    Color(2);

    private int index;
    private DocumentImageColorStatus(final int index) {
      this.index = index;
    }
  }

  public enum ImageAnalysisDetectionStatus {
    NotAvailable(0),
    NotDetected(1),
    Detected(2);

    private int index;
    private ImageAnalysisDetectionStatus(final int index) {
      this.index = index;
    }
  }

  public enum Country {
    None(0),
    Albania(1),
    Algeria(2),
    Argentina(3),
    Australia(4),
    Austria(5),
    Azerbaijan(6),
    Bahrain(7),
    Bangladesh(8),
    Belgium(9),
    BosniaAndHerzegovina(10),
    Brunei(11),
    Bulgaria(12),
    Cambodia(13),
    Canada(14),
    Chile(15),
    Colombia(16),
    CostaRica(17),
    Croatia(18),
    Cyprus(19),
    Czechia(20),
    Denmark(21),
    DominicanRepublic(22),
    Egypt(23),
    Estonia(24),
    Finland(25),
    France(26),
    Georgia(27),
    Germany(28),
    Ghana(29),
    Greece(30),
    Guatemala(31),
    HongKong(32),
    Hungary(33),
    India(34),
    Indonesia(35),
    Ireland(36),
    Israel(37),
    Italy(38),
    Jordan(39),
    Kazakhstan(40),
    Kenya(41),
    Kosovo(42),
    Kuwait(43),
    Latvia(44),
    Lithuania(45),
    Malaysia(46),
    Maldives(47),
    Malta(48),
    Mauritius(49),
    Mexico(50),
    Morocco(51),
    Netherlands(52),
    NewZealand(53),
    Nigeria(54),
    Pakistan(55),
    Panama(56),
    Paraguay(57),
    Philippines(58),
    Poland(59),
    Portugal(60),
    PuertoRico(61),
    Qatar(62),
    Romania(63),
    Russia(64),
    SaudiArabia(65),
    Serbia(66),
    Singapore(67),
    Slovakia(68),
    Slovenia(69),
    SouthAfrica(70),
    Spain(71),
    Sweden(72),
    Switzerland(73),
    Taiwan(74),
    Thailand(75),
    Tunisia(76),
    Turkey(77),
    UAE(78),
    Uganda(79),
    UK(80),
    Ukraine(81),
    Usa(82),
    Vietnam(83),
    Brazil(84),
    Norway(85),
    Oman(86),
    Ecuador(87),
    ElSalvador(88),
    SriLanka(89),
    Peru(90),
    Uruguay(91),
    Bahamas(92),
    Bermuda(93),
    Bolivia(94),
    China(95),
    EuropeanUnion(96),
    Haiti(97),
    Honduras(98),
    Iceland(99),
    Japan(100),
    Luxembourg(101),
    Montenegro(102),
    Nicaragua(103),
    SouthKorea(104),
    Venezuela(105),
    Afghanistan(106),
    AlandIslands(107),
    AmericanSamoa(108),
    Andorra(109),
    Angola(110),
    Anguilla(111),
    Antarctica(112),
    AntiguaAndBarbuda(113),
    Armenia(114),
    Aruba(115),
    BailiwickOfGuernsey(116),
    BailiwickOfJersey(117),
    Barbados(118),
    Belarus(119),
    Belize(120),
    Benin(121),
    Bhutan(122),
    BonaireSaintEustatiusAndSaba(123),
    Botswana(124),
    BouvetIsland(125),
    BritishIndianOceanTerritory(126),
    BurkinaFaso(127),
    Burundi(128),
    Cameroon(129),
    CapeVerde(130),
    CaribbeanNetherlands(131),
    CaymanIslands(132),
    CentralAfricanRepublic(133),
    Chad(134),
    ChristmasIsland(135),
    CocosIslands(136),
    Comoros(137),
    Congo(138),
    CookIslands(139),
    Cuba(140),
    Curacao(141),
    DemocraticRepublicOfTheCongo(142),
    Djibouti(143),
    Dominica(144),
    EastTimor(145),
    EquatorialGuinea(146),
    Eritrea(147),
    Ethiopia(148),
    FalklandIslands(149),
    FaroeIslands(150),
    FederatedStatesOfMicronesia(151),
    Fiji(152),
    FrenchGuiana(153),
    FrenchPolynesia(154),
    FrenchSouthernTerritories(155),
    Gabon(156),
    Gambia(157),
    Gibraltar(158),
    Greenland(159),
    Grenada(160),
    Guadeloupe(161),
    Guam(162),
    Guinea(163),
    GuineaBissau(164),
    Guyana(165),
    HeardIslandAndMcdonaldIslands(166),
    Iran(167),
    Iraq(168),
    IsleOfMan(169),
    IvoryCoast(170),
    Jamaica(171),
    Kiribati(172),
    Kyrgyzstan(173),
    Laos(174),
    Lebanon(175),
    Lesotho(176),
    Liberia(177),
    Libya(178),
    Liechtenstein(179),
    Macau(180),
    Madagascar(181),
    Malawi(182),
    Mali(183),
    MarshallIslands(184),
    Martinique(185),
    Mauritania(186),
    Mayotte(187),
    Moldova(188),
    Monaco(189),
    Mongolia(190),
    Montserrat(191),
    Mozambique(192),
    Myanmar(193),
    Namibia(194),
    Nauru(195),
    Nepal(196),
    NewCaledonia(197),
    Niger(198),
    Niue(199),
    NorfolkIsland(200),
    NorthernCyprus(201),
    NorthernMarianaIslands(202),
    NorthKorea(203),
    NorthMacedonia(204),
    Palau(205),
    Palestine(206),
    PapuaNewGuinea(207),
    Pitcairn(208),
    Reunion(209),
    Rwanda(210),
    SaintBarthelemy(211),
    SaintHelenaAscensionAndTristianDaCunha(212),
    SaintKittsAndNevis(213),
    SaintLucia(214),
    SaintMartin(215),
    SaintPierreAndMiquelon(216),
    SaintVincentAndTheGrenadines(217),
    Samoa(218),
    SanMarino(219),
    SaoTomeAndPrincipe(220),
    Senegal(221),
    Seychelles(222),
    SierraLeone(223),
    SintMaarten(224),
    SolomonIslands(225),
    Somalia(226),
    SouthGeorgiaAndTheSouthSandwichIslands(227),
    SouthSudan(228),
    Sudan(229),
    Suriname(230),
    SvalbardAndJanMayen(231),
    Eswatini(232),
    Syria(233),
    Tajikistan(234),
    Tanzania(235),
    Togo(236),
    Tokelau(237),
    Tonga(238),
    TrinidadAndTobago(239),
    Turkmenistan(240),
    TurksAndCaicosIslands(241),
    Tuvalu(242),
    UnitedStatesMinorOutlyingIslands(243),
    Uzbekistan(244),
    Vanuatu(245),
    VaticanCity(246),
    VirginIslandsBritish(247),
    VirginIslandsUs(248),
    WallisAndFutuna(249),
    WesternSahara(250),
    Yemen(251),
    Yugoslavia(252),
    Zambia(253),
    Zimbabwe(254);

    private int index;
    private Country(final int index) {
      this.index = index;
    }
  }

  public enum Region {
    None(0),
    Alabama(1),
    Alaska(2),
    Alberta(3),
    Arizona(4),
    Arkansas(5),
    AustralianCapitalTerritory(6),
    BritishColumbia(7),
    California(8),
    Colorado(9),
    Connecticut(10),
    Delaware(11),
    DistrictOfColumbia(12),
    Florida(13),
    Georgia(14),
    Hawaii(15),
    Idaho(16),
    Illinois(17),
    Indiana(18),
    Iowa(19),
    Kansas(20),
    Kentucky(21),
    Louisiana(22),
    Maine(23),
    Manitoba(24),
    Maryland(25),
    Massachusetts(26),
    Michigan(27),
    Minnesota(28),
    Mississippi(29),
    Missouri(30),
    Montana(31),
    Nebraska(32),
    Nevada(33),
    NewBrunswick(34),
    NewHampshire(35),
    NewJersey(36),
    NewMexico(37),
    NewSouthWales(38),
    NewYork(39),
    NorthernTerritory(40),
    NorthCarolina(41),
    NorthDakota(42),
    NovaScotia(43),
    Ohio(44),
    Oklahoma(45),
    Ontario(46),
    Oregon(47),
    Pennsylvania(48),
    Quebec(49),
    Queensland(50),
    RhodeIsland(51),
    Saskatchewan(52),
    SouthAustralia(53),
    SouthCarolina(54),
    SouthDakota(55),
    Tasmania(56),
    Tennessee(57),
    Texas(58),
    Utah(59),
    Vermont(60),
    Victoria(61),
    Virginia(62),
    Washington(63),
    WesternAustralia(64),
    WestVirginia(65),
    Wisconsin(66),
    Wyoming(67),
    Yukon(68),
    CiudadDeMexico(69),
    Jalisco(70),
    NewfoundlandAndLabrador(71),
    NuevoLeon(72),
    BajaCalifornia(73),
    Chihuahua(74),
    Guanajuato(75),
    Guerrero(76),
    Mexico(77),
    Michoacan(78),
    NewYorkCity(79),
    Tamaulipas(80),
    Veracruz(81),
    Chiapas(82),
    Coahuila(83),
    Durango(84),
    GuerreroCocula(85),
    GuerreroJuchitan(86),
    GuerreroTepecoacuilco(87),
    GuerreroTlacoapa(88),
    Gujarat(89),
    Hidalgo(90),
    Karnataka(91),
    Kerala(92),
    KhyberPakhtunkhwa(93),
    MadhyaPradesh(94),
    Maharashtra(95),
    Morelos(96),
    Nayarit(97),
    Oaxaca(98),
    Puebla(99),
    Punjab(100),
    Queretaro(101),
    SanLuisPotosi(102),
    Sinaloa(103),
    Sonora(104),
    Tabasco(105),
    TamilNadu(106),
    Yucatan(107),
    Zacatecas(108),
    Aguascalientes(109),
    BajaCaliforniaSur(110),
    Campeche(111),
    Colima(112),
    QuintanaRooBenitoJuarez(113);

    private int index;
    private Region(final int index) {
      this.index = index;
    }
  }

  public enum Type {
    None(0),
    ConsularId(1),
    Dl(2),
    DlPublicServicesCard(3),
    EmploymentPass(4),
    FinCard(5),
    Id(6),
    MultipurposeId(7),
    MyKad(8),
    MyKid(9),
    MyPR(10),
    MyTentera(11),
    PanCard(12),
    ProfessionalId(13),
    PublicServicesCard(14),
    ResidencePermit(15),
    ResidentId(16),
    TemporaryResidencePermit(17),
    VoterId(18),
    WorkPermit(19),
    iKad(20),
    MilitaryId(21),
    MyKas(22),
    SocialSecurityCard(23),
    HealthInsuranceCard(24),
    Passport(25),
    SPass(26),
    AddressCard(27),
    AlienId(28),
    AlienPassport(29),
    GreenCard(30),
    MinorsId(31),
    PostalId(32),
    ProfessionalDl(33),
    TaxId(34),
    WeaponPermit(35),
    Visa(36),
    BorderCrossingCard(37),
    DriverCard(38),
    GlobalEntryCard(39),
    Mypolis(40),
    NexusCard(41),
    PassportCard(42),
    ProofOfAgeCard(43),
    RefugeeId(44),
    TribalId(45),
    VeteranId(46),
    CitizenshipCertificate(47);

    private int index;
    private Type(final int index) {
      this.index = index;
    }
  }

  public enum ConditionName {
    Starts_With(0),
    Is_Digit(1),
    Min_Length(2),
    Required(3),
    Equal_To(4),
    Not_Equal_To(5);

    private int index;
    private ConditionName(final int index) {
      this.index = index;
    }
  }

  public enum FilterName {
    Equal_To(0),
    Not_Equal_To(1),
    Is_In(2),
    Not_In(3);

    private int index;
    private FilterName(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VerificationResult {
    private @NonNull VerificationType verificationType;
    public @NonNull VerificationType getVerificationType() { return verificationType; }
    public void setVerificationType(@NonNull VerificationType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationType\" is null.");
      }
      this.verificationType = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private VerificationResult() {}
    public static final class Builder {
      private @Nullable VerificationType verificationType;
      public @NonNull Builder setVerificationType(@NonNull VerificationType setterArg) {
        this.verificationType = setterArg;
        return this;
      }
      public @NonNull VerificationResult build() {
        VerificationResult pigeonReturn = new VerificationResult();
        pigeonReturn.setVerificationType(verificationType);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("verificationType", verificationType == null ? null : verificationType.index);
      return toMapResult;
    }
    static @NonNull VerificationResult fromMap(@NonNull Map<String, Object> map) {
      VerificationResult pigeonResult = new VerificationResult();
      Object verificationType = map.get("verificationType");
      pigeonResult.setVerificationType(verificationType == null ? null : VerificationType.values()[(int)verificationType]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class FieldValidator {
    private @NonNull ConditionName conditionName;
    public @NonNull ConditionName getConditionName() { return conditionName; }
    public void setConditionName(@NonNull ConditionName setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"conditionName\" is null.");
      }
      this.conditionName = setterArg;
    }

    private @Nullable String stringValue;
    public @Nullable String getStringValue() { return stringValue; }
    public void setStringValue(@Nullable String setterArg) {
      this.stringValue = setterArg;
    }

    private @Nullable Long intValue;
    public @Nullable Long getIntValue() { return intValue; }
    public void setIntValue(@Nullable Long setterArg) {
      this.intValue = setterArg;
    }

    private @Nullable Boolean ignoreCase;
    public @Nullable Boolean getIgnoreCase() { return ignoreCase; }
    public void setIgnoreCase(@Nullable Boolean setterArg) {
      this.ignoreCase = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private FieldValidator() {}
    public static final class Builder {
      private @Nullable ConditionName conditionName;
      public @NonNull Builder setConditionName(@NonNull ConditionName setterArg) {
        this.conditionName = setterArg;
        return this;
      }
      private @Nullable String stringValue;
      public @NonNull Builder setStringValue(@Nullable String setterArg) {
        this.stringValue = setterArg;
        return this;
      }
      private @Nullable Long intValue;
      public @NonNull Builder setIntValue(@Nullable Long setterArg) {
        this.intValue = setterArg;
        return this;
      }
      private @Nullable Boolean ignoreCase;
      public @NonNull Builder setIgnoreCase(@Nullable Boolean setterArg) {
        this.ignoreCase = setterArg;
        return this;
      }
      public @NonNull FieldValidator build() {
        FieldValidator pigeonReturn = new FieldValidator();
        pigeonReturn.setConditionName(conditionName);
        pigeonReturn.setStringValue(stringValue);
        pigeonReturn.setIntValue(intValue);
        pigeonReturn.setIgnoreCase(ignoreCase);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("conditionName", conditionName == null ? null : conditionName.index);
      toMapResult.put("stringValue", stringValue);
      toMapResult.put("intValue", intValue);
      toMapResult.put("ignoreCase", ignoreCase);
      return toMapResult;
    }
    static @NonNull FieldValidator fromMap(@NonNull Map<String, Object> map) {
      FieldValidator pigeonResult = new FieldValidator();
      Object conditionName = map.get("conditionName");
      pigeonResult.setConditionName(conditionName == null ? null : ConditionName.values()[(int)conditionName]);
      Object stringValue = map.get("stringValue");
      pigeonResult.setStringValue((String)stringValue);
      Object intValue = map.get("intValue");
      pigeonResult.setIntValue((intValue == null) ? null : ((intValue instanceof Integer) ? (Integer)intValue : (Long)intValue));
      Object ignoreCase = map.get("ignoreCase");
      pigeonResult.setIgnoreCase((Boolean)ignoreCase);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DocumentFilter {
    private @Nullable List<Long> countries;
    public @Nullable List<Long> getCountries() { return countries; }
    public void setCountries(@Nullable List<Long> setterArg) {
      this.countries = setterArg;
    }

    private @Nullable List<Long> regions;
    public @Nullable List<Long> getRegions() { return regions; }
    public void setRegions(@Nullable List<Long> setterArg) {
      this.regions = setterArg;
    }

    private @Nullable List<Long> types;
    public @Nullable List<Long> getTypes() { return types; }
    public void setTypes(@Nullable List<Long> setterArg) {
      this.types = setterArg;
    }

    private @NonNull Boolean allowScanning;
    public @NonNull Boolean getAllowScanning() { return allowScanning; }
    public void setAllowScanning(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"allowScanning\" is null.");
      }
      this.allowScanning = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DocumentFilter() {}
    public static final class Builder {
      private @Nullable List<Long> countries;
      public @NonNull Builder setCountries(@Nullable List<Long> setterArg) {
        this.countries = setterArg;
        return this;
      }
      private @Nullable List<Long> regions;
      public @NonNull Builder setRegions(@Nullable List<Long> setterArg) {
        this.regions = setterArg;
        return this;
      }
      private @Nullable List<Long> types;
      public @NonNull Builder setTypes(@Nullable List<Long> setterArg) {
        this.types = setterArg;
        return this;
      }
      private @Nullable Boolean allowScanning;
      public @NonNull Builder setAllowScanning(@NonNull Boolean setterArg) {
        this.allowScanning = setterArg;
        return this;
      }
      public @NonNull DocumentFilter build() {
        DocumentFilter pigeonReturn = new DocumentFilter();
        pigeonReturn.setCountries(countries);
        pigeonReturn.setRegions(regions);
        pigeonReturn.setTypes(types);
        pigeonReturn.setAllowScanning(allowScanning);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("countries", countries);
      toMapResult.put("regions", regions);
      toMapResult.put("types", types);
      toMapResult.put("allowScanning", allowScanning);
      return toMapResult;
    }
    static @NonNull DocumentFilter fromMap(@NonNull Map<String, Object> map) {
      DocumentFilter pigeonResult = new DocumentFilter();
      Object countries = map.get("countries");
      pigeonResult.setCountries((List<Long>)countries);
      Object regions = map.get("regions");
      pigeonResult.setRegions((List<Long>)regions);
      Object types = map.get("types");
      pigeonResult.setTypes((List<Long>)types);
      Object allowScanning = map.get("allowScanning");
      pigeonResult.setAllowScanning((Boolean)allowScanning);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ModificationConfig {
    private @NonNull Boolean editable;
    public @NonNull Boolean getEditable() { return editable; }
    public void setEditable(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"editable\" is null.");
      }
      this.editable = setterArg;
    }

    private @NonNull Boolean insertable;
    public @NonNull Boolean getInsertable() { return insertable; }
    public void setInsertable(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"insertable\" is null.");
      }
      this.insertable = setterArg;
    }

    private @Nullable List<FieldValidator> validators;
    public @Nullable List<FieldValidator> getValidators() { return validators; }
    public void setValidators(@Nullable List<FieldValidator> setterArg) {
      this.validators = setterArg;
    }

    private @Nullable KeyboardType keyboardType;
    public @Nullable KeyboardType getKeyboardType() { return keyboardType; }
    public void setKeyboardType(@Nullable KeyboardType setterArg) {
      this.keyboardType = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ModificationConfig() {}
    public static final class Builder {
      private @Nullable Boolean editable;
      public @NonNull Builder setEditable(@NonNull Boolean setterArg) {
        this.editable = setterArg;
        return this;
      }
      private @Nullable Boolean insertable;
      public @NonNull Builder setInsertable(@NonNull Boolean setterArg) {
        this.insertable = setterArg;
        return this;
      }
      private @Nullable List<FieldValidator> validators;
      public @NonNull Builder setValidators(@Nullable List<FieldValidator> setterArg) {
        this.validators = setterArg;
        return this;
      }
      private @Nullable KeyboardType keyboardType;
      public @NonNull Builder setKeyboardType(@Nullable KeyboardType setterArg) {
        this.keyboardType = setterArg;
        return this;
      }
      public @NonNull ModificationConfig build() {
        ModificationConfig pigeonReturn = new ModificationConfig();
        pigeonReturn.setEditable(editable);
        pigeonReturn.setInsertable(insertable);
        pigeonReturn.setValidators(validators);
        pigeonReturn.setKeyboardType(keyboardType);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("editable", editable);
      toMapResult.put("insertable", insertable);
      toMapResult.put("validators", validators);
      toMapResult.put("keyboardType", keyboardType == null ? null : keyboardType.index);
      return toMapResult;
    }
    static @NonNull ModificationConfig fromMap(@NonNull Map<String, Object> map) {
      ModificationConfig pigeonResult = new ModificationConfig();
      Object editable = map.get("editable");
      pigeonResult.setEditable((Boolean)editable);
      Object insertable = map.get("insertable");
      pigeonResult.setInsertable((Boolean)insertable);
      Object validators = map.get("validators");
      pigeonResult.setValidators((List<FieldValidator>)validators);
      Object keyboardType = map.get("keyboardType");
      pigeonResult.setKeyboardType(keyboardType == null ? null : KeyboardType.values()[(int)keyboardType]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DocumentField {
    private @NonNull FieldType type;
    public @NonNull FieldType getType() { return type; }
    public void setType(@NonNull FieldType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @Nullable ModificationConfig modificationConfig;
    public @Nullable ModificationConfig getModificationConfig() { return modificationConfig; }
    public void setModificationConfig(@Nullable ModificationConfig setterArg) {
      this.modificationConfig = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DocumentField() {}
    public static final class Builder {
      private @Nullable FieldType type;
      public @NonNull Builder setType(@NonNull FieldType setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable ModificationConfig modificationConfig;
      public @NonNull Builder setModificationConfig(@Nullable ModificationConfig setterArg) {
        this.modificationConfig = setterArg;
        return this;
      }
      public @NonNull DocumentField build() {
        DocumentField pigeonReturn = new DocumentField();
        pigeonReturn.setType(type);
        pigeonReturn.setModificationConfig(modificationConfig);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("modificationConfig", (modificationConfig == null) ? null : modificationConfig.toMap());
      return toMapResult;
    }
    static @NonNull DocumentField fromMap(@NonNull Map<String, Object> map) {
      DocumentField pigeonResult = new DocumentField();
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : FieldType.values()[(int)type]);
      Object modificationConfig = map.get("modificationConfig");
      pigeonResult.setModificationConfig((modificationConfig == null) ? null : ModificationConfig.fromMap((Map)modificationConfig));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VerificationServiceSettings {
    private @NonNull String url;
    public @NonNull String getUrl() { return url; }
    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    private @Nullable RequestTimeout requestTimeout;
    public @Nullable RequestTimeout getRequestTimeout() { return requestTimeout; }
    public void setRequestTimeout(@Nullable RequestTimeout setterArg) {
      this.requestTimeout = setterArg;
    }

    private @Nullable Map<String, String> headers;
    public @Nullable Map<String, String> getHeaders() { return headers; }
    public void setHeaders(@Nullable Map<String, String> setterArg) {
      this.headers = setterArg;
    }

    private @Nullable List<String> publicKeyPins;
    public @Nullable List<String> getPublicKeyPins() { return publicKeyPins; }
    public void setPublicKeyPins(@Nullable List<String> setterArg) {
      this.publicKeyPins = setterArg;
    }

    private @Nullable Boolean isUsingSelfSignedCertificate;
    public @Nullable Boolean getIsUsingSelfSignedCertificate() { return isUsingSelfSignedCertificate; }
    public void setIsUsingSelfSignedCertificate(@Nullable Boolean setterArg) {
      this.isUsingSelfSignedCertificate = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private VerificationServiceSettings() {}
    public static final class Builder {
      private @Nullable String url;
      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }
      private @Nullable RequestTimeout requestTimeout;
      public @NonNull Builder setRequestTimeout(@Nullable RequestTimeout setterArg) {
        this.requestTimeout = setterArg;
        return this;
      }
      private @Nullable Map<String, String> headers;
      public @NonNull Builder setHeaders(@Nullable Map<String, String> setterArg) {
        this.headers = setterArg;
        return this;
      }
      private @Nullable List<String> publicKeyPins;
      public @NonNull Builder setPublicKeyPins(@Nullable List<String> setterArg) {
        this.publicKeyPins = setterArg;
        return this;
      }
      private @Nullable Boolean isUsingSelfSignedCertificate;
      public @NonNull Builder setIsUsingSelfSignedCertificate(@Nullable Boolean setterArg) {
        this.isUsingSelfSignedCertificate = setterArg;
        return this;
      }
      public @NonNull VerificationServiceSettings build() {
        VerificationServiceSettings pigeonReturn = new VerificationServiceSettings();
        pigeonReturn.setUrl(url);
        pigeonReturn.setRequestTimeout(requestTimeout);
        pigeonReturn.setHeaders(headers);
        pigeonReturn.setPublicKeyPins(publicKeyPins);
        pigeonReturn.setIsUsingSelfSignedCertificate(isUsingSelfSignedCertificate);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("url", url);
      toMapResult.put("requestTimeout", (requestTimeout == null) ? null : requestTimeout.toMap());
      toMapResult.put("headers", headers);
      toMapResult.put("publicKeyPins", publicKeyPins);
      toMapResult.put("isUsingSelfSignedCertificate", isUsingSelfSignedCertificate);
      return toMapResult;
    }
    static @NonNull VerificationServiceSettings fromMap(@NonNull Map<String, Object> map) {
      VerificationServiceSettings pigeonResult = new VerificationServiceSettings();
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      Object requestTimeout = map.get("requestTimeout");
      pigeonResult.setRequestTimeout((requestTimeout == null) ? null : RequestTimeout.fromMap((Map)requestTimeout));
      Object headers = map.get("headers");
      pigeonResult.setHeaders((Map<String, String>)headers);
      Object publicKeyPins = map.get("publicKeyPins");
      pigeonResult.setPublicKeyPins((List<String>)publicKeyPins);
      Object isUsingSelfSignedCertificate = map.get("isUsingSelfSignedCertificate");
      pigeonResult.setIsUsingSelfSignedCertificate((Boolean)isUsingSelfSignedCertificate);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LivenessStep {
    private @Nullable Boolean initializeInProduction;
    public @Nullable Boolean getInitializeInProduction() { return initializeInProduction; }
    public void setInitializeInProduction(@Nullable Boolean setterArg) {
      this.initializeInProduction = setterArg;
    }

    private @NonNull Liveness liveness;
    public @NonNull Liveness getLiveness() { return liveness; }
    public void setLiveness(@NonNull Liveness setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"liveness\" is null.");
      }
      this.liveness = setterArg;
    }

    private @Nullable LivenessStepOptions options;
    public @Nullable LivenessStepOptions getOptions() { return options; }
    public void setOptions(@Nullable LivenessStepOptions setterArg) {
      this.options = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private LivenessStep() {}
    public static final class Builder {
      private @Nullable Boolean initializeInProduction;
      public @NonNull Builder setInitializeInProduction(@Nullable Boolean setterArg) {
        this.initializeInProduction = setterArg;
        return this;
      }
      private @Nullable Liveness liveness;
      public @NonNull Builder setLiveness(@NonNull Liveness setterArg) {
        this.liveness = setterArg;
        return this;
      }
      private @Nullable LivenessStepOptions options;
      public @NonNull Builder setOptions(@Nullable LivenessStepOptions setterArg) {
        this.options = setterArg;
        return this;
      }
      public @NonNull LivenessStep build() {
        LivenessStep pigeonReturn = new LivenessStep();
        pigeonReturn.setInitializeInProduction(initializeInProduction);
        pigeonReturn.setLiveness(liveness);
        pigeonReturn.setOptions(options);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("initializeInProduction", initializeInProduction);
      toMapResult.put("liveness", liveness == null ? null : liveness.index);
      toMapResult.put("options", (options == null) ? null : options.toMap());
      return toMapResult;
    }
    static @NonNull LivenessStep fromMap(@NonNull Map<String, Object> map) {
      LivenessStep pigeonResult = new LivenessStep();
      Object initializeInProduction = map.get("initializeInProduction");
      pigeonResult.setInitializeInProduction((Boolean)initializeInProduction);
      Object liveness = map.get("liveness");
      pigeonResult.setLiveness(liveness == null ? null : Liveness.values()[(int)liveness]);
      Object options = map.get("options");
      pigeonResult.setOptions((options == null) ? null : LivenessStepOptions.fromMap((Map)options));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LivenessStepOptions {
    private @Nullable LivenessUIFilter filter;
    public @Nullable LivenessUIFilter getFilter() { return filter; }
    public void setFilter(@Nullable LivenessUIFilter setterArg) {
      this.filter = setterArg;
    }

    public static final class Builder {
      private @Nullable LivenessUIFilter filter;
      public @NonNull Builder setFilter(@Nullable LivenessUIFilter setterArg) {
        this.filter = setterArg;
        return this;
      }
      public @NonNull LivenessStepOptions build() {
        LivenessStepOptions pigeonReturn = new LivenessStepOptions();
        pigeonReturn.setFilter(filter);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("filter", filter == null ? null : filter.index);
      return toMapResult;
    }
    static @NonNull LivenessStepOptions fromMap(@NonNull Map<String, Object> map) {
      LivenessStepOptions pigeonResult = new LivenessStepOptions();
      Object filter = map.get("filter");
      pigeonResult.setFilter(filter == null ? null : LivenessUIFilter.values()[(int)filter]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RequestTimeout {
    private @NonNull Long connectionTimeout;
    public @NonNull Long getConnectionTimeout() { return connectionTimeout; }
    public void setConnectionTimeout(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"connectionTimeout\" is null.");
      }
      this.connectionTimeout = setterArg;
    }

    private @NonNull Long writeTimeout;
    public @NonNull Long getWriteTimeout() { return writeTimeout; }
    public void setWriteTimeout(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"writeTimeout\" is null.");
      }
      this.writeTimeout = setterArg;
    }

    private @NonNull Long readTimeout;
    public @NonNull Long getReadTimeout() { return readTimeout; }
    public void setReadTimeout(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"readTimeout\" is null.");
      }
      this.readTimeout = setterArg;
    }

    private @NonNull Double timeoutIntervalForRequest;
    public @NonNull Double getTimeoutIntervalForRequest() { return timeoutIntervalForRequest; }
    public void setTimeoutIntervalForRequest(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"timeoutIntervalForRequest\" is null.");
      }
      this.timeoutIntervalForRequest = setterArg;
    }

    private @NonNull Double timeoutIntervalForResource;
    public @NonNull Double getTimeoutIntervalForResource() { return timeoutIntervalForResource; }
    public void setTimeoutIntervalForResource(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"timeoutIntervalForResource\" is null.");
      }
      this.timeoutIntervalForResource = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private RequestTimeout() {}
    public static final class Builder {
      private @Nullable Long connectionTimeout;
      public @NonNull Builder setConnectionTimeout(@NonNull Long setterArg) {
        this.connectionTimeout = setterArg;
        return this;
      }
      private @Nullable Long writeTimeout;
      public @NonNull Builder setWriteTimeout(@NonNull Long setterArg) {
        this.writeTimeout = setterArg;
        return this;
      }
      private @Nullable Long readTimeout;
      public @NonNull Builder setReadTimeout(@NonNull Long setterArg) {
        this.readTimeout = setterArg;
        return this;
      }
      private @Nullable Double timeoutIntervalForRequest;
      public @NonNull Builder setTimeoutIntervalForRequest(@NonNull Double setterArg) {
        this.timeoutIntervalForRequest = setterArg;
        return this;
      }
      private @Nullable Double timeoutIntervalForResource;
      public @NonNull Builder setTimeoutIntervalForResource(@NonNull Double setterArg) {
        this.timeoutIntervalForResource = setterArg;
        return this;
      }
      public @NonNull RequestTimeout build() {
        RequestTimeout pigeonReturn = new RequestTimeout();
        pigeonReturn.setConnectionTimeout(connectionTimeout);
        pigeonReturn.setWriteTimeout(writeTimeout);
        pigeonReturn.setReadTimeout(readTimeout);
        pigeonReturn.setTimeoutIntervalForRequest(timeoutIntervalForRequest);
        pigeonReturn.setTimeoutIntervalForResource(timeoutIntervalForResource);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("connectionTimeout", connectionTimeout);
      toMapResult.put("writeTimeout", writeTimeout);
      toMapResult.put("readTimeout", readTimeout);
      toMapResult.put("timeoutIntervalForRequest", timeoutIntervalForRequest);
      toMapResult.put("timeoutIntervalForResource", timeoutIntervalForResource);
      return toMapResult;
    }
    static @NonNull RequestTimeout fromMap(@NonNull Map<String, Object> map) {
      RequestTimeout pigeonResult = new RequestTimeout();
      Object connectionTimeout = map.get("connectionTimeout");
      pigeonResult.setConnectionTimeout((connectionTimeout == null) ? null : ((connectionTimeout instanceof Integer) ? (Integer)connectionTimeout : (Long)connectionTimeout));
      Object writeTimeout = map.get("writeTimeout");
      pigeonResult.setWriteTimeout((writeTimeout == null) ? null : ((writeTimeout instanceof Integer) ? (Integer)writeTimeout : (Long)writeTimeout));
      Object readTimeout = map.get("readTimeout");
      pigeonResult.setReadTimeout((readTimeout == null) ? null : ((readTimeout instanceof Integer) ? (Integer)readTimeout : (Long)readTimeout));
      Object timeoutIntervalForRequest = map.get("timeoutIntervalForRequest");
      pigeonResult.setTimeoutIntervalForRequest((Double)timeoutIntervalForRequest);
      Object timeoutIntervalForResource = map.get("timeoutIntervalForResource");
      pigeonResult.setTimeoutIntervalForResource((Double)timeoutIntervalForResource);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DocumentScanStep {
    private @NonNull ScanStep scanStep;
    public @NonNull ScanStep getScanStep() { return scanStep; }
    public void setScanStep(@NonNull ScanStep setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"scanStep\" is null.");
      }
      this.scanStep = setterArg;
    }

    private @Nullable String androidLicenseFileName;
    public @Nullable String getAndroidLicenseFileName() { return androidLicenseFileName; }
    public void setAndroidLicenseFileName(@Nullable String setterArg) {
      this.androidLicenseFileName = setterArg;
    }

    private @Nullable String iOSLicense;
    public @Nullable String getIOSLicense() { return iOSLicense; }
    public void setIOSLicense(@Nullable String setterArg) {
      this.iOSLicense = setterArg;
    }

    private @Nullable Boolean showDocumentImages;
    public @Nullable Boolean getShowDocumentImages() { return showDocumentImages; }
    public void setShowDocumentImages(@Nullable Boolean setterArg) {
      this.showDocumentImages = setterArg;
    }

    private @Nullable List<DocumentField> documentFields;
    public @Nullable List<DocumentField> getDocumentFields() { return documentFields; }
    public void setDocumentFields(@Nullable List<DocumentField> setterArg) {
      this.documentFields = setterArg;
    }

    private @Nullable List<DocumentField> hiddenDocumentFields;
    public @Nullable List<DocumentField> getHiddenDocumentFields() { return hiddenDocumentFields; }
    public void setHiddenDocumentFields(@Nullable List<DocumentField> setterArg) {
      this.hiddenDocumentFields = setterArg;
    }

    private @Nullable Boolean attachDocumentListener;
    public @Nullable Boolean getAttachDocumentListener() { return attachDocumentListener; }
    public void setAttachDocumentListener(@Nullable Boolean setterArg) {
      this.attachDocumentListener = setterArg;
    }

    private @Nullable DocumentFilter documentFilter;
    public @Nullable DocumentFilter getDocumentFilter() { return documentFilter; }
    public void setDocumentFilter(@Nullable DocumentFilter setterArg) {
      this.documentFilter = setterArg;
    }

    private @Nullable Boolean skipUnsupportedBack;
    public @Nullable Boolean getSkipUnsupportedBack() { return skipUnsupportedBack; }
    public void setSkipUnsupportedBack(@Nullable Boolean setterArg) {
      this.skipUnsupportedBack = setterArg;
    }

    private @Nullable Boolean showResultHeader;
    public @Nullable Boolean getShowResultHeader() { return showResultHeader; }
    public void setShowResultHeader(@Nullable Boolean setterArg) {
      this.showResultHeader = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private DocumentScanStep() {}
    public static final class Builder {
      private @Nullable ScanStep scanStep;
      public @NonNull Builder setScanStep(@NonNull ScanStep setterArg) {
        this.scanStep = setterArg;
        return this;
      }
      private @Nullable String androidLicenseFileName;
      public @NonNull Builder setAndroidLicenseFileName(@Nullable String setterArg) {
        this.androidLicenseFileName = setterArg;
        return this;
      }
      private @Nullable String iOSLicense;
      public @NonNull Builder setIOSLicense(@Nullable String setterArg) {
        this.iOSLicense = setterArg;
        return this;
      }
      private @Nullable Boolean showDocumentImages;
      public @NonNull Builder setShowDocumentImages(@Nullable Boolean setterArg) {
        this.showDocumentImages = setterArg;
        return this;
      }
      private @Nullable List<DocumentField> documentFields;
      public @NonNull Builder setDocumentFields(@Nullable List<DocumentField> setterArg) {
        this.documentFields = setterArg;
        return this;
      }
      private @Nullable List<DocumentField> hiddenDocumentFields;
      public @NonNull Builder setHiddenDocumentFields(@Nullable List<DocumentField> setterArg) {
        this.hiddenDocumentFields = setterArg;
        return this;
      }
      private @Nullable Boolean attachDocumentListener;
      public @NonNull Builder setAttachDocumentListener(@Nullable Boolean setterArg) {
        this.attachDocumentListener = setterArg;
        return this;
      }
      private @Nullable DocumentFilter documentFilter;
      public @NonNull Builder setDocumentFilter(@Nullable DocumentFilter setterArg) {
        this.documentFilter = setterArg;
        return this;
      }
      private @Nullable Boolean skipUnsupportedBack;
      public @NonNull Builder setSkipUnsupportedBack(@Nullable Boolean setterArg) {
        this.skipUnsupportedBack = setterArg;
        return this;
      }
      private @Nullable Boolean showResultHeader;
      public @NonNull Builder setShowResultHeader(@Nullable Boolean setterArg) {
        this.showResultHeader = setterArg;
        return this;
      }
      public @NonNull DocumentScanStep build() {
        DocumentScanStep pigeonReturn = new DocumentScanStep();
        pigeonReturn.setScanStep(scanStep);
        pigeonReturn.setAndroidLicenseFileName(androidLicenseFileName);
        pigeonReturn.setIOSLicense(iOSLicense);
        pigeonReturn.setShowDocumentImages(showDocumentImages);
        pigeonReturn.setDocumentFields(documentFields);
        pigeonReturn.setHiddenDocumentFields(hiddenDocumentFields);
        pigeonReturn.setAttachDocumentListener(attachDocumentListener);
        pigeonReturn.setDocumentFilter(documentFilter);
        pigeonReturn.setSkipUnsupportedBack(skipUnsupportedBack);
        pigeonReturn.setShowResultHeader(showResultHeader);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("scanStep", scanStep == null ? null : scanStep.index);
      toMapResult.put("androidLicenseFileName", androidLicenseFileName);
      toMapResult.put("iOSLicense", iOSLicense);
      toMapResult.put("showDocumentImages", showDocumentImages);
      toMapResult.put("documentFields", documentFields);
      toMapResult.put("hiddenDocumentFields", hiddenDocumentFields);
      toMapResult.put("attachDocumentListener", attachDocumentListener);
      toMapResult.put("documentFilter", (documentFilter == null) ? null : documentFilter.toMap());
      toMapResult.put("skipUnsupportedBack", skipUnsupportedBack);
      toMapResult.put("showResultHeader", showResultHeader);
      return toMapResult;
    }
    static @NonNull DocumentScanStep fromMap(@NonNull Map<String, Object> map) {
      DocumentScanStep pigeonResult = new DocumentScanStep();
      Object scanStep = map.get("scanStep");
      pigeonResult.setScanStep(scanStep == null ? null : ScanStep.values()[(int)scanStep]);
      Object androidLicenseFileName = map.get("androidLicenseFileName");
      pigeonResult.setAndroidLicenseFileName((String)androidLicenseFileName);
      Object iOSLicense = map.get("iOSLicense");
      pigeonResult.setIOSLicense((String)iOSLicense);
      Object showDocumentImages = map.get("showDocumentImages");
      pigeonResult.setShowDocumentImages((Boolean)showDocumentImages);
      Object documentFields = map.get("documentFields");
      pigeonResult.setDocumentFields((List<DocumentField>)documentFields);
      Object hiddenDocumentFields = map.get("hiddenDocumentFields");
      pigeonResult.setHiddenDocumentFields((List<DocumentField>)hiddenDocumentFields);
      Object attachDocumentListener = map.get("attachDocumentListener");
      pigeonResult.setAttachDocumentListener((Boolean)attachDocumentListener);
      Object documentFilter = map.get("documentFilter");
      pigeonResult.setDocumentFilter((documentFilter == null) ? null : DocumentFilter.fromMap((Map)documentFilter));
      Object skipUnsupportedBack = map.get("skipUnsupportedBack");
      pigeonResult.setSkipUnsupportedBack((Boolean)skipUnsupportedBack);
      Object showResultHeader = map.get("showResultHeader");
      pigeonResult.setShowResultHeader((Boolean)showResultHeader);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvConfiguration {
    private @NonNull DocumentScanStep scanStep;
    public @NonNull DocumentScanStep getScanStep() { return scanStep; }
    public void setScanStep(@NonNull DocumentScanStep setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"scanStep\" is null.");
      }
      this.scanStep = setterArg;
    }

    private @NonNull LivenessStep livenessStep;
    public @NonNull LivenessStep getLivenessStep() { return livenessStep; }
    public void setLivenessStep(@NonNull LivenessStep setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"livenessStep\" is null.");
      }
      this.livenessStep = setterArg;
    }

    private @NonNull VerificationServiceSettings verificationServiceSettings;
    public @NonNull VerificationServiceSettings getVerificationServiceSettings() { return verificationServiceSettings; }
    public void setVerificationServiceSettings(@NonNull VerificationServiceSettings setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationServiceSettings\" is null.");
      }
      this.verificationServiceSettings = setterArg;
    }

    private @Nullable String dateFormat;
    public @Nullable String getDateFormat() { return dateFormat; }
    public void setDateFormat(@Nullable String setterArg) {
      this.dateFormat = setterArg;
    }

    private @Nullable Boolean disableScreenshots;
    public @Nullable Boolean getDisableScreenshots() { return disableScreenshots; }
    public void setDisableScreenshots(@Nullable Boolean setterArg) {
      this.disableScreenshots = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private IdvConfiguration() {}
    public static final class Builder {
      private @Nullable DocumentScanStep scanStep;
      public @NonNull Builder setScanStep(@NonNull DocumentScanStep setterArg) {
        this.scanStep = setterArg;
        return this;
      }
      private @Nullable LivenessStep livenessStep;
      public @NonNull Builder setLivenessStep(@NonNull LivenessStep setterArg) {
        this.livenessStep = setterArg;
        return this;
      }
      private @Nullable VerificationServiceSettings verificationServiceSettings;
      public @NonNull Builder setVerificationServiceSettings(@NonNull VerificationServiceSettings setterArg) {
        this.verificationServiceSettings = setterArg;
        return this;
      }
      private @Nullable String dateFormat;
      public @NonNull Builder setDateFormat(@Nullable String setterArg) {
        this.dateFormat = setterArg;
        return this;
      }
      private @Nullable Boolean disableScreenshots;
      public @NonNull Builder setDisableScreenshots(@Nullable Boolean setterArg) {
        this.disableScreenshots = setterArg;
        return this;
      }
      public @NonNull IdvConfiguration build() {
        IdvConfiguration pigeonReturn = new IdvConfiguration();
        pigeonReturn.setScanStep(scanStep);
        pigeonReturn.setLivenessStep(livenessStep);
        pigeonReturn.setVerificationServiceSettings(verificationServiceSettings);
        pigeonReturn.setDateFormat(dateFormat);
        pigeonReturn.setDisableScreenshots(disableScreenshots);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("scanStep", (scanStep == null) ? null : scanStep.toMap());
      toMapResult.put("livenessStep", (livenessStep == null) ? null : livenessStep.toMap());
      toMapResult.put("verificationServiceSettings", (verificationServiceSettings == null) ? null : verificationServiceSettings.toMap());
      toMapResult.put("dateFormat", dateFormat);
      toMapResult.put("disableScreenshots", disableScreenshots);
      return toMapResult;
    }
    static @NonNull IdvConfiguration fromMap(@NonNull Map<String, Object> map) {
      IdvConfiguration pigeonResult = new IdvConfiguration();
      Object scanStep = map.get("scanStep");
      pigeonResult.setScanStep((scanStep == null) ? null : DocumentScanStep.fromMap((Map)scanStep));
      Object livenessStep = map.get("livenessStep");
      pigeonResult.setLivenessStep((livenessStep == null) ? null : LivenessStep.fromMap((Map)livenessStep));
      Object verificationServiceSettings = map.get("verificationServiceSettings");
      pigeonResult.setVerificationServiceSettings((verificationServiceSettings == null) ? null : VerificationServiceSettings.fromMap((Map)verificationServiceSettings));
      Object dateFormat = map.get("dateFormat");
      pigeonResult.setDateFormat((String)dateFormat);
      Object disableScreenshots = map.get("disableScreenshots");
      pigeonResult.setDisableScreenshots((Boolean)disableScreenshots);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SimpleDate {
    private @NonNull Long year;
    public @NonNull Long getYear() { return year; }
    public void setYear(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"year\" is null.");
      }
      this.year = setterArg;
    }

    private @NonNull Long month;
    public @NonNull Long getMonth() { return month; }
    public void setMonth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"month\" is null.");
      }
      this.month = setterArg;
    }

    private @NonNull Long day;
    public @NonNull Long getDay() { return day; }
    public void setDay(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"day\" is null.");
      }
      this.day = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private SimpleDate() {}
    public static final class Builder {
      private @Nullable Long year;
      public @NonNull Builder setYear(@NonNull Long setterArg) {
        this.year = setterArg;
        return this;
      }
      private @Nullable Long month;
      public @NonNull Builder setMonth(@NonNull Long setterArg) {
        this.month = setterArg;
        return this;
      }
      private @Nullable Long day;
      public @NonNull Builder setDay(@NonNull Long setterArg) {
        this.day = setterArg;
        return this;
      }
      public @NonNull SimpleDate build() {
        SimpleDate pigeonReturn = new SimpleDate();
        pigeonReturn.setYear(year);
        pigeonReturn.setMonth(month);
        pigeonReturn.setDay(day);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("year", year);
      toMapResult.put("month", month);
      toMapResult.put("day", day);
      return toMapResult;
    }
    static @NonNull SimpleDate fromMap(@NonNull Map<String, Object> map) {
      SimpleDate pigeonResult = new SimpleDate();
      Object year = map.get("year");
      pigeonResult.setYear((year == null) ? null : ((year instanceof Integer) ? (Integer)year : (Long)year));
      Object month = map.get("month");
      pigeonResult.setMonth((month == null) ? null : ((month instanceof Integer) ? (Integer)month : (Long)month));
      Object day = map.get("day");
      pigeonResult.setDay((day == null) ? null : ((day instanceof Integer) ? (Integer)day : (Long)day));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ResultField {
    private @NonNull FieldType type;
    public @NonNull FieldType getType() { return type; }
    public void setType(@NonNull FieldType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"type\" is null.");
      }
      this.type = setterArg;
    }

    private @NonNull ResultFieldType resultFieldType;
    public @NonNull ResultFieldType getResultFieldType() { return resultFieldType; }
    public void setResultFieldType(@NonNull ResultFieldType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"resultFieldType\" is null.");
      }
      this.resultFieldType = setterArg;
    }

    private @Nullable String value1;
    public @Nullable String getValue1() { return value1; }
    public void setValue1(@Nullable String setterArg) {
      this.value1 = setterArg;
    }

    private @Nullable String value2;
    public @Nullable String getValue2() { return value2; }
    public void setValue2(@Nullable String setterArg) {
      this.value2 = setterArg;
    }

    private @Nullable Boolean boolValue;
    public @Nullable Boolean getBoolValue() { return boolValue; }
    public void setBoolValue(@Nullable Boolean setterArg) {
      this.boolValue = setterArg;
    }

    private @Nullable SimpleDate simpleDate;
    public @Nullable SimpleDate getSimpleDate() { return simpleDate; }
    public void setSimpleDate(@Nullable SimpleDate setterArg) {
      this.simpleDate = setterArg;
    }

    private @Nullable Boolean insertable;
    public @Nullable Boolean getInsertable() { return insertable; }
    public void setInsertable(@Nullable Boolean setterArg) {
      this.insertable = setterArg;
    }

    private @Nullable Boolean editable;
    public @Nullable Boolean getEditable() { return editable; }
    public void setEditable(@Nullable Boolean setterArg) {
      this.editable = setterArg;
    }

    private @Nullable KeyboardType keyboardType;
    public @Nullable KeyboardType getKeyboardType() { return keyboardType; }
    public void setKeyboardType(@Nullable KeyboardType setterArg) {
      this.keyboardType = setterArg;
    }

    private @Nullable String originalValue;
    public @Nullable String getOriginalValue() { return originalValue; }
    public void setOriginalValue(@Nullable String setterArg) {
      this.originalValue = setterArg;
    }

    private @Nullable String insertedValue;
    public @Nullable String getInsertedValue() { return insertedValue; }
    public void setInsertedValue(@Nullable String setterArg) {
      this.insertedValue = setterArg;
    }

    private @Nullable String editedValue;
    public @Nullable String getEditedValue() { return editedValue; }
    public void setEditedValue(@Nullable String setterArg) {
      this.editedValue = setterArg;
    }

    private @Nullable String key;
    public @Nullable String getKey() { return key; }
    public void setKey(@Nullable String setterArg) {
      this.key = setterArg;
    }

    private @Nullable String value;
    public @Nullable String getValue() { return value; }
    public void setValue(@Nullable String setterArg) {
      this.value = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ResultField() {}
    public static final class Builder {
      private @Nullable FieldType type;
      public @NonNull Builder setType(@NonNull FieldType setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable ResultFieldType resultFieldType;
      public @NonNull Builder setResultFieldType(@NonNull ResultFieldType setterArg) {
        this.resultFieldType = setterArg;
        return this;
      }
      private @Nullable String value1;
      public @NonNull Builder setValue1(@Nullable String setterArg) {
        this.value1 = setterArg;
        return this;
      }
      private @Nullable String value2;
      public @NonNull Builder setValue2(@Nullable String setterArg) {
        this.value2 = setterArg;
        return this;
      }
      private @Nullable Boolean boolValue;
      public @NonNull Builder setBoolValue(@Nullable Boolean setterArg) {
        this.boolValue = setterArg;
        return this;
      }
      private @Nullable SimpleDate simpleDate;
      public @NonNull Builder setSimpleDate(@Nullable SimpleDate setterArg) {
        this.simpleDate = setterArg;
        return this;
      }
      private @Nullable Boolean insertable;
      public @NonNull Builder setInsertable(@Nullable Boolean setterArg) {
        this.insertable = setterArg;
        return this;
      }
      private @Nullable Boolean editable;
      public @NonNull Builder setEditable(@Nullable Boolean setterArg) {
        this.editable = setterArg;
        return this;
      }
      private @Nullable KeyboardType keyboardType;
      public @NonNull Builder setKeyboardType(@Nullable KeyboardType setterArg) {
        this.keyboardType = setterArg;
        return this;
      }
      private @Nullable String originalValue;
      public @NonNull Builder setOriginalValue(@Nullable String setterArg) {
        this.originalValue = setterArg;
        return this;
      }
      private @Nullable String insertedValue;
      public @NonNull Builder setInsertedValue(@Nullable String setterArg) {
        this.insertedValue = setterArg;
        return this;
      }
      private @Nullable String editedValue;
      public @NonNull Builder setEditedValue(@Nullable String setterArg) {
        this.editedValue = setterArg;
        return this;
      }
      private @Nullable String key;
      public @NonNull Builder setKey(@Nullable String setterArg) {
        this.key = setterArg;
        return this;
      }
      private @Nullable String value;
      public @NonNull Builder setValue(@Nullable String setterArg) {
        this.value = setterArg;
        return this;
      }
      public @NonNull ResultField build() {
        ResultField pigeonReturn = new ResultField();
        pigeonReturn.setType(type);
        pigeonReturn.setResultFieldType(resultFieldType);
        pigeonReturn.setValue1(value1);
        pigeonReturn.setValue2(value2);
        pigeonReturn.setBoolValue(boolValue);
        pigeonReturn.setSimpleDate(simpleDate);
        pigeonReturn.setInsertable(insertable);
        pigeonReturn.setEditable(editable);
        pigeonReturn.setKeyboardType(keyboardType);
        pigeonReturn.setOriginalValue(originalValue);
        pigeonReturn.setInsertedValue(insertedValue);
        pigeonReturn.setEditedValue(editedValue);
        pigeonReturn.setKey(key);
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("resultFieldType", resultFieldType == null ? null : resultFieldType.index);
      toMapResult.put("value1", value1);
      toMapResult.put("value2", value2);
      toMapResult.put("boolValue", boolValue);
      toMapResult.put("simpleDate", (simpleDate == null) ? null : simpleDate.toMap());
      toMapResult.put("insertable", insertable);
      toMapResult.put("editable", editable);
      toMapResult.put("keyboardType", keyboardType == null ? null : keyboardType.index);
      toMapResult.put("originalValue", originalValue);
      toMapResult.put("insertedValue", insertedValue);
      toMapResult.put("editedValue", editedValue);
      toMapResult.put("key", key);
      toMapResult.put("value", value);
      return toMapResult;
    }
    static @NonNull ResultField fromMap(@NonNull Map<String, Object> map) {
      ResultField pigeonResult = new ResultField();
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : FieldType.values()[(int)type]);
      Object resultFieldType = map.get("resultFieldType");
      pigeonResult.setResultFieldType(resultFieldType == null ? null : ResultFieldType.values()[(int)resultFieldType]);
      Object value1 = map.get("value1");
      pigeonResult.setValue1((String)value1);
      Object value2 = map.get("value2");
      pigeonResult.setValue2((String)value2);
      Object boolValue = map.get("boolValue");
      pigeonResult.setBoolValue((Boolean)boolValue);
      Object simpleDate = map.get("simpleDate");
      pigeonResult.setSimpleDate((simpleDate == null) ? null : SimpleDate.fromMap((Map)simpleDate));
      Object insertable = map.get("insertable");
      pigeonResult.setInsertable((Boolean)insertable);
      Object editable = map.get("editable");
      pigeonResult.setEditable((Boolean)editable);
      Object keyboardType = map.get("keyboardType");
      pigeonResult.setKeyboardType(keyboardType == null ? null : KeyboardType.values()[(int)keyboardType]);
      Object originalValue = map.get("originalValue");
      pigeonResult.setOriginalValue((String)originalValue);
      Object insertedValue = map.get("insertedValue");
      pigeonResult.setInsertedValue((String)insertedValue);
      Object editedValue = map.get("editedValue");
      pigeonResult.setEditedValue((String)editedValue);
      Object key = map.get("key");
      pigeonResult.setKey((String)key);
      Object value = map.get("value");
      pigeonResult.setValue((String)value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ClassInfo {
    private @Nullable Country country;
    public @Nullable Country getCountry() { return country; }
    public void setCountry(@Nullable Country setterArg) {
      this.country = setterArg;
    }

    private @Nullable Region region;
    public @Nullable Region getRegion() { return region; }
    public void setRegion(@Nullable Region setterArg) {
      this.region = setterArg;
    }

    private @Nullable Type type;
    public @Nullable Type getType() { return type; }
    public void setType(@Nullable Type setterArg) {
      this.type = setterArg;
    }

    private @Nullable Boolean empty;
    public @Nullable Boolean getEmpty() { return empty; }
    public void setEmpty(@Nullable Boolean setterArg) {
      this.empty = setterArg;
    }

    private @Nullable String countryName;
    public @Nullable String getCountryName() { return countryName; }
    public void setCountryName(@Nullable String setterArg) {
      this.countryName = setterArg;
    }

    private @Nullable String isoNumericCountryCode;
    public @Nullable String getIsoNumericCountryCode() { return isoNumericCountryCode; }
    public void setIsoNumericCountryCode(@Nullable String setterArg) {
      this.isoNumericCountryCode = setterArg;
    }

    private @Nullable String isoAlpha2CountryCode;
    public @Nullable String getIsoAlpha2CountryCode() { return isoAlpha2CountryCode; }
    public void setIsoAlpha2CountryCode(@Nullable String setterArg) {
      this.isoAlpha2CountryCode = setterArg;
    }

    private @Nullable String isoAlpha3CountryCode;
    public @Nullable String getIsoAlpha3CountryCode() { return isoAlpha3CountryCode; }
    public void setIsoAlpha3CountryCode(@Nullable String setterArg) {
      this.isoAlpha3CountryCode = setterArg;
    }

    public static final class Builder {
      private @Nullable Country country;
      public @NonNull Builder setCountry(@Nullable Country setterArg) {
        this.country = setterArg;
        return this;
      }
      private @Nullable Region region;
      public @NonNull Builder setRegion(@Nullable Region setterArg) {
        this.region = setterArg;
        return this;
      }
      private @Nullable Type type;
      public @NonNull Builder setType(@Nullable Type setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable Boolean empty;
      public @NonNull Builder setEmpty(@Nullable Boolean setterArg) {
        this.empty = setterArg;
        return this;
      }
      private @Nullable String countryName;
      public @NonNull Builder setCountryName(@Nullable String setterArg) {
        this.countryName = setterArg;
        return this;
      }
      private @Nullable String isoNumericCountryCode;
      public @NonNull Builder setIsoNumericCountryCode(@Nullable String setterArg) {
        this.isoNumericCountryCode = setterArg;
        return this;
      }
      private @Nullable String isoAlpha2CountryCode;
      public @NonNull Builder setIsoAlpha2CountryCode(@Nullable String setterArg) {
        this.isoAlpha2CountryCode = setterArg;
        return this;
      }
      private @Nullable String isoAlpha3CountryCode;
      public @NonNull Builder setIsoAlpha3CountryCode(@Nullable String setterArg) {
        this.isoAlpha3CountryCode = setterArg;
        return this;
      }
      public @NonNull ClassInfo build() {
        ClassInfo pigeonReturn = new ClassInfo();
        pigeonReturn.setCountry(country);
        pigeonReturn.setRegion(region);
        pigeonReturn.setType(type);
        pigeonReturn.setEmpty(empty);
        pigeonReturn.setCountryName(countryName);
        pigeonReturn.setIsoNumericCountryCode(isoNumericCountryCode);
        pigeonReturn.setIsoAlpha2CountryCode(isoAlpha2CountryCode);
        pigeonReturn.setIsoAlpha3CountryCode(isoAlpha3CountryCode);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("country", country == null ? null : country.index);
      toMapResult.put("region", region == null ? null : region.index);
      toMapResult.put("type", type == null ? null : type.index);
      toMapResult.put("empty", empty);
      toMapResult.put("countryName", countryName);
      toMapResult.put("isoNumericCountryCode", isoNumericCountryCode);
      toMapResult.put("isoAlpha2CountryCode", isoAlpha2CountryCode);
      toMapResult.put("isoAlpha3CountryCode", isoAlpha3CountryCode);
      return toMapResult;
    }
    static @NonNull ClassInfo fromMap(@NonNull Map<String, Object> map) {
      ClassInfo pigeonResult = new ClassInfo();
      Object country = map.get("country");
      pigeonResult.setCountry(country == null ? null : Country.values()[(int)country]);
      Object region = map.get("region");
      pigeonResult.setRegion(region == null ? null : Region.values()[(int)region]);
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : Type.values()[(int)type]);
      Object empty = map.get("empty");
      pigeonResult.setEmpty((Boolean)empty);
      Object countryName = map.get("countryName");
      pigeonResult.setCountryName((String)countryName);
      Object isoNumericCountryCode = map.get("isoNumericCountryCode");
      pigeonResult.setIsoNumericCountryCode((String)isoNumericCountryCode);
      Object isoAlpha2CountryCode = map.get("isoAlpha2CountryCode");
      pigeonResult.setIsoAlpha2CountryCode((String)isoAlpha2CountryCode);
      Object isoAlpha3CountryCode = map.get("isoAlpha3CountryCode");
      pigeonResult.setIsoAlpha3CountryCode((String)isoAlpha3CountryCode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ImageAnalysisResult {
    private @Nullable Boolean isBlurred;
    public @Nullable Boolean getIsBlurred() { return isBlurred; }
    public void setIsBlurred(@Nullable Boolean setterArg) {
      this.isBlurred = setterArg;
    }

    private @Nullable DocumentImageColorStatus documentImageColorStatus;
    public @Nullable DocumentImageColorStatus getDocumentImageColorStatus() { return documentImageColorStatus; }
    public void setDocumentImageColorStatus(@Nullable DocumentImageColorStatus setterArg) {
      this.documentImageColorStatus = setterArg;
    }

    private @Nullable ImageAnalysisDetectionStatus documentImageMoireStatus;
    public @Nullable ImageAnalysisDetectionStatus getDocumentImageMoireStatus() { return documentImageMoireStatus; }
    public void setDocumentImageMoireStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
      this.documentImageMoireStatus = setterArg;
    }

    private @Nullable ImageAnalysisDetectionStatus faceDetectionStatus;
    public @Nullable ImageAnalysisDetectionStatus getFaceDetectionStatus() { return faceDetectionStatus; }
    public void setFaceDetectionStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
      this.faceDetectionStatus = setterArg;
    }

    private @Nullable ImageAnalysisDetectionStatus mrzDetectionStatus;
    public @Nullable ImageAnalysisDetectionStatus getMrzDetectionStatus() { return mrzDetectionStatus; }
    public void setMrzDetectionStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
      this.mrzDetectionStatus = setterArg;
    }

    private @Nullable ImageAnalysisDetectionStatus barcodeDetectionStatus;
    public @Nullable ImageAnalysisDetectionStatus getBarcodeDetectionStatus() { return barcodeDetectionStatus; }
    public void setBarcodeDetectionStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
      this.barcodeDetectionStatus = setterArg;
    }

    public static final class Builder {
      private @Nullable Boolean isBlurred;
      public @NonNull Builder setIsBlurred(@Nullable Boolean setterArg) {
        this.isBlurred = setterArg;
        return this;
      }
      private @Nullable DocumentImageColorStatus documentImageColorStatus;
      public @NonNull Builder setDocumentImageColorStatus(@Nullable DocumentImageColorStatus setterArg) {
        this.documentImageColorStatus = setterArg;
        return this;
      }
      private @Nullable ImageAnalysisDetectionStatus documentImageMoireStatus;
      public @NonNull Builder setDocumentImageMoireStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
        this.documentImageMoireStatus = setterArg;
        return this;
      }
      private @Nullable ImageAnalysisDetectionStatus faceDetectionStatus;
      public @NonNull Builder setFaceDetectionStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
        this.faceDetectionStatus = setterArg;
        return this;
      }
      private @Nullable ImageAnalysisDetectionStatus mrzDetectionStatus;
      public @NonNull Builder setMrzDetectionStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
        this.mrzDetectionStatus = setterArg;
        return this;
      }
      private @Nullable ImageAnalysisDetectionStatus barcodeDetectionStatus;
      public @NonNull Builder setBarcodeDetectionStatus(@Nullable ImageAnalysisDetectionStatus setterArg) {
        this.barcodeDetectionStatus = setterArg;
        return this;
      }
      public @NonNull ImageAnalysisResult build() {
        ImageAnalysisResult pigeonReturn = new ImageAnalysisResult();
        pigeonReturn.setIsBlurred(isBlurred);
        pigeonReturn.setDocumentImageColorStatus(documentImageColorStatus);
        pigeonReturn.setDocumentImageMoireStatus(documentImageMoireStatus);
        pigeonReturn.setFaceDetectionStatus(faceDetectionStatus);
        pigeonReturn.setMrzDetectionStatus(mrzDetectionStatus);
        pigeonReturn.setBarcodeDetectionStatus(barcodeDetectionStatus);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isBlurred", isBlurred);
      toMapResult.put("documentImageColorStatus", documentImageColorStatus == null ? null : documentImageColorStatus.index);
      toMapResult.put("documentImageMoireStatus", documentImageMoireStatus == null ? null : documentImageMoireStatus.index);
      toMapResult.put("faceDetectionStatus", faceDetectionStatus == null ? null : faceDetectionStatus.index);
      toMapResult.put("mrzDetectionStatus", mrzDetectionStatus == null ? null : mrzDetectionStatus.index);
      toMapResult.put("barcodeDetectionStatus", barcodeDetectionStatus == null ? null : barcodeDetectionStatus.index);
      return toMapResult;
    }
    static @NonNull ImageAnalysisResult fromMap(@NonNull Map<String, Object> map) {
      ImageAnalysisResult pigeonResult = new ImageAnalysisResult();
      Object isBlurred = map.get("isBlurred");
      pigeonResult.setIsBlurred((Boolean)isBlurred);
      Object documentImageColorStatus = map.get("documentImageColorStatus");
      pigeonResult.setDocumentImageColorStatus(documentImageColorStatus == null ? null : DocumentImageColorStatus.values()[(int)documentImageColorStatus]);
      Object documentImageMoireStatus = map.get("documentImageMoireStatus");
      pigeonResult.setDocumentImageMoireStatus(documentImageMoireStatus == null ? null : ImageAnalysisDetectionStatus.values()[(int)documentImageMoireStatus]);
      Object faceDetectionStatus = map.get("faceDetectionStatus");
      pigeonResult.setFaceDetectionStatus(faceDetectionStatus == null ? null : ImageAnalysisDetectionStatus.values()[(int)faceDetectionStatus]);
      Object mrzDetectionStatus = map.get("mrzDetectionStatus");
      pigeonResult.setMrzDetectionStatus(mrzDetectionStatus == null ? null : ImageAnalysisDetectionStatus.values()[(int)mrzDetectionStatus]);
      Object barcodeDetectionStatus = map.get("barcodeDetectionStatus");
      pigeonResult.setBarcodeDetectionStatus(barcodeDetectionStatus == null ? null : ImageAnalysisDetectionStatus.values()[(int)barcodeDetectionStatus]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class DocumentResult {
    private @Nullable List<ResultField> resultsFields;
    public @Nullable List<ResultField> getResultsFields() { return resultsFields; }
    public void setResultsFields(@Nullable List<ResultField> setterArg) {
      this.resultsFields = setterArg;
    }

    private @Nullable byte[] faceImage;
    public @Nullable byte[] getFaceImage() { return faceImage; }
    public void setFaceImage(@Nullable byte[] setterArg) {
      this.faceImage = setterArg;
    }

    private @Nullable byte[] frontSideDocumentImage;
    public @Nullable byte[] getFrontSideDocumentImage() { return frontSideDocumentImage; }
    public void setFrontSideDocumentImage(@Nullable byte[] setterArg) {
      this.frontSideDocumentImage = setterArg;
    }

    private @Nullable byte[] backSideDocumentImage;
    public @Nullable byte[] getBackSideDocumentImage() { return backSideDocumentImage; }
    public void setBackSideDocumentImage(@Nullable byte[] setterArg) {
      this.backSideDocumentImage = setterArg;
    }

    private @Nullable byte[] signatureImage;
    public @Nullable byte[] getSignatureImage() { return signatureImage; }
    public void setSignatureImage(@Nullable byte[] setterArg) {
      this.signatureImage = setterArg;
    }

    private @Nullable ClassInfo classInfo;
    public @Nullable ClassInfo getClassInfo() { return classInfo; }
    public void setClassInfo(@Nullable ClassInfo setterArg) {
      this.classInfo = setterArg;
    }

    private @Nullable ImageAnalysisResult frontImageAnalysisResult;
    public @Nullable ImageAnalysisResult getFrontImageAnalysisResult() { return frontImageAnalysisResult; }
    public void setFrontImageAnalysisResult(@Nullable ImageAnalysisResult setterArg) {
      this.frontImageAnalysisResult = setterArg;
    }

    private @Nullable ImageAnalysisResult backImageAnalysisResult;
    public @Nullable ImageAnalysisResult getBackImageAnalysisResult() { return backImageAnalysisResult; }
    public void setBackImageAnalysisResult(@Nullable ImageAnalysisResult setterArg) {
      this.backImageAnalysisResult = setterArg;
    }

    public static final class Builder {
      private @Nullable List<ResultField> resultsFields;
      public @NonNull Builder setResultsFields(@Nullable List<ResultField> setterArg) {
        this.resultsFields = setterArg;
        return this;
      }
      private @Nullable byte[] faceImage;
      public @NonNull Builder setFaceImage(@Nullable byte[] setterArg) {
        this.faceImage = setterArg;
        return this;
      }
      private @Nullable byte[] frontSideDocumentImage;
      public @NonNull Builder setFrontSideDocumentImage(@Nullable byte[] setterArg) {
        this.frontSideDocumentImage = setterArg;
        return this;
      }
      private @Nullable byte[] backSideDocumentImage;
      public @NonNull Builder setBackSideDocumentImage(@Nullable byte[] setterArg) {
        this.backSideDocumentImage = setterArg;
        return this;
      }
      private @Nullable byte[] signatureImage;
      public @NonNull Builder setSignatureImage(@Nullable byte[] setterArg) {
        this.signatureImage = setterArg;
        return this;
      }
      private @Nullable ClassInfo classInfo;
      public @NonNull Builder setClassInfo(@Nullable ClassInfo setterArg) {
        this.classInfo = setterArg;
        return this;
      }
      private @Nullable ImageAnalysisResult frontImageAnalysisResult;
      public @NonNull Builder setFrontImageAnalysisResult(@Nullable ImageAnalysisResult setterArg) {
        this.frontImageAnalysisResult = setterArg;
        return this;
      }
      private @Nullable ImageAnalysisResult backImageAnalysisResult;
      public @NonNull Builder setBackImageAnalysisResult(@Nullable ImageAnalysisResult setterArg) {
        this.backImageAnalysisResult = setterArg;
        return this;
      }
      public @NonNull DocumentResult build() {
        DocumentResult pigeonReturn = new DocumentResult();
        pigeonReturn.setResultsFields(resultsFields);
        pigeonReturn.setFaceImage(faceImage);
        pigeonReturn.setFrontSideDocumentImage(frontSideDocumentImage);
        pigeonReturn.setBackSideDocumentImage(backSideDocumentImage);
        pigeonReturn.setSignatureImage(signatureImage);
        pigeonReturn.setClassInfo(classInfo);
        pigeonReturn.setFrontImageAnalysisResult(frontImageAnalysisResult);
        pigeonReturn.setBackImageAnalysisResult(backImageAnalysisResult);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("resultsFields", resultsFields);
      toMapResult.put("faceImage", faceImage);
      toMapResult.put("frontSideDocumentImage", frontSideDocumentImage);
      toMapResult.put("backSideDocumentImage", backSideDocumentImage);
      toMapResult.put("signatureImage", signatureImage);
      toMapResult.put("classInfo", (classInfo == null) ? null : classInfo.toMap());
      toMapResult.put("frontImageAnalysisResult", (frontImageAnalysisResult == null) ? null : frontImageAnalysisResult.toMap());
      toMapResult.put("backImageAnalysisResult", (backImageAnalysisResult == null) ? null : backImageAnalysisResult.toMap());
      return toMapResult;
    }
    static @NonNull DocumentResult fromMap(@NonNull Map<String, Object> map) {
      DocumentResult pigeonResult = new DocumentResult();
      Object resultsFields = map.get("resultsFields");
      pigeonResult.setResultsFields((List<ResultField>)resultsFields);
      Object faceImage = map.get("faceImage");
      pigeonResult.setFaceImage((byte[])faceImage);
      Object frontSideDocumentImage = map.get("frontSideDocumentImage");
      pigeonResult.setFrontSideDocumentImage((byte[])frontSideDocumentImage);
      Object backSideDocumentImage = map.get("backSideDocumentImage");
      pigeonResult.setBackSideDocumentImage((byte[])backSideDocumentImage);
      Object signatureImage = map.get("signatureImage");
      pigeonResult.setSignatureImage((byte[])signatureImage);
      Object classInfo = map.get("classInfo");
      pigeonResult.setClassInfo((classInfo == null) ? null : ClassInfo.fromMap((Map)classInfo));
      Object frontImageAnalysisResult = map.get("frontImageAnalysisResult");
      pigeonResult.setFrontImageAnalysisResult((frontImageAnalysisResult == null) ? null : ImageAnalysisResult.fromMap((Map)frontImageAnalysisResult));
      Object backImageAnalysisResult = map.get("backImageAnalysisResult");
      pigeonResult.setBackImageAnalysisResult((backImageAnalysisResult == null) ? null : ImageAnalysisResult.fromMap((Map)backImageAnalysisResult));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvColor {
    private @NonNull String color;
    public @NonNull String getColor() { return color; }
    public void setColor(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"color\" is null.");
      }
      this.color = setterArg;
    }

    private @Nullable String darkModeColor;
    public @Nullable String getDarkModeColor() { return darkModeColor; }
    public void setDarkModeColor(@Nullable String setterArg) {
      this.darkModeColor = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private IdvColor() {}
    public static final class Builder {
      private @Nullable String color;
      public @NonNull Builder setColor(@NonNull String setterArg) {
        this.color = setterArg;
        return this;
      }
      private @Nullable String darkModeColor;
      public @NonNull Builder setDarkModeColor(@Nullable String setterArg) {
        this.darkModeColor = setterArg;
        return this;
      }
      public @NonNull IdvColor build() {
        IdvColor pigeonReturn = new IdvColor();
        pigeonReturn.setColor(color);
        pigeonReturn.setDarkModeColor(darkModeColor);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("color", color);
      toMapResult.put("darkModeColor", darkModeColor);
      return toMapResult;
    }
    static @NonNull IdvColor fromMap(@NonNull Map<String, Object> map) {
      IdvColor pigeonResult = new IdvColor();
      Object color = map.get("color");
      pigeonResult.setColor((String)color);
      Object darkModeColor = map.get("darkModeColor");
      pigeonResult.setDarkModeColor((String)darkModeColor);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvFont {
    private @NonNull Long size;
    public @NonNull Long getSize() { return size; }
    public void setSize(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"size\" is null.");
      }
      this.size = setterArg;
    }

    private @Nullable Long weight;
    public @Nullable Long getWeight() { return weight; }
    public void setWeight(@Nullable Long setterArg) {
      this.weight = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private IdvFont() {}
    public static final class Builder {
      private @Nullable Long size;
      public @NonNull Builder setSize(@NonNull Long setterArg) {
        this.size = setterArg;
        return this;
      }
      private @Nullable Long weight;
      public @NonNull Builder setWeight(@Nullable Long setterArg) {
        this.weight = setterArg;
        return this;
      }
      public @NonNull IdvFont build() {
        IdvFont pigeonReturn = new IdvFont();
        pigeonReturn.setSize(size);
        pigeonReturn.setWeight(weight);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("size", size);
      toMapResult.put("weight", weight);
      return toMapResult;
    }
    static @NonNull IdvFont fromMap(@NonNull Map<String, Object> map) {
      IdvFont pigeonResult = new IdvFont();
      Object size = map.get("size");
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer)size : (Long)size));
      Object weight = map.get("weight");
      pigeonResult.setWeight((weight == null) ? null : ((weight instanceof Integer) ? (Integer)weight : (Long)weight));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvFontFamily {
    private @NonNull String name;
    public @NonNull String getName() { return name; }
    public void setName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"name\" is null.");
      }
      this.name = setterArg;
    }

    private @NonNull String path;
    public @NonNull String getPath() { return path; }
    public void setPath(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"path\" is null.");
      }
      this.path = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private IdvFontFamily() {}
    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@NonNull String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String path;
      public @NonNull Builder setPath(@NonNull String setterArg) {
        this.path = setterArg;
        return this;
      }
      public @NonNull IdvFontFamily build() {
        IdvFontFamily pigeonReturn = new IdvFontFamily();
        pigeonReturn.setName(name);
        pigeonReturn.setPath(path);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("path", path);
      return toMapResult;
    }
    static @NonNull IdvFontFamily fromMap(@NonNull Map<String, Object> map) {
      IdvFontFamily pigeonResult = new IdvFontFamily();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object path = map.get("path");
      pigeonResult.setPath((String)path);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvLocalizationTheme {
    private @Nullable String localizationFileName;
    public @Nullable String getLocalizationFileName() { return localizationFileName; }
    public void setLocalizationFileName(@Nullable String setterArg) {
      this.localizationFileName = setterArg;
    }

    private @Nullable String faceTecLocalizationFileName;
    public @Nullable String getFaceTecLocalizationFileName() { return faceTecLocalizationFileName; }
    public void setFaceTecLocalizationFileName(@Nullable String setterArg) {
      this.faceTecLocalizationFileName = setterArg;
    }

    public static final class Builder {
      private @Nullable String localizationFileName;
      public @NonNull Builder setLocalizationFileName(@Nullable String setterArg) {
        this.localizationFileName = setterArg;
        return this;
      }
      private @Nullable String faceTecLocalizationFileName;
      public @NonNull Builder setFaceTecLocalizationFileName(@Nullable String setterArg) {
        this.faceTecLocalizationFileName = setterArg;
        return this;
      }
      public @NonNull IdvLocalizationTheme build() {
        IdvLocalizationTheme pigeonReturn = new IdvLocalizationTheme();
        pigeonReturn.setLocalizationFileName(localizationFileName);
        pigeonReturn.setFaceTecLocalizationFileName(faceTecLocalizationFileName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("localizationFileName", localizationFileName);
      toMapResult.put("faceTecLocalizationFileName", faceTecLocalizationFileName);
      return toMapResult;
    }
    static @NonNull IdvLocalizationTheme fromMap(@NonNull Map<String, Object> map) {
      IdvLocalizationTheme pigeonResult = new IdvLocalizationTheme();
      Object localizationFileName = map.get("localizationFileName");
      pigeonResult.setLocalizationFileName((String)localizationFileName);
      Object faceTecLocalizationFileName = map.get("faceTecLocalizationFileName");
      pigeonResult.setFaceTecLocalizationFileName((String)faceTecLocalizationFileName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvColorTheme {
    private @Nullable IdvColor primaryColor;
    public @Nullable IdvColor getPrimaryColor() { return primaryColor; }
    public void setPrimaryColor(@Nullable IdvColor setterArg) {
      this.primaryColor = setterArg;
    }

    private @Nullable IdvColor stepCaptionColor;
    public @Nullable IdvColor getStepCaptionColor() { return stepCaptionColor; }
    public void setStepCaptionColor(@Nullable IdvColor setterArg) {
      this.stepCaptionColor = setterArg;
    }

    private @Nullable IdvColor stepDisabledColor;
    public @Nullable IdvColor getStepDisabledColor() { return stepDisabledColor; }
    public void setStepDisabledColor(@Nullable IdvColor setterArg) {
      this.stepDisabledColor = setterArg;
    }

    private @Nullable IdvColor successColor;
    public @Nullable IdvColor getSuccessColor() { return successColor; }
    public void setSuccessColor(@Nullable IdvColor setterArg) {
      this.successColor = setterArg;
    }

    private @Nullable IdvColor highlightColor;
    public @Nullable IdvColor getHighlightColor() { return highlightColor; }
    public void setHighlightColor(@Nullable IdvColor setterArg) {
      this.highlightColor = setterArg;
    }

    private @Nullable IdvColor stepBackgroundSuccessColor;
    public @Nullable IdvColor getStepBackgroundSuccessColor() { return stepBackgroundSuccessColor; }
    public void setStepBackgroundSuccessColor(@Nullable IdvColor setterArg) {
      this.stepBackgroundSuccessColor = setterArg;
    }

    private @Nullable IdvColor errorColor;
    public @Nullable IdvColor getErrorColor() { return errorColor; }
    public void setErrorColor(@Nullable IdvColor setterArg) {
      this.errorColor = setterArg;
    }

    private @Nullable IdvColor buttonBackgroundEnabledColor;
    public @Nullable IdvColor getButtonBackgroundEnabledColor() { return buttonBackgroundEnabledColor; }
    public void setButtonBackgroundEnabledColor(@Nullable IdvColor setterArg) {
      this.buttonBackgroundEnabledColor = setterArg;
    }

    private @Nullable IdvColor buttonBackgroundDisabledColor;
    public @Nullable IdvColor getButtonBackgroundDisabledColor() { return buttonBackgroundDisabledColor; }
    public void setButtonBackgroundDisabledColor(@Nullable IdvColor setterArg) {
      this.buttonBackgroundDisabledColor = setterArg;
    }

    private @Nullable IdvColor buttonTextDisabledColor;
    public @Nullable IdvColor getButtonTextDisabledColor() { return buttonTextDisabledColor; }
    public void setButtonTextDisabledColor(@Nullable IdvColor setterArg) {
      this.buttonTextDisabledColor = setterArg;
    }

    private @Nullable IdvColor buttonTextEnabledColor;
    public @Nullable IdvColor getButtonTextEnabledColor() { return buttonTextEnabledColor; }
    public void setButtonTextEnabledColor(@Nullable IdvColor setterArg) {
      this.buttonTextEnabledColor = setterArg;
    }

    private @Nullable IdvColor defaultBackgroundColor;
    public @Nullable IdvColor getDefaultBackgroundColor() { return defaultBackgroundColor; }
    public void setDefaultBackgroundColor(@Nullable IdvColor setterArg) {
      this.defaultBackgroundColor = setterArg;
    }

    private @Nullable IdvColor stepBackgroundColor;
    public @Nullable IdvColor getStepBackgroundColor() { return stepBackgroundColor; }
    public void setStepBackgroundColor(@Nullable IdvColor setterArg) {
      this.stepBackgroundColor = setterArg;
    }

    private @Nullable IdvColor labelColor;
    public @Nullable IdvColor getLabelColor() { return labelColor; }
    public void setLabelColor(@Nullable IdvColor setterArg) {
      this.labelColor = setterArg;
    }

    private @Nullable IdvColor secondaryLabelColor;
    public @Nullable IdvColor getSecondaryLabelColor() { return secondaryLabelColor; }
    public void setSecondaryLabelColor(@Nullable IdvColor setterArg) {
      this.secondaryLabelColor = setterArg;
    }

    private @Nullable IdvColor reviewDataEditBannerBackgroundColor;
    public @Nullable IdvColor getReviewDataEditBannerBackgroundColor() { return reviewDataEditBannerBackgroundColor; }
    public void setReviewDataEditBannerBackgroundColor(@Nullable IdvColor setterArg) {
      this.reviewDataEditBannerBackgroundColor = setterArg;
    }

    private @Nullable IdvColor reviewDataEditBannerTextColor;
    public @Nullable IdvColor getReviewDataEditBannerTextColor() { return reviewDataEditBannerTextColor; }
    public void setReviewDataEditBannerTextColor(@Nullable IdvColor setterArg) {
      this.reviewDataEditBannerTextColor = setterArg;
    }

    private @Nullable IdvColor stepLabelColor;
    public @Nullable IdvColor getStepLabelColor() { return stepLabelColor; }
    public void setStepLabelColor(@Nullable IdvColor setterArg) {
      this.stepLabelColor = setterArg;
    }

    private @Nullable IdvColor alertColor;
    public @Nullable IdvColor getAlertColor() { return alertColor; }
    public void setAlertColor(@Nullable IdvColor setterArg) {
      this.alertColor = setterArg;
    }

    private @Nullable IdvColor needsReviewColor;
    public @Nullable IdvColor getNeedsReviewColor() { return needsReviewColor; }
    public void setNeedsReviewColor(@Nullable IdvColor setterArg) {
      this.needsReviewColor = setterArg;
    }

    private @Nullable IdvColor idInstructionsTextColor;
    public @Nullable IdvColor getIdInstructionsTextColor() { return idInstructionsTextColor; }
    public void setIdInstructionsTextColor(@Nullable IdvColor setterArg) {
      this.idInstructionsTextColor = setterArg;
    }

    private @Nullable IdvColor idFlashlightWarningBackgroundColor;
    public @Nullable IdvColor getIdFlashlightWarningBackgroundColor() { return idFlashlightWarningBackgroundColor; }
    public void setIdFlashlightWarningBackgroundColor(@Nullable IdvColor setterArg) {
      this.idFlashlightWarningBackgroundColor = setterArg;
    }

    private @Nullable IdvColor idFlashlightWarningTextColor;
    public @Nullable IdvColor getIdFlashlightWarningTextColor() { return idFlashlightWarningTextColor; }
    public void setIdFlashlightWarningTextColor(@Nullable IdvColor setterArg) {
      this.idFlashlightWarningTextColor = setterArg;
    }

    private @Nullable IdvColor idReticleErrorColor;
    public @Nullable IdvColor getIdReticleErrorColor() { return idReticleErrorColor; }
    public void setIdReticleErrorColor(@Nullable IdvColor setterArg) {
      this.idReticleErrorColor = setterArg;
    }

    private @Nullable IdvColor faceTecPrimaryColor;
    public @Nullable IdvColor getFaceTecPrimaryColor() { return faceTecPrimaryColor; }
    public void setFaceTecPrimaryColor(@Nullable IdvColor setterArg) {
      this.faceTecPrimaryColor = setterArg;
    }

    private @Nullable IdvColor faceTecLoadingBarRailColor;
    public @Nullable IdvColor getFaceTecLoadingBarRailColor() { return faceTecLoadingBarRailColor; }
    public void setFaceTecLoadingBarRailColor(@Nullable IdvColor setterArg) {
      this.faceTecLoadingBarRailColor = setterArg;
    }

    private @Nullable IdvColor faceTecMainTextColor;
    public @Nullable IdvColor getFaceTecMainTextColor() { return faceTecMainTextColor; }
    public void setFaceTecMainTextColor(@Nullable IdvColor setterArg) {
      this.faceTecMainTextColor = setterArg;
    }

    private @Nullable IdvColor faceTecSubtextColor;
    public @Nullable IdvColor getFaceTecSubtextColor() { return faceTecSubtextColor; }
    public void setFaceTecSubtextColor(@Nullable IdvColor setterArg) {
      this.faceTecSubtextColor = setterArg;
    }

    private @Nullable IdvColor faceTecButtonTextColor;
    public @Nullable IdvColor getFaceTecButtonTextColor() { return faceTecButtonTextColor; }
    public void setFaceTecButtonTextColor(@Nullable IdvColor setterArg) {
      this.faceTecButtonTextColor = setterArg;
    }

    private @Nullable IdvColor faceTecOvalColor;
    public @Nullable IdvColor getFaceTecOvalColor() { return faceTecOvalColor; }
    public void setFaceTecOvalColor(@Nullable IdvColor setterArg) {
      this.faceTecOvalColor = setterArg;
    }

    private @Nullable IdvColor faceTecOvalProgressColor;
    public @Nullable IdvColor getFaceTecOvalProgressColor() { return faceTecOvalProgressColor; }
    public void setFaceTecOvalProgressColor(@Nullable IdvColor setterArg) {
      this.faceTecOvalProgressColor = setterArg;
    }

    private @Nullable IdvColor faceTecFeedbackBarBackgroundColor;
    public @Nullable IdvColor getFaceTecFeedbackBarBackgroundColor() { return faceTecFeedbackBarBackgroundColor; }
    public void setFaceTecFeedbackBarBackgroundColor(@Nullable IdvColor setterArg) {
      this.faceTecFeedbackBarBackgroundColor = setterArg;
    }

    private @Nullable IdvColor faceTecFeedbackBarTextColor;
    public @Nullable IdvColor getFaceTecFeedbackBarTextColor() { return faceTecFeedbackBarTextColor; }
    public void setFaceTecFeedbackBarTextColor(@Nullable IdvColor setterArg) {
      this.faceTecFeedbackBarTextColor = setterArg;
    }

    private @Nullable IdvColor faceTecResultAnimationCheckmarkForegroundColor;
    public @Nullable IdvColor getFaceTecResultAnimationCheckmarkForegroundColor() { return faceTecResultAnimationCheckmarkForegroundColor; }
    public void setFaceTecResultAnimationCheckmarkForegroundColor(@Nullable IdvColor setterArg) {
      this.faceTecResultAnimationCheckmarkForegroundColor = setterArg;
    }

    public static final class Builder {
      private @Nullable IdvColor primaryColor;
      public @NonNull Builder setPrimaryColor(@Nullable IdvColor setterArg) {
        this.primaryColor = setterArg;
        return this;
      }
      private @Nullable IdvColor stepCaptionColor;
      public @NonNull Builder setStepCaptionColor(@Nullable IdvColor setterArg) {
        this.stepCaptionColor = setterArg;
        return this;
      }
      private @Nullable IdvColor stepDisabledColor;
      public @NonNull Builder setStepDisabledColor(@Nullable IdvColor setterArg) {
        this.stepDisabledColor = setterArg;
        return this;
      }
      private @Nullable IdvColor successColor;
      public @NonNull Builder setSuccessColor(@Nullable IdvColor setterArg) {
        this.successColor = setterArg;
        return this;
      }
      private @Nullable IdvColor highlightColor;
      public @NonNull Builder setHighlightColor(@Nullable IdvColor setterArg) {
        this.highlightColor = setterArg;
        return this;
      }
      private @Nullable IdvColor stepBackgroundSuccessColor;
      public @NonNull Builder setStepBackgroundSuccessColor(@Nullable IdvColor setterArg) {
        this.stepBackgroundSuccessColor = setterArg;
        return this;
      }
      private @Nullable IdvColor errorColor;
      public @NonNull Builder setErrorColor(@Nullable IdvColor setterArg) {
        this.errorColor = setterArg;
        return this;
      }
      private @Nullable IdvColor buttonBackgroundEnabledColor;
      public @NonNull Builder setButtonBackgroundEnabledColor(@Nullable IdvColor setterArg) {
        this.buttonBackgroundEnabledColor = setterArg;
        return this;
      }
      private @Nullable IdvColor buttonBackgroundDisabledColor;
      public @NonNull Builder setButtonBackgroundDisabledColor(@Nullable IdvColor setterArg) {
        this.buttonBackgroundDisabledColor = setterArg;
        return this;
      }
      private @Nullable IdvColor buttonTextDisabledColor;
      public @NonNull Builder setButtonTextDisabledColor(@Nullable IdvColor setterArg) {
        this.buttonTextDisabledColor = setterArg;
        return this;
      }
      private @Nullable IdvColor buttonTextEnabledColor;
      public @NonNull Builder setButtonTextEnabledColor(@Nullable IdvColor setterArg) {
        this.buttonTextEnabledColor = setterArg;
        return this;
      }
      private @Nullable IdvColor defaultBackgroundColor;
      public @NonNull Builder setDefaultBackgroundColor(@Nullable IdvColor setterArg) {
        this.defaultBackgroundColor = setterArg;
        return this;
      }
      private @Nullable IdvColor stepBackgroundColor;
      public @NonNull Builder setStepBackgroundColor(@Nullable IdvColor setterArg) {
        this.stepBackgroundColor = setterArg;
        return this;
      }
      private @Nullable IdvColor labelColor;
      public @NonNull Builder setLabelColor(@Nullable IdvColor setterArg) {
        this.labelColor = setterArg;
        return this;
      }
      private @Nullable IdvColor secondaryLabelColor;
      public @NonNull Builder setSecondaryLabelColor(@Nullable IdvColor setterArg) {
        this.secondaryLabelColor = setterArg;
        return this;
      }
      private @Nullable IdvColor reviewDataEditBannerBackgroundColor;
      public @NonNull Builder setReviewDataEditBannerBackgroundColor(@Nullable IdvColor setterArg) {
        this.reviewDataEditBannerBackgroundColor = setterArg;
        return this;
      }
      private @Nullable IdvColor reviewDataEditBannerTextColor;
      public @NonNull Builder setReviewDataEditBannerTextColor(@Nullable IdvColor setterArg) {
        this.reviewDataEditBannerTextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor stepLabelColor;
      public @NonNull Builder setStepLabelColor(@Nullable IdvColor setterArg) {
        this.stepLabelColor = setterArg;
        return this;
      }
      private @Nullable IdvColor alertColor;
      public @NonNull Builder setAlertColor(@Nullable IdvColor setterArg) {
        this.alertColor = setterArg;
        return this;
      }
      private @Nullable IdvColor needsReviewColor;
      public @NonNull Builder setNeedsReviewColor(@Nullable IdvColor setterArg) {
        this.needsReviewColor = setterArg;
        return this;
      }
      private @Nullable IdvColor idInstructionsTextColor;
      public @NonNull Builder setIdInstructionsTextColor(@Nullable IdvColor setterArg) {
        this.idInstructionsTextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor idFlashlightWarningBackgroundColor;
      public @NonNull Builder setIdFlashlightWarningBackgroundColor(@Nullable IdvColor setterArg) {
        this.idFlashlightWarningBackgroundColor = setterArg;
        return this;
      }
      private @Nullable IdvColor idFlashlightWarningTextColor;
      public @NonNull Builder setIdFlashlightWarningTextColor(@Nullable IdvColor setterArg) {
        this.idFlashlightWarningTextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor idReticleErrorColor;
      public @NonNull Builder setIdReticleErrorColor(@Nullable IdvColor setterArg) {
        this.idReticleErrorColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecPrimaryColor;
      public @NonNull Builder setFaceTecPrimaryColor(@Nullable IdvColor setterArg) {
        this.faceTecPrimaryColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecLoadingBarRailColor;
      public @NonNull Builder setFaceTecLoadingBarRailColor(@Nullable IdvColor setterArg) {
        this.faceTecLoadingBarRailColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecMainTextColor;
      public @NonNull Builder setFaceTecMainTextColor(@Nullable IdvColor setterArg) {
        this.faceTecMainTextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecSubtextColor;
      public @NonNull Builder setFaceTecSubtextColor(@Nullable IdvColor setterArg) {
        this.faceTecSubtextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecButtonTextColor;
      public @NonNull Builder setFaceTecButtonTextColor(@Nullable IdvColor setterArg) {
        this.faceTecButtonTextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecOvalColor;
      public @NonNull Builder setFaceTecOvalColor(@Nullable IdvColor setterArg) {
        this.faceTecOvalColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecOvalProgressColor;
      public @NonNull Builder setFaceTecOvalProgressColor(@Nullable IdvColor setterArg) {
        this.faceTecOvalProgressColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecFeedbackBarBackgroundColor;
      public @NonNull Builder setFaceTecFeedbackBarBackgroundColor(@Nullable IdvColor setterArg) {
        this.faceTecFeedbackBarBackgroundColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecFeedbackBarTextColor;
      public @NonNull Builder setFaceTecFeedbackBarTextColor(@Nullable IdvColor setterArg) {
        this.faceTecFeedbackBarTextColor = setterArg;
        return this;
      }
      private @Nullable IdvColor faceTecResultAnimationCheckmarkForegroundColor;
      public @NonNull Builder setFaceTecResultAnimationCheckmarkForegroundColor(@Nullable IdvColor setterArg) {
        this.faceTecResultAnimationCheckmarkForegroundColor = setterArg;
        return this;
      }
      public @NonNull IdvColorTheme build() {
        IdvColorTheme pigeonReturn = new IdvColorTheme();
        pigeonReturn.setPrimaryColor(primaryColor);
        pigeonReturn.setStepCaptionColor(stepCaptionColor);
        pigeonReturn.setStepDisabledColor(stepDisabledColor);
        pigeonReturn.setSuccessColor(successColor);
        pigeonReturn.setHighlightColor(highlightColor);
        pigeonReturn.setStepBackgroundSuccessColor(stepBackgroundSuccessColor);
        pigeonReturn.setErrorColor(errorColor);
        pigeonReturn.setButtonBackgroundEnabledColor(buttonBackgroundEnabledColor);
        pigeonReturn.setButtonBackgroundDisabledColor(buttonBackgroundDisabledColor);
        pigeonReturn.setButtonTextDisabledColor(buttonTextDisabledColor);
        pigeonReturn.setButtonTextEnabledColor(buttonTextEnabledColor);
        pigeonReturn.setDefaultBackgroundColor(defaultBackgroundColor);
        pigeonReturn.setStepBackgroundColor(stepBackgroundColor);
        pigeonReturn.setLabelColor(labelColor);
        pigeonReturn.setSecondaryLabelColor(secondaryLabelColor);
        pigeonReturn.setReviewDataEditBannerBackgroundColor(reviewDataEditBannerBackgroundColor);
        pigeonReturn.setReviewDataEditBannerTextColor(reviewDataEditBannerTextColor);
        pigeonReturn.setStepLabelColor(stepLabelColor);
        pigeonReturn.setAlertColor(alertColor);
        pigeonReturn.setNeedsReviewColor(needsReviewColor);
        pigeonReturn.setIdInstructionsTextColor(idInstructionsTextColor);
        pigeonReturn.setIdFlashlightWarningBackgroundColor(idFlashlightWarningBackgroundColor);
        pigeonReturn.setIdFlashlightWarningTextColor(idFlashlightWarningTextColor);
        pigeonReturn.setIdReticleErrorColor(idReticleErrorColor);
        pigeonReturn.setFaceTecPrimaryColor(faceTecPrimaryColor);
        pigeonReturn.setFaceTecLoadingBarRailColor(faceTecLoadingBarRailColor);
        pigeonReturn.setFaceTecMainTextColor(faceTecMainTextColor);
        pigeonReturn.setFaceTecSubtextColor(faceTecSubtextColor);
        pigeonReturn.setFaceTecButtonTextColor(faceTecButtonTextColor);
        pigeonReturn.setFaceTecOvalColor(faceTecOvalColor);
        pigeonReturn.setFaceTecOvalProgressColor(faceTecOvalProgressColor);
        pigeonReturn.setFaceTecFeedbackBarBackgroundColor(faceTecFeedbackBarBackgroundColor);
        pigeonReturn.setFaceTecFeedbackBarTextColor(faceTecFeedbackBarTextColor);
        pigeonReturn.setFaceTecResultAnimationCheckmarkForegroundColor(faceTecResultAnimationCheckmarkForegroundColor);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("primaryColor", (primaryColor == null) ? null : primaryColor.toMap());
      toMapResult.put("stepCaptionColor", (stepCaptionColor == null) ? null : stepCaptionColor.toMap());
      toMapResult.put("stepDisabledColor", (stepDisabledColor == null) ? null : stepDisabledColor.toMap());
      toMapResult.put("successColor", (successColor == null) ? null : successColor.toMap());
      toMapResult.put("highlightColor", (highlightColor == null) ? null : highlightColor.toMap());
      toMapResult.put("stepBackgroundSuccessColor", (stepBackgroundSuccessColor == null) ? null : stepBackgroundSuccessColor.toMap());
      toMapResult.put("errorColor", (errorColor == null) ? null : errorColor.toMap());
      toMapResult.put("buttonBackgroundEnabledColor", (buttonBackgroundEnabledColor == null) ? null : buttonBackgroundEnabledColor.toMap());
      toMapResult.put("buttonBackgroundDisabledColor", (buttonBackgroundDisabledColor == null) ? null : buttonBackgroundDisabledColor.toMap());
      toMapResult.put("buttonTextDisabledColor", (buttonTextDisabledColor == null) ? null : buttonTextDisabledColor.toMap());
      toMapResult.put("buttonTextEnabledColor", (buttonTextEnabledColor == null) ? null : buttonTextEnabledColor.toMap());
      toMapResult.put("defaultBackgroundColor", (defaultBackgroundColor == null) ? null : defaultBackgroundColor.toMap());
      toMapResult.put("stepBackgroundColor", (stepBackgroundColor == null) ? null : stepBackgroundColor.toMap());
      toMapResult.put("labelColor", (labelColor == null) ? null : labelColor.toMap());
      toMapResult.put("secondaryLabelColor", (secondaryLabelColor == null) ? null : secondaryLabelColor.toMap());
      toMapResult.put("reviewDataEditBannerBackgroundColor", (reviewDataEditBannerBackgroundColor == null) ? null : reviewDataEditBannerBackgroundColor.toMap());
      toMapResult.put("reviewDataEditBannerTextColor", (reviewDataEditBannerTextColor == null) ? null : reviewDataEditBannerTextColor.toMap());
      toMapResult.put("stepLabelColor", (stepLabelColor == null) ? null : stepLabelColor.toMap());
      toMapResult.put("alertColor", (alertColor == null) ? null : alertColor.toMap());
      toMapResult.put("needsReviewColor", (needsReviewColor == null) ? null : needsReviewColor.toMap());
      toMapResult.put("idInstructionsTextColor", (idInstructionsTextColor == null) ? null : idInstructionsTextColor.toMap());
      toMapResult.put("idFlashlightWarningBackgroundColor", (idFlashlightWarningBackgroundColor == null) ? null : idFlashlightWarningBackgroundColor.toMap());
      toMapResult.put("idFlashlightWarningTextColor", (idFlashlightWarningTextColor == null) ? null : idFlashlightWarningTextColor.toMap());
      toMapResult.put("idReticleErrorColor", (idReticleErrorColor == null) ? null : idReticleErrorColor.toMap());
      toMapResult.put("faceTecPrimaryColor", (faceTecPrimaryColor == null) ? null : faceTecPrimaryColor.toMap());
      toMapResult.put("faceTecLoadingBarRailColor", (faceTecLoadingBarRailColor == null) ? null : faceTecLoadingBarRailColor.toMap());
      toMapResult.put("faceTecMainTextColor", (faceTecMainTextColor == null) ? null : faceTecMainTextColor.toMap());
      toMapResult.put("faceTecSubtextColor", (faceTecSubtextColor == null) ? null : faceTecSubtextColor.toMap());
      toMapResult.put("faceTecButtonTextColor", (faceTecButtonTextColor == null) ? null : faceTecButtonTextColor.toMap());
      toMapResult.put("faceTecOvalColor", (faceTecOvalColor == null) ? null : faceTecOvalColor.toMap());
      toMapResult.put("faceTecOvalProgressColor", (faceTecOvalProgressColor == null) ? null : faceTecOvalProgressColor.toMap());
      toMapResult.put("faceTecFeedbackBarBackgroundColor", (faceTecFeedbackBarBackgroundColor == null) ? null : faceTecFeedbackBarBackgroundColor.toMap());
      toMapResult.put("faceTecFeedbackBarTextColor", (faceTecFeedbackBarTextColor == null) ? null : faceTecFeedbackBarTextColor.toMap());
      toMapResult.put("faceTecResultAnimationCheckmarkForegroundColor", (faceTecResultAnimationCheckmarkForegroundColor == null) ? null : faceTecResultAnimationCheckmarkForegroundColor.toMap());
      return toMapResult;
    }
    static @NonNull IdvColorTheme fromMap(@NonNull Map<String, Object> map) {
      IdvColorTheme pigeonResult = new IdvColorTheme();
      Object primaryColor = map.get("primaryColor");
      pigeonResult.setPrimaryColor((primaryColor == null) ? null : IdvColor.fromMap((Map)primaryColor));
      Object stepCaptionColor = map.get("stepCaptionColor");
      pigeonResult.setStepCaptionColor((stepCaptionColor == null) ? null : IdvColor.fromMap((Map)stepCaptionColor));
      Object stepDisabledColor = map.get("stepDisabledColor");
      pigeonResult.setStepDisabledColor((stepDisabledColor == null) ? null : IdvColor.fromMap((Map)stepDisabledColor));
      Object successColor = map.get("successColor");
      pigeonResult.setSuccessColor((successColor == null) ? null : IdvColor.fromMap((Map)successColor));
      Object highlightColor = map.get("highlightColor");
      pigeonResult.setHighlightColor((highlightColor == null) ? null : IdvColor.fromMap((Map)highlightColor));
      Object stepBackgroundSuccessColor = map.get("stepBackgroundSuccessColor");
      pigeonResult.setStepBackgroundSuccessColor((stepBackgroundSuccessColor == null) ? null : IdvColor.fromMap((Map)stepBackgroundSuccessColor));
      Object errorColor = map.get("errorColor");
      pigeonResult.setErrorColor((errorColor == null) ? null : IdvColor.fromMap((Map)errorColor));
      Object buttonBackgroundEnabledColor = map.get("buttonBackgroundEnabledColor");
      pigeonResult.setButtonBackgroundEnabledColor((buttonBackgroundEnabledColor == null) ? null : IdvColor.fromMap((Map)buttonBackgroundEnabledColor));
      Object buttonBackgroundDisabledColor = map.get("buttonBackgroundDisabledColor");
      pigeonResult.setButtonBackgroundDisabledColor((buttonBackgroundDisabledColor == null) ? null : IdvColor.fromMap((Map)buttonBackgroundDisabledColor));
      Object buttonTextDisabledColor = map.get("buttonTextDisabledColor");
      pigeonResult.setButtonTextDisabledColor((buttonTextDisabledColor == null) ? null : IdvColor.fromMap((Map)buttonTextDisabledColor));
      Object buttonTextEnabledColor = map.get("buttonTextEnabledColor");
      pigeonResult.setButtonTextEnabledColor((buttonTextEnabledColor == null) ? null : IdvColor.fromMap((Map)buttonTextEnabledColor));
      Object defaultBackgroundColor = map.get("defaultBackgroundColor");
      pigeonResult.setDefaultBackgroundColor((defaultBackgroundColor == null) ? null : IdvColor.fromMap((Map)defaultBackgroundColor));
      Object stepBackgroundColor = map.get("stepBackgroundColor");
      pigeonResult.setStepBackgroundColor((stepBackgroundColor == null) ? null : IdvColor.fromMap((Map)stepBackgroundColor));
      Object labelColor = map.get("labelColor");
      pigeonResult.setLabelColor((labelColor == null) ? null : IdvColor.fromMap((Map)labelColor));
      Object secondaryLabelColor = map.get("secondaryLabelColor");
      pigeonResult.setSecondaryLabelColor((secondaryLabelColor == null) ? null : IdvColor.fromMap((Map)secondaryLabelColor));
      Object reviewDataEditBannerBackgroundColor = map.get("reviewDataEditBannerBackgroundColor");
      pigeonResult.setReviewDataEditBannerBackgroundColor((reviewDataEditBannerBackgroundColor == null) ? null : IdvColor.fromMap((Map)reviewDataEditBannerBackgroundColor));
      Object reviewDataEditBannerTextColor = map.get("reviewDataEditBannerTextColor");
      pigeonResult.setReviewDataEditBannerTextColor((reviewDataEditBannerTextColor == null) ? null : IdvColor.fromMap((Map)reviewDataEditBannerTextColor));
      Object stepLabelColor = map.get("stepLabelColor");
      pigeonResult.setStepLabelColor((stepLabelColor == null) ? null : IdvColor.fromMap((Map)stepLabelColor));
      Object alertColor = map.get("alertColor");
      pigeonResult.setAlertColor((alertColor == null) ? null : IdvColor.fromMap((Map)alertColor));
      Object needsReviewColor = map.get("needsReviewColor");
      pigeonResult.setNeedsReviewColor((needsReviewColor == null) ? null : IdvColor.fromMap((Map)needsReviewColor));
      Object idInstructionsTextColor = map.get("idInstructionsTextColor");
      pigeonResult.setIdInstructionsTextColor((idInstructionsTextColor == null) ? null : IdvColor.fromMap((Map)idInstructionsTextColor));
      Object idFlashlightWarningBackgroundColor = map.get("idFlashlightWarningBackgroundColor");
      pigeonResult.setIdFlashlightWarningBackgroundColor((idFlashlightWarningBackgroundColor == null) ? null : IdvColor.fromMap((Map)idFlashlightWarningBackgroundColor));
      Object idFlashlightWarningTextColor = map.get("idFlashlightWarningTextColor");
      pigeonResult.setIdFlashlightWarningTextColor((idFlashlightWarningTextColor == null) ? null : IdvColor.fromMap((Map)idFlashlightWarningTextColor));
      Object idReticleErrorColor = map.get("idReticleErrorColor");
      pigeonResult.setIdReticleErrorColor((idReticleErrorColor == null) ? null : IdvColor.fromMap((Map)idReticleErrorColor));
      Object faceTecPrimaryColor = map.get("faceTecPrimaryColor");
      pigeonResult.setFaceTecPrimaryColor((faceTecPrimaryColor == null) ? null : IdvColor.fromMap((Map)faceTecPrimaryColor));
      Object faceTecLoadingBarRailColor = map.get("faceTecLoadingBarRailColor");
      pigeonResult.setFaceTecLoadingBarRailColor((faceTecLoadingBarRailColor == null) ? null : IdvColor.fromMap((Map)faceTecLoadingBarRailColor));
      Object faceTecMainTextColor = map.get("faceTecMainTextColor");
      pigeonResult.setFaceTecMainTextColor((faceTecMainTextColor == null) ? null : IdvColor.fromMap((Map)faceTecMainTextColor));
      Object faceTecSubtextColor = map.get("faceTecSubtextColor");
      pigeonResult.setFaceTecSubtextColor((faceTecSubtextColor == null) ? null : IdvColor.fromMap((Map)faceTecSubtextColor));
      Object faceTecButtonTextColor = map.get("faceTecButtonTextColor");
      pigeonResult.setFaceTecButtonTextColor((faceTecButtonTextColor == null) ? null : IdvColor.fromMap((Map)faceTecButtonTextColor));
      Object faceTecOvalColor = map.get("faceTecOvalColor");
      pigeonResult.setFaceTecOvalColor((faceTecOvalColor == null) ? null : IdvColor.fromMap((Map)faceTecOvalColor));
      Object faceTecOvalProgressColor = map.get("faceTecOvalProgressColor");
      pigeonResult.setFaceTecOvalProgressColor((faceTecOvalProgressColor == null) ? null : IdvColor.fromMap((Map)faceTecOvalProgressColor));
      Object faceTecFeedbackBarBackgroundColor = map.get("faceTecFeedbackBarBackgroundColor");
      pigeonResult.setFaceTecFeedbackBarBackgroundColor((faceTecFeedbackBarBackgroundColor == null) ? null : IdvColor.fromMap((Map)faceTecFeedbackBarBackgroundColor));
      Object faceTecFeedbackBarTextColor = map.get("faceTecFeedbackBarTextColor");
      pigeonResult.setFaceTecFeedbackBarTextColor((faceTecFeedbackBarTextColor == null) ? null : IdvColor.fromMap((Map)faceTecFeedbackBarTextColor));
      Object faceTecResultAnimationCheckmarkForegroundColor = map.get("faceTecResultAnimationCheckmarkForegroundColor");
      pigeonResult.setFaceTecResultAnimationCheckmarkForegroundColor((faceTecResultAnimationCheckmarkForegroundColor == null) ? null : IdvColor.fromMap((Map)faceTecResultAnimationCheckmarkForegroundColor));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvFontTheme {
    private @Nullable IdvFont navigationBarTitleFont;
    public @Nullable IdvFont getNavigationBarTitleFont() { return navigationBarTitleFont; }
    public void setNavigationBarTitleFont(@Nullable IdvFont setterArg) {
      this.navigationBarTitleFont = setterArg;
    }

    private @Nullable IdvFont buttonFont;
    public @Nullable IdvFont getButtonFont() { return buttonFont; }
    public void setButtonFont(@Nullable IdvFont setterArg) {
      this.buttonFont = setterArg;
    }

    private @Nullable IdvFont dataCaptionFont;
    public @Nullable IdvFont getDataCaptionFont() { return dataCaptionFont; }
    public void setDataCaptionFont(@Nullable IdvFont setterArg) {
      this.dataCaptionFont = setterArg;
    }

    private @Nullable IdvFont dataTitleFont;
    public @Nullable IdvFont getDataTitleFont() { return dataTitleFont; }
    public void setDataTitleFont(@Nullable IdvFont setterArg) {
      this.dataTitleFont = setterArg;
    }

    private @Nullable IdvFont dataHeaderFont;
    public @Nullable IdvFont getDataHeaderFont() { return dataHeaderFont; }
    public void setDataHeaderFont(@Nullable IdvFont setterArg) {
      this.dataHeaderFont = setterArg;
    }

    private @Nullable IdvFont titleFont;
    public @Nullable IdvFont getTitleFont() { return titleFont; }
    public void setTitleFont(@Nullable IdvFont setterArg) {
      this.titleFont = setterArg;
    }

    private @Nullable IdvFont buttonStartFont;
    public @Nullable IdvFont getButtonStartFont() { return buttonStartFont; }
    public void setButtonStartFont(@Nullable IdvFont setterArg) {
      this.buttonStartFont = setterArg;
    }

    private @Nullable IdvFont stepTitleFont;
    public @Nullable IdvFont getStepTitleFont() { return stepTitleFont; }
    public void setStepTitleFont(@Nullable IdvFont setterArg) {
      this.stepTitleFont = setterArg;
    }

    private @Nullable IdvFont stepNumberFont;
    public @Nullable IdvFont getStepNumberFont() { return stepNumberFont; }
    public void setStepNumberFont(@Nullable IdvFont setterArg) {
      this.stepNumberFont = setterArg;
    }

    private @Nullable IdvFont secondaryLabelFont;
    public @Nullable IdvFont getSecondaryLabelFont() { return secondaryLabelFont; }
    public void setSecondaryLabelFont(@Nullable IdvFont setterArg) {
      this.secondaryLabelFont = setterArg;
    }

    private @Nullable IdvFont faceTecMessageFont;
    public @Nullable IdvFont getFaceTecMessageFont() { return faceTecMessageFont; }
    public void setFaceTecMessageFont(@Nullable IdvFont setterArg) {
      this.faceTecMessageFont = setterArg;
    }

    private @Nullable IdvFont faceTecHeaderFont;
    public @Nullable IdvFont getFaceTecHeaderFont() { return faceTecHeaderFont; }
    public void setFaceTecHeaderFont(@Nullable IdvFont setterArg) {
      this.faceTecHeaderFont = setterArg;
    }

    private @Nullable IdvFont faceTecSubtextFont;
    public @Nullable IdvFont getFaceTecSubtextFont() { return faceTecSubtextFont; }
    public void setFaceTecSubtextFont(@Nullable IdvFont setterArg) {
      this.faceTecSubtextFont = setterArg;
    }

    private @Nullable IdvFont faceTecButtonFont;
    public @Nullable IdvFont getFaceTecButtonFont() { return faceTecButtonFont; }
    public void setFaceTecButtonFont(@Nullable IdvFont setterArg) {
      this.faceTecButtonFont = setterArg;
    }

    private @Nullable IdvFont idInstructionsFont;
    public @Nullable IdvFont getIdInstructionsFont() { return idInstructionsFont; }
    public void setIdInstructionsFont(@Nullable IdvFont setterArg) {
      this.idInstructionsFont = setterArg;
    }

    private @Nullable IdvFont idFlashlightWarningFont;
    public @Nullable IdvFont getIdFlashlightWarningFont() { return idFlashlightWarningFont; }
    public void setIdFlashlightWarningFont(@Nullable IdvFont setterArg) {
      this.idFlashlightWarningFont = setterArg;
    }

    private @Nullable IdvFontFamily fontFamily;
    public @Nullable IdvFontFamily getFontFamily() { return fontFamily; }
    public void setFontFamily(@Nullable IdvFontFamily setterArg) {
      this.fontFamily = setterArg;
    }

    public static final class Builder {
      private @Nullable IdvFont navigationBarTitleFont;
      public @NonNull Builder setNavigationBarTitleFont(@Nullable IdvFont setterArg) {
        this.navigationBarTitleFont = setterArg;
        return this;
      }
      private @Nullable IdvFont buttonFont;
      public @NonNull Builder setButtonFont(@Nullable IdvFont setterArg) {
        this.buttonFont = setterArg;
        return this;
      }
      private @Nullable IdvFont dataCaptionFont;
      public @NonNull Builder setDataCaptionFont(@Nullable IdvFont setterArg) {
        this.dataCaptionFont = setterArg;
        return this;
      }
      private @Nullable IdvFont dataTitleFont;
      public @NonNull Builder setDataTitleFont(@Nullable IdvFont setterArg) {
        this.dataTitleFont = setterArg;
        return this;
      }
      private @Nullable IdvFont dataHeaderFont;
      public @NonNull Builder setDataHeaderFont(@Nullable IdvFont setterArg) {
        this.dataHeaderFont = setterArg;
        return this;
      }
      private @Nullable IdvFont titleFont;
      public @NonNull Builder setTitleFont(@Nullable IdvFont setterArg) {
        this.titleFont = setterArg;
        return this;
      }
      private @Nullable IdvFont buttonStartFont;
      public @NonNull Builder setButtonStartFont(@Nullable IdvFont setterArg) {
        this.buttonStartFont = setterArg;
        return this;
      }
      private @Nullable IdvFont stepTitleFont;
      public @NonNull Builder setStepTitleFont(@Nullable IdvFont setterArg) {
        this.stepTitleFont = setterArg;
        return this;
      }
      private @Nullable IdvFont stepNumberFont;
      public @NonNull Builder setStepNumberFont(@Nullable IdvFont setterArg) {
        this.stepNumberFont = setterArg;
        return this;
      }
      private @Nullable IdvFont secondaryLabelFont;
      public @NonNull Builder setSecondaryLabelFont(@Nullable IdvFont setterArg) {
        this.secondaryLabelFont = setterArg;
        return this;
      }
      private @Nullable IdvFont faceTecMessageFont;
      public @NonNull Builder setFaceTecMessageFont(@Nullable IdvFont setterArg) {
        this.faceTecMessageFont = setterArg;
        return this;
      }
      private @Nullable IdvFont faceTecHeaderFont;
      public @NonNull Builder setFaceTecHeaderFont(@Nullable IdvFont setterArg) {
        this.faceTecHeaderFont = setterArg;
        return this;
      }
      private @Nullable IdvFont faceTecSubtextFont;
      public @NonNull Builder setFaceTecSubtextFont(@Nullable IdvFont setterArg) {
        this.faceTecSubtextFont = setterArg;
        return this;
      }
      private @Nullable IdvFont faceTecButtonFont;
      public @NonNull Builder setFaceTecButtonFont(@Nullable IdvFont setterArg) {
        this.faceTecButtonFont = setterArg;
        return this;
      }
      private @Nullable IdvFont idInstructionsFont;
      public @NonNull Builder setIdInstructionsFont(@Nullable IdvFont setterArg) {
        this.idInstructionsFont = setterArg;
        return this;
      }
      private @Nullable IdvFont idFlashlightWarningFont;
      public @NonNull Builder setIdFlashlightWarningFont(@Nullable IdvFont setterArg) {
        this.idFlashlightWarningFont = setterArg;
        return this;
      }
      private @Nullable IdvFontFamily fontFamily;
      public @NonNull Builder setFontFamily(@Nullable IdvFontFamily setterArg) {
        this.fontFamily = setterArg;
        return this;
      }
      public @NonNull IdvFontTheme build() {
        IdvFontTheme pigeonReturn = new IdvFontTheme();
        pigeonReturn.setNavigationBarTitleFont(navigationBarTitleFont);
        pigeonReturn.setButtonFont(buttonFont);
        pigeonReturn.setDataCaptionFont(dataCaptionFont);
        pigeonReturn.setDataTitleFont(dataTitleFont);
        pigeonReturn.setDataHeaderFont(dataHeaderFont);
        pigeonReturn.setTitleFont(titleFont);
        pigeonReturn.setButtonStartFont(buttonStartFont);
        pigeonReturn.setStepTitleFont(stepTitleFont);
        pigeonReturn.setStepNumberFont(stepNumberFont);
        pigeonReturn.setSecondaryLabelFont(secondaryLabelFont);
        pigeonReturn.setFaceTecMessageFont(faceTecMessageFont);
        pigeonReturn.setFaceTecHeaderFont(faceTecHeaderFont);
        pigeonReturn.setFaceTecSubtextFont(faceTecSubtextFont);
        pigeonReturn.setFaceTecButtonFont(faceTecButtonFont);
        pigeonReturn.setIdInstructionsFont(idInstructionsFont);
        pigeonReturn.setIdFlashlightWarningFont(idFlashlightWarningFont);
        pigeonReturn.setFontFamily(fontFamily);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("navigationBarTitleFont", (navigationBarTitleFont == null) ? null : navigationBarTitleFont.toMap());
      toMapResult.put("buttonFont", (buttonFont == null) ? null : buttonFont.toMap());
      toMapResult.put("dataCaptionFont", (dataCaptionFont == null) ? null : dataCaptionFont.toMap());
      toMapResult.put("dataTitleFont", (dataTitleFont == null) ? null : dataTitleFont.toMap());
      toMapResult.put("dataHeaderFont", (dataHeaderFont == null) ? null : dataHeaderFont.toMap());
      toMapResult.put("titleFont", (titleFont == null) ? null : titleFont.toMap());
      toMapResult.put("buttonStartFont", (buttonStartFont == null) ? null : buttonStartFont.toMap());
      toMapResult.put("stepTitleFont", (stepTitleFont == null) ? null : stepTitleFont.toMap());
      toMapResult.put("stepNumberFont", (stepNumberFont == null) ? null : stepNumberFont.toMap());
      toMapResult.put("secondaryLabelFont", (secondaryLabelFont == null) ? null : secondaryLabelFont.toMap());
      toMapResult.put("faceTecMessageFont", (faceTecMessageFont == null) ? null : faceTecMessageFont.toMap());
      toMapResult.put("faceTecHeaderFont", (faceTecHeaderFont == null) ? null : faceTecHeaderFont.toMap());
      toMapResult.put("faceTecSubtextFont", (faceTecSubtextFont == null) ? null : faceTecSubtextFont.toMap());
      toMapResult.put("faceTecButtonFont", (faceTecButtonFont == null) ? null : faceTecButtonFont.toMap());
      toMapResult.put("idInstructionsFont", (idInstructionsFont == null) ? null : idInstructionsFont.toMap());
      toMapResult.put("idFlashlightWarningFont", (idFlashlightWarningFont == null) ? null : idFlashlightWarningFont.toMap());
      toMapResult.put("fontFamily", (fontFamily == null) ? null : fontFamily.toMap());
      return toMapResult;
    }
    static @NonNull IdvFontTheme fromMap(@NonNull Map<String, Object> map) {
      IdvFontTheme pigeonResult = new IdvFontTheme();
      Object navigationBarTitleFont = map.get("navigationBarTitleFont");
      pigeonResult.setNavigationBarTitleFont((navigationBarTitleFont == null) ? null : IdvFont.fromMap((Map)navigationBarTitleFont));
      Object buttonFont = map.get("buttonFont");
      pigeonResult.setButtonFont((buttonFont == null) ? null : IdvFont.fromMap((Map)buttonFont));
      Object dataCaptionFont = map.get("dataCaptionFont");
      pigeonResult.setDataCaptionFont((dataCaptionFont == null) ? null : IdvFont.fromMap((Map)dataCaptionFont));
      Object dataTitleFont = map.get("dataTitleFont");
      pigeonResult.setDataTitleFont((dataTitleFont == null) ? null : IdvFont.fromMap((Map)dataTitleFont));
      Object dataHeaderFont = map.get("dataHeaderFont");
      pigeonResult.setDataHeaderFont((dataHeaderFont == null) ? null : IdvFont.fromMap((Map)dataHeaderFont));
      Object titleFont = map.get("titleFont");
      pigeonResult.setTitleFont((titleFont == null) ? null : IdvFont.fromMap((Map)titleFont));
      Object buttonStartFont = map.get("buttonStartFont");
      pigeonResult.setButtonStartFont((buttonStartFont == null) ? null : IdvFont.fromMap((Map)buttonStartFont));
      Object stepTitleFont = map.get("stepTitleFont");
      pigeonResult.setStepTitleFont((stepTitleFont == null) ? null : IdvFont.fromMap((Map)stepTitleFont));
      Object stepNumberFont = map.get("stepNumberFont");
      pigeonResult.setStepNumberFont((stepNumberFont == null) ? null : IdvFont.fromMap((Map)stepNumberFont));
      Object secondaryLabelFont = map.get("secondaryLabelFont");
      pigeonResult.setSecondaryLabelFont((secondaryLabelFont == null) ? null : IdvFont.fromMap((Map)secondaryLabelFont));
      Object faceTecMessageFont = map.get("faceTecMessageFont");
      pigeonResult.setFaceTecMessageFont((faceTecMessageFont == null) ? null : IdvFont.fromMap((Map)faceTecMessageFont));
      Object faceTecHeaderFont = map.get("faceTecHeaderFont");
      pigeonResult.setFaceTecHeaderFont((faceTecHeaderFont == null) ? null : IdvFont.fromMap((Map)faceTecHeaderFont));
      Object faceTecSubtextFont = map.get("faceTecSubtextFont");
      pigeonResult.setFaceTecSubtextFont((faceTecSubtextFont == null) ? null : IdvFont.fromMap((Map)faceTecSubtextFont));
      Object faceTecButtonFont = map.get("faceTecButtonFont");
      pigeonResult.setFaceTecButtonFont((faceTecButtonFont == null) ? null : IdvFont.fromMap((Map)faceTecButtonFont));
      Object idInstructionsFont = map.get("idInstructionsFont");
      pigeonResult.setIdInstructionsFont((idInstructionsFont == null) ? null : IdvFont.fromMap((Map)idInstructionsFont));
      Object idFlashlightWarningFont = map.get("idFlashlightWarningFont");
      pigeonResult.setIdFlashlightWarningFont((idFlashlightWarningFont == null) ? null : IdvFont.fromMap((Map)idFlashlightWarningFont));
      Object fontFamily = map.get("fontFamily");
      pigeonResult.setFontFamily((fontFamily == null) ? null : IdvFontFamily.fromMap((Map)fontFamily));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvImageTheme {
    private @Nullable String landingIllustration;
    public @Nullable String getLandingIllustration() { return landingIllustration; }
    public void setLandingIllustration(@Nullable String setterArg) {
      this.landingIllustration = setterArg;
    }

    private @Nullable String iconCheckmarkLarge;
    public @Nullable String getIconCheckmarkLarge() { return iconCheckmarkLarge; }
    public void setIconCheckmarkLarge(@Nullable String setterArg) {
      this.iconCheckmarkLarge = setterArg;
    }

    private @Nullable String iconCrossLarge;
    public @Nullable String getIconCrossLarge() { return iconCrossLarge; }
    public void setIconCrossLarge(@Nullable String setterArg) {
      this.iconCrossLarge = setterArg;
    }

    private @Nullable String iconCompleteVerificationBackground;
    public @Nullable String getIconCompleteVerificationBackground() { return iconCompleteVerificationBackground; }
    public void setIconCompleteVerificationBackground(@Nullable String setterArg) {
      this.iconCompleteVerificationBackground = setterArg;
    }

    private @Nullable String iconActionCheckmark;
    public @Nullable String getIconActionCheckmark() { return iconActionCheckmark; }
    public void setIconActionCheckmark(@Nullable String setterArg) {
      this.iconActionCheckmark = setterArg;
    }

    private @Nullable String iconLock;
    public @Nullable String getIconLock() { return iconLock; }
    public void setIconLock(@Nullable String setterArg) {
      this.iconLock = setterArg;
    }

    private @Nullable String iconEditField;
    public @Nullable String getIconEditField() { return iconEditField; }
    public void setIconEditField(@Nullable String setterArg) {
      this.iconEditField = setterArg;
    }

    private @Nullable String editResultsHeaderIcon;
    public @Nullable String getEditResultsHeaderIcon() { return editResultsHeaderIcon; }
    public void setEditResultsHeaderIcon(@Nullable String setterArg) {
      this.editResultsHeaderIcon = setterArg;
    }

    private @Nullable String loadingIndicator;
    public @Nullable String getLoadingIndicator() { return loadingIndicator; }
    public void setLoadingIndicator(@Nullable String setterArg) {
      this.loadingIndicator = setterArg;
    }

    private @Nullable String idSuccessScanningImage;
    public @Nullable String getIdSuccessScanningImage() { return idSuccessScanningImage; }
    public void setIdSuccessScanningImage(@Nullable String setterArg) {
      this.idSuccessScanningImage = setterArg;
    }

    private @Nullable String idFrontCardImage;
    public @Nullable String getIdFrontCardImage() { return idFrontCardImage; }
    public void setIdFrontCardImage(@Nullable String setterArg) {
      this.idFrontCardImage = setterArg;
    }

    private @Nullable String idBackCardImage;
    public @Nullable String getIdBackCardImage() { return idBackCardImage; }
    public void setIdBackCardImage(@Nullable String setterArg) {
      this.idBackCardImage = setterArg;
    }

    private @Nullable String faceTecCameraPermission;
    public @Nullable String getFaceTecCameraPermission() { return faceTecCameraPermission; }
    public void setFaceTecCameraPermission(@Nullable String setterArg) {
      this.faceTecCameraPermission = setterArg;
    }

    private @Nullable String faceTecIdealSelfie;
    public @Nullable String getFaceTecIdealSelfie() { return faceTecIdealSelfie; }
    public void setFaceTecIdealSelfie(@Nullable String setterArg) {
      this.faceTecIdealSelfie = setterArg;
    }

    private @Nullable String faceTecProgressSelfieDoneBackground;
    public @Nullable String getFaceTecProgressSelfieDoneBackground() { return faceTecProgressSelfieDoneBackground; }
    public void setFaceTecProgressSelfieDoneBackground(@Nullable String setterArg) {
      this.faceTecProgressSelfieDoneBackground = setterArg;
    }

    private @Nullable String faceTecIconClose;
    public @Nullable String getFaceTecIconClose() { return faceTecIconClose; }
    public void setFaceTecIconClose(@Nullable String setterArg) {
      this.faceTecIconClose = setterArg;
    }

    public static final class Builder {
      private @Nullable String landingIllustration;
      public @NonNull Builder setLandingIllustration(@Nullable String setterArg) {
        this.landingIllustration = setterArg;
        return this;
      }
      private @Nullable String iconCheckmarkLarge;
      public @NonNull Builder setIconCheckmarkLarge(@Nullable String setterArg) {
        this.iconCheckmarkLarge = setterArg;
        return this;
      }
      private @Nullable String iconCrossLarge;
      public @NonNull Builder setIconCrossLarge(@Nullable String setterArg) {
        this.iconCrossLarge = setterArg;
        return this;
      }
      private @Nullable String iconCompleteVerificationBackground;
      public @NonNull Builder setIconCompleteVerificationBackground(@Nullable String setterArg) {
        this.iconCompleteVerificationBackground = setterArg;
        return this;
      }
      private @Nullable String iconActionCheckmark;
      public @NonNull Builder setIconActionCheckmark(@Nullable String setterArg) {
        this.iconActionCheckmark = setterArg;
        return this;
      }
      private @Nullable String iconLock;
      public @NonNull Builder setIconLock(@Nullable String setterArg) {
        this.iconLock = setterArg;
        return this;
      }
      private @Nullable String iconEditField;
      public @NonNull Builder setIconEditField(@Nullable String setterArg) {
        this.iconEditField = setterArg;
        return this;
      }
      private @Nullable String editResultsHeaderIcon;
      public @NonNull Builder setEditResultsHeaderIcon(@Nullable String setterArg) {
        this.editResultsHeaderIcon = setterArg;
        return this;
      }
      private @Nullable String loadingIndicator;
      public @NonNull Builder setLoadingIndicator(@Nullable String setterArg) {
        this.loadingIndicator = setterArg;
        return this;
      }
      private @Nullable String idSuccessScanningImage;
      public @NonNull Builder setIdSuccessScanningImage(@Nullable String setterArg) {
        this.idSuccessScanningImage = setterArg;
        return this;
      }
      private @Nullable String idFrontCardImage;
      public @NonNull Builder setIdFrontCardImage(@Nullable String setterArg) {
        this.idFrontCardImage = setterArg;
        return this;
      }
      private @Nullable String idBackCardImage;
      public @NonNull Builder setIdBackCardImage(@Nullable String setterArg) {
        this.idBackCardImage = setterArg;
        return this;
      }
      private @Nullable String faceTecCameraPermission;
      public @NonNull Builder setFaceTecCameraPermission(@Nullable String setterArg) {
        this.faceTecCameraPermission = setterArg;
        return this;
      }
      private @Nullable String faceTecIdealSelfie;
      public @NonNull Builder setFaceTecIdealSelfie(@Nullable String setterArg) {
        this.faceTecIdealSelfie = setterArg;
        return this;
      }
      private @Nullable String faceTecProgressSelfieDoneBackground;
      public @NonNull Builder setFaceTecProgressSelfieDoneBackground(@Nullable String setterArg) {
        this.faceTecProgressSelfieDoneBackground = setterArg;
        return this;
      }
      private @Nullable String faceTecIconClose;
      public @NonNull Builder setFaceTecIconClose(@Nullable String setterArg) {
        this.faceTecIconClose = setterArg;
        return this;
      }
      public @NonNull IdvImageTheme build() {
        IdvImageTheme pigeonReturn = new IdvImageTheme();
        pigeonReturn.setLandingIllustration(landingIllustration);
        pigeonReturn.setIconCheckmarkLarge(iconCheckmarkLarge);
        pigeonReturn.setIconCrossLarge(iconCrossLarge);
        pigeonReturn.setIconCompleteVerificationBackground(iconCompleteVerificationBackground);
        pigeonReturn.setIconActionCheckmark(iconActionCheckmark);
        pigeonReturn.setIconLock(iconLock);
        pigeonReturn.setIconEditField(iconEditField);
        pigeonReturn.setEditResultsHeaderIcon(editResultsHeaderIcon);
        pigeonReturn.setLoadingIndicator(loadingIndicator);
        pigeonReturn.setIdSuccessScanningImage(idSuccessScanningImage);
        pigeonReturn.setIdFrontCardImage(idFrontCardImage);
        pigeonReturn.setIdBackCardImage(idBackCardImage);
        pigeonReturn.setFaceTecCameraPermission(faceTecCameraPermission);
        pigeonReturn.setFaceTecIdealSelfie(faceTecIdealSelfie);
        pigeonReturn.setFaceTecProgressSelfieDoneBackground(faceTecProgressSelfieDoneBackground);
        pigeonReturn.setFaceTecIconClose(faceTecIconClose);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("landingIllustration", landingIllustration);
      toMapResult.put("iconCheckmarkLarge", iconCheckmarkLarge);
      toMapResult.put("iconCrossLarge", iconCrossLarge);
      toMapResult.put("iconCompleteVerificationBackground", iconCompleteVerificationBackground);
      toMapResult.put("iconActionCheckmark", iconActionCheckmark);
      toMapResult.put("iconLock", iconLock);
      toMapResult.put("iconEditField", iconEditField);
      toMapResult.put("editResultsHeaderIcon", editResultsHeaderIcon);
      toMapResult.put("loadingIndicator", loadingIndicator);
      toMapResult.put("idSuccessScanningImage", idSuccessScanningImage);
      toMapResult.put("idFrontCardImage", idFrontCardImage);
      toMapResult.put("idBackCardImage", idBackCardImage);
      toMapResult.put("faceTecCameraPermission", faceTecCameraPermission);
      toMapResult.put("faceTecIdealSelfie", faceTecIdealSelfie);
      toMapResult.put("faceTecProgressSelfieDoneBackground", faceTecProgressSelfieDoneBackground);
      toMapResult.put("faceTecIconClose", faceTecIconClose);
      return toMapResult;
    }
    static @NonNull IdvImageTheme fromMap(@NonNull Map<String, Object> map) {
      IdvImageTheme pigeonResult = new IdvImageTheme();
      Object landingIllustration = map.get("landingIllustration");
      pigeonResult.setLandingIllustration((String)landingIllustration);
      Object iconCheckmarkLarge = map.get("iconCheckmarkLarge");
      pigeonResult.setIconCheckmarkLarge((String)iconCheckmarkLarge);
      Object iconCrossLarge = map.get("iconCrossLarge");
      pigeonResult.setIconCrossLarge((String)iconCrossLarge);
      Object iconCompleteVerificationBackground = map.get("iconCompleteVerificationBackground");
      pigeonResult.setIconCompleteVerificationBackground((String)iconCompleteVerificationBackground);
      Object iconActionCheckmark = map.get("iconActionCheckmark");
      pigeonResult.setIconActionCheckmark((String)iconActionCheckmark);
      Object iconLock = map.get("iconLock");
      pigeonResult.setIconLock((String)iconLock);
      Object iconEditField = map.get("iconEditField");
      pigeonResult.setIconEditField((String)iconEditField);
      Object editResultsHeaderIcon = map.get("editResultsHeaderIcon");
      pigeonResult.setEditResultsHeaderIcon((String)editResultsHeaderIcon);
      Object loadingIndicator = map.get("loadingIndicator");
      pigeonResult.setLoadingIndicator((String)loadingIndicator);
      Object idSuccessScanningImage = map.get("idSuccessScanningImage");
      pigeonResult.setIdSuccessScanningImage((String)idSuccessScanningImage);
      Object idFrontCardImage = map.get("idFrontCardImage");
      pigeonResult.setIdFrontCardImage((String)idFrontCardImage);
      Object idBackCardImage = map.get("idBackCardImage");
      pigeonResult.setIdBackCardImage((String)idBackCardImage);
      Object faceTecCameraPermission = map.get("faceTecCameraPermission");
      pigeonResult.setFaceTecCameraPermission((String)faceTecCameraPermission);
      Object faceTecIdealSelfie = map.get("faceTecIdealSelfie");
      pigeonResult.setFaceTecIdealSelfie((String)faceTecIdealSelfie);
      Object faceTecProgressSelfieDoneBackground = map.get("faceTecProgressSelfieDoneBackground");
      pigeonResult.setFaceTecProgressSelfieDoneBackground((String)faceTecProgressSelfieDoneBackground);
      Object faceTecIconClose = map.get("faceTecIconClose");
      pigeonResult.setFaceTecIconClose((String)faceTecIconClose);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvSize {
    private @Nullable Double width;
    public @Nullable Double getWidth() { return width; }
    public void setWidth(@Nullable Double setterArg) {
      this.width = setterArg;
    }

    private @Nullable Double height;
    public @Nullable Double getHeight() { return height; }
    public void setHeight(@Nullable Double setterArg) {
      this.height = setterArg;
    }

    public static final class Builder {
      private @Nullable Double width;
      public @NonNull Builder setWidth(@Nullable Double setterArg) {
        this.width = setterArg;
        return this;
      }
      private @Nullable Double height;
      public @NonNull Builder setHeight(@Nullable Double setterArg) {
        this.height = setterArg;
        return this;
      }
      public @NonNull IdvSize build() {
        IdvSize pigeonReturn = new IdvSize();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("width", width);
      toMapResult.put("height", height);
      return toMapResult;
    }
    static @NonNull IdvSize fromMap(@NonNull Map<String, Object> map) {
      IdvSize pigeonResult = new IdvSize();
      Object width = map.get("width");
      pigeonResult.setWidth((Double)width);
      Object height = map.get("height");
      pigeonResult.setHeight((Double)height);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvViewTheme {
    private @Nullable Double faceImageCornerRadius;
    public @Nullable Double getFaceImageCornerRadius() { return faceImageCornerRadius; }
    public void setFaceImageCornerRadius(@Nullable Double setterArg) {
      this.faceImageCornerRadius = setterArg;
    }

    private @Nullable Double buttonCornerRadius;
    public @Nullable Double getButtonCornerRadius() { return buttonCornerRadius; }
    public void setButtonCornerRadius(@Nullable Double setterArg) {
      this.buttonCornerRadius = setterArg;
    }

    private @Nullable Double actionViewCornerRadius;
    public @Nullable Double getActionViewCornerRadius() { return actionViewCornerRadius; }
    public void setActionViewCornerRadius(@Nullable Double setterArg) {
      this.actionViewCornerRadius = setterArg;
    }

    private @Nullable Double actionStepCornerRadius;
    public @Nullable Double getActionStepCornerRadius() { return actionStepCornerRadius; }
    public void setActionStepCornerRadius(@Nullable Double setterArg) {
      this.actionStepCornerRadius = setterArg;
    }

    private @Nullable Double resultsPersonImageCornerRadius;
    public @Nullable Double getResultsPersonImageCornerRadius() { return resultsPersonImageCornerRadius; }
    public void setResultsPersonImageCornerRadius(@Nullable Double setterArg) {
      this.resultsPersonImageCornerRadius = setterArg;
    }

    private @Nullable String stepViewShadowColor;
    public @Nullable String getStepViewShadowColor() { return stepViewShadowColor; }
    public void setStepViewShadowColor(@Nullable String setterArg) {
      this.stepViewShadowColor = setterArg;
    }

    private @Nullable IdvSize stepViewShadowOffset;
    public @Nullable IdvSize getStepViewShadowOffset() { return stepViewShadowOffset; }
    public void setStepViewShadowOffset(@Nullable IdvSize setterArg) {
      this.stepViewShadowOffset = setterArg;
    }

    private @Nullable Double stepViewShadowOpacity;
    public @Nullable Double getStepViewShadowOpacity() { return stepViewShadowOpacity; }
    public void setStepViewShadowOpacity(@Nullable Double setterArg) {
      this.stepViewShadowOpacity = setterArg;
    }

    private @Nullable Double stepViewShadowRadius;
    public @Nullable Double getStepViewShadowRadius() { return stepViewShadowRadius; }
    public void setStepViewShadowRadius(@Nullable Double setterArg) {
      this.stepViewShadowRadius = setterArg;
    }

    private @Nullable Double buttonHeight;
    public @Nullable Double getButtonHeight() { return buttonHeight; }
    public void setButtonHeight(@Nullable Double setterArg) {
      this.buttonHeight = setterArg;
    }

    private @Nullable Double idInstructionsCornerRadius;
    public @Nullable Double getIdInstructionsCornerRadius() { return idInstructionsCornerRadius; }
    public void setIdInstructionsCornerRadius(@Nullable Double setterArg) {
      this.idInstructionsCornerRadius = setterArg;
    }

    private @Nullable Double idFlashlightWarningCornerRadius;
    public @Nullable Double getIdFlashlightWarningCornerRadius() { return idFlashlightWarningCornerRadius; }
    public void setIdFlashlightWarningCornerRadius(@Nullable Double setterArg) {
      this.idFlashlightWarningCornerRadius = setterArg;
    }

    public static final class Builder {
      private @Nullable Double faceImageCornerRadius;
      public @NonNull Builder setFaceImageCornerRadius(@Nullable Double setterArg) {
        this.faceImageCornerRadius = setterArg;
        return this;
      }
      private @Nullable Double buttonCornerRadius;
      public @NonNull Builder setButtonCornerRadius(@Nullable Double setterArg) {
        this.buttonCornerRadius = setterArg;
        return this;
      }
      private @Nullable Double actionViewCornerRadius;
      public @NonNull Builder setActionViewCornerRadius(@Nullable Double setterArg) {
        this.actionViewCornerRadius = setterArg;
        return this;
      }
      private @Nullable Double actionStepCornerRadius;
      public @NonNull Builder setActionStepCornerRadius(@Nullable Double setterArg) {
        this.actionStepCornerRadius = setterArg;
        return this;
      }
      private @Nullable Double resultsPersonImageCornerRadius;
      public @NonNull Builder setResultsPersonImageCornerRadius(@Nullable Double setterArg) {
        this.resultsPersonImageCornerRadius = setterArg;
        return this;
      }
      private @Nullable String stepViewShadowColor;
      public @NonNull Builder setStepViewShadowColor(@Nullable String setterArg) {
        this.stepViewShadowColor = setterArg;
        return this;
      }
      private @Nullable IdvSize stepViewShadowOffset;
      public @NonNull Builder setStepViewShadowOffset(@Nullable IdvSize setterArg) {
        this.stepViewShadowOffset = setterArg;
        return this;
      }
      private @Nullable Double stepViewShadowOpacity;
      public @NonNull Builder setStepViewShadowOpacity(@Nullable Double setterArg) {
        this.stepViewShadowOpacity = setterArg;
        return this;
      }
      private @Nullable Double stepViewShadowRadius;
      public @NonNull Builder setStepViewShadowRadius(@Nullable Double setterArg) {
        this.stepViewShadowRadius = setterArg;
        return this;
      }
      private @Nullable Double buttonHeight;
      public @NonNull Builder setButtonHeight(@Nullable Double setterArg) {
        this.buttonHeight = setterArg;
        return this;
      }
      private @Nullable Double idInstructionsCornerRadius;
      public @NonNull Builder setIdInstructionsCornerRadius(@Nullable Double setterArg) {
        this.idInstructionsCornerRadius = setterArg;
        return this;
      }
      private @Nullable Double idFlashlightWarningCornerRadius;
      public @NonNull Builder setIdFlashlightWarningCornerRadius(@Nullable Double setterArg) {
        this.idFlashlightWarningCornerRadius = setterArg;
        return this;
      }
      public @NonNull IdvViewTheme build() {
        IdvViewTheme pigeonReturn = new IdvViewTheme();
        pigeonReturn.setFaceImageCornerRadius(faceImageCornerRadius);
        pigeonReturn.setButtonCornerRadius(buttonCornerRadius);
        pigeonReturn.setActionViewCornerRadius(actionViewCornerRadius);
        pigeonReturn.setActionStepCornerRadius(actionStepCornerRadius);
        pigeonReturn.setResultsPersonImageCornerRadius(resultsPersonImageCornerRadius);
        pigeonReturn.setStepViewShadowColor(stepViewShadowColor);
        pigeonReturn.setStepViewShadowOffset(stepViewShadowOffset);
        pigeonReturn.setStepViewShadowOpacity(stepViewShadowOpacity);
        pigeonReturn.setStepViewShadowRadius(stepViewShadowRadius);
        pigeonReturn.setButtonHeight(buttonHeight);
        pigeonReturn.setIdInstructionsCornerRadius(idInstructionsCornerRadius);
        pigeonReturn.setIdFlashlightWarningCornerRadius(idFlashlightWarningCornerRadius);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("faceImageCornerRadius", faceImageCornerRadius);
      toMapResult.put("buttonCornerRadius", buttonCornerRadius);
      toMapResult.put("actionViewCornerRadius", actionViewCornerRadius);
      toMapResult.put("actionStepCornerRadius", actionStepCornerRadius);
      toMapResult.put("resultsPersonImageCornerRadius", resultsPersonImageCornerRadius);
      toMapResult.put("stepViewShadowColor", stepViewShadowColor);
      toMapResult.put("stepViewShadowOffset", (stepViewShadowOffset == null) ? null : stepViewShadowOffset.toMap());
      toMapResult.put("stepViewShadowOpacity", stepViewShadowOpacity);
      toMapResult.put("stepViewShadowRadius", stepViewShadowRadius);
      toMapResult.put("buttonHeight", buttonHeight);
      toMapResult.put("idInstructionsCornerRadius", idInstructionsCornerRadius);
      toMapResult.put("idFlashlightWarningCornerRadius", idFlashlightWarningCornerRadius);
      return toMapResult;
    }
    static @NonNull IdvViewTheme fromMap(@NonNull Map<String, Object> map) {
      IdvViewTheme pigeonResult = new IdvViewTheme();
      Object faceImageCornerRadius = map.get("faceImageCornerRadius");
      pigeonResult.setFaceImageCornerRadius((Double)faceImageCornerRadius);
      Object buttonCornerRadius = map.get("buttonCornerRadius");
      pigeonResult.setButtonCornerRadius((Double)buttonCornerRadius);
      Object actionViewCornerRadius = map.get("actionViewCornerRadius");
      pigeonResult.setActionViewCornerRadius((Double)actionViewCornerRadius);
      Object actionStepCornerRadius = map.get("actionStepCornerRadius");
      pigeonResult.setActionStepCornerRadius((Double)actionStepCornerRadius);
      Object resultsPersonImageCornerRadius = map.get("resultsPersonImageCornerRadius");
      pigeonResult.setResultsPersonImageCornerRadius((Double)resultsPersonImageCornerRadius);
      Object stepViewShadowColor = map.get("stepViewShadowColor");
      pigeonResult.setStepViewShadowColor((String)stepViewShadowColor);
      Object stepViewShadowOffset = map.get("stepViewShadowOffset");
      pigeonResult.setStepViewShadowOffset((stepViewShadowOffset == null) ? null : IdvSize.fromMap((Map)stepViewShadowOffset));
      Object stepViewShadowOpacity = map.get("stepViewShadowOpacity");
      pigeonResult.setStepViewShadowOpacity((Double)stepViewShadowOpacity);
      Object stepViewShadowRadius = map.get("stepViewShadowRadius");
      pigeonResult.setStepViewShadowRadius((Double)stepViewShadowRadius);
      Object buttonHeight = map.get("buttonHeight");
      pigeonResult.setButtonHeight((Double)buttonHeight);
      Object idInstructionsCornerRadius = map.get("idInstructionsCornerRadius");
      pigeonResult.setIdInstructionsCornerRadius((Double)idInstructionsCornerRadius);
      Object idFlashlightWarningCornerRadius = map.get("idFlashlightWarningCornerRadius");
      pigeonResult.setIdFlashlightWarningCornerRadius((Double)idFlashlightWarningCornerRadius);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvNavigationTheme {
    private @Nullable BarStyle barStyle;
    public @Nullable BarStyle getBarStyle() { return barStyle; }
    public void setBarStyle(@Nullable BarStyle setterArg) {
      this.barStyle = setterArg;
    }

    private @Nullable Boolean isTranslucent;
    public @Nullable Boolean getIsTranslucent() { return isTranslucent; }
    public void setIsTranslucent(@Nullable Boolean setterArg) {
      this.isTranslucent = setterArg;
    }

    private @Nullable Boolean hideBarButtonOnSuccessfulVerification;
    public @Nullable Boolean getHideBarButtonOnSuccessfulVerification() { return hideBarButtonOnSuccessfulVerification; }
    public void setHideBarButtonOnSuccessfulVerification(@Nullable Boolean setterArg) {
      this.hideBarButtonOnSuccessfulVerification = setterArg;
    }

    private @Nullable String barTintColor;
    public @Nullable String getBarTintColor() { return barTintColor; }
    public void setBarTintColor(@Nullable String setterArg) {
      this.barTintColor = setterArg;
    }

    private @Nullable String titleColor;
    public @Nullable String getTitleColor() { return titleColor; }
    public void setTitleColor(@Nullable String setterArg) {
      this.titleColor = setterArg;
    }

    private @Nullable String barButtonItemColor;
    public @Nullable String getBarButtonItemColor() { return barButtonItemColor; }
    public void setBarButtonItemColor(@Nullable String setterArg) {
      this.barButtonItemColor = setterArg;
    }

    public static final class Builder {
      private @Nullable BarStyle barStyle;
      public @NonNull Builder setBarStyle(@Nullable BarStyle setterArg) {
        this.barStyle = setterArg;
        return this;
      }
      private @Nullable Boolean isTranslucent;
      public @NonNull Builder setIsTranslucent(@Nullable Boolean setterArg) {
        this.isTranslucent = setterArg;
        return this;
      }
      private @Nullable Boolean hideBarButtonOnSuccessfulVerification;
      public @NonNull Builder setHideBarButtonOnSuccessfulVerification(@Nullable Boolean setterArg) {
        this.hideBarButtonOnSuccessfulVerification = setterArg;
        return this;
      }
      private @Nullable String barTintColor;
      public @NonNull Builder setBarTintColor(@Nullable String setterArg) {
        this.barTintColor = setterArg;
        return this;
      }
      private @Nullable String titleColor;
      public @NonNull Builder setTitleColor(@Nullable String setterArg) {
        this.titleColor = setterArg;
        return this;
      }
      private @Nullable String barButtonItemColor;
      public @NonNull Builder setBarButtonItemColor(@Nullable String setterArg) {
        this.barButtonItemColor = setterArg;
        return this;
      }
      public @NonNull IdvNavigationTheme build() {
        IdvNavigationTheme pigeonReturn = new IdvNavigationTheme();
        pigeonReturn.setBarStyle(barStyle);
        pigeonReturn.setIsTranslucent(isTranslucent);
        pigeonReturn.setHideBarButtonOnSuccessfulVerification(hideBarButtonOnSuccessfulVerification);
        pigeonReturn.setBarTintColor(barTintColor);
        pigeonReturn.setTitleColor(titleColor);
        pigeonReturn.setBarButtonItemColor(barButtonItemColor);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("barStyle", barStyle == null ? null : barStyle.index);
      toMapResult.put("isTranslucent", isTranslucent);
      toMapResult.put("hideBarButtonOnSuccessfulVerification", hideBarButtonOnSuccessfulVerification);
      toMapResult.put("barTintColor", barTintColor);
      toMapResult.put("titleColor", titleColor);
      toMapResult.put("barButtonItemColor", barButtonItemColor);
      return toMapResult;
    }
    static @NonNull IdvNavigationTheme fromMap(@NonNull Map<String, Object> map) {
      IdvNavigationTheme pigeonResult = new IdvNavigationTheme();
      Object barStyle = map.get("barStyle");
      pigeonResult.setBarStyle(barStyle == null ? null : BarStyle.values()[(int)barStyle]);
      Object isTranslucent = map.get("isTranslucent");
      pigeonResult.setIsTranslucent((Boolean)isTranslucent);
      Object hideBarButtonOnSuccessfulVerification = map.get("hideBarButtonOnSuccessfulVerification");
      pigeonResult.setHideBarButtonOnSuccessfulVerification((Boolean)hideBarButtonOnSuccessfulVerification);
      Object barTintColor = map.get("barTintColor");
      pigeonResult.setBarTintColor((String)barTintColor);
      Object titleColor = map.get("titleColor");
      pigeonResult.setTitleColor((String)titleColor);
      Object barButtonItemColor = map.get("barButtonItemColor");
      pigeonResult.setBarButtonItemColor((String)barButtonItemColor);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class IdvDateFormatterTheme {
    private @Nullable String customDateFormat;
    public @Nullable String getCustomDateFormat() { return customDateFormat; }
    public void setCustomDateFormat(@Nullable String setterArg) {
      this.customDateFormat = setterArg;
    }

    public static final class Builder {
      private @Nullable String customDateFormat;
      public @NonNull Builder setCustomDateFormat(@Nullable String setterArg) {
        this.customDateFormat = setterArg;
        return this;
      }
      public @NonNull IdvDateFormatterTheme build() {
        IdvDateFormatterTheme pigeonReturn = new IdvDateFormatterTheme();
        pigeonReturn.setCustomDateFormat(customDateFormat);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("customDateFormat", customDateFormat);
      return toMapResult;
    }
    static @NonNull IdvDateFormatterTheme fromMap(@NonNull Map<String, Object> map) {
      IdvDateFormatterTheme pigeonResult = new IdvDateFormatterTheme();
      Object customDateFormat = map.get("customDateFormat");
      pigeonResult.setCustomDateFormat((String)customDateFormat);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class IdvPlatformApiCodec extends StandardMessageCodec {
    public static final IdvPlatformApiCodec INSTANCE = new IdvPlatformApiCodec();
    private IdvPlatformApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return DocumentField.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return DocumentFilter.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return DocumentScanStep.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return FieldValidator.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return IdvColor.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return IdvColorTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return IdvConfiguration.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return IdvDateFormatterTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return IdvFont.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return IdvFontFamily.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return IdvFontTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return IdvImageTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return IdvLocalizationTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return IdvNavigationTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return IdvSize.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return IdvViewTheme.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return LivenessStep.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return LivenessStepOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return ModificationConfig.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return RequestTimeout.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return VerificationServiceSettings.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof DocumentField) {
        stream.write(128);
        writeValue(stream, ((DocumentField) value).toMap());
      } else 
      if (value instanceof DocumentFilter) {
        stream.write(129);
        writeValue(stream, ((DocumentFilter) value).toMap());
      } else 
      if (value instanceof DocumentScanStep) {
        stream.write(130);
        writeValue(stream, ((DocumentScanStep) value).toMap());
      } else 
      if (value instanceof FieldValidator) {
        stream.write(131);
        writeValue(stream, ((FieldValidator) value).toMap());
      } else 
      if (value instanceof IdvColor) {
        stream.write(132);
        writeValue(stream, ((IdvColor) value).toMap());
      } else 
      if (value instanceof IdvColorTheme) {
        stream.write(133);
        writeValue(stream, ((IdvColorTheme) value).toMap());
      } else 
      if (value instanceof IdvConfiguration) {
        stream.write(134);
        writeValue(stream, ((IdvConfiguration) value).toMap());
      } else 
      if (value instanceof IdvDateFormatterTheme) {
        stream.write(135);
        writeValue(stream, ((IdvDateFormatterTheme) value).toMap());
      } else 
      if (value instanceof IdvFont) {
        stream.write(136);
        writeValue(stream, ((IdvFont) value).toMap());
      } else 
      if (value instanceof IdvFontFamily) {
        stream.write(137);
        writeValue(stream, ((IdvFontFamily) value).toMap());
      } else 
      if (value instanceof IdvFontTheme) {
        stream.write(138);
        writeValue(stream, ((IdvFontTheme) value).toMap());
      } else 
      if (value instanceof IdvImageTheme) {
        stream.write(139);
        writeValue(stream, ((IdvImageTheme) value).toMap());
      } else 
      if (value instanceof IdvLocalizationTheme) {
        stream.write(140);
        writeValue(stream, ((IdvLocalizationTheme) value).toMap());
      } else 
      if (value instanceof IdvNavigationTheme) {
        stream.write(141);
        writeValue(stream, ((IdvNavigationTheme) value).toMap());
      } else 
      if (value instanceof IdvSize) {
        stream.write(142);
        writeValue(stream, ((IdvSize) value).toMap());
      } else 
      if (value instanceof IdvViewTheme) {
        stream.write(143);
        writeValue(stream, ((IdvViewTheme) value).toMap());
      } else 
      if (value instanceof LivenessStep) {
        stream.write(144);
        writeValue(stream, ((LivenessStep) value).toMap());
      } else 
      if (value instanceof LivenessStepOptions) {
        stream.write(145);
        writeValue(stream, ((LivenessStepOptions) value).toMap());
      } else 
      if (value instanceof ModificationConfig) {
        stream.write(146);
        writeValue(stream, ((ModificationConfig) value).toMap());
      } else 
      if (value instanceof RequestTimeout) {
        stream.write(147);
        writeValue(stream, ((RequestTimeout) value).toMap());
      } else 
      if (value instanceof VerificationServiceSettings) {
        stream.write(148);
        writeValue(stream, ((VerificationServiceSettings) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface IdvPlatformApi {
    void startVerification(@NonNull IdvConfiguration idvConfiguration, Result<Boolean> result);
    void setupIdentityVerificationCustomization(@Nullable IdvColorTheme colorTheme, @Nullable IdvFontTheme fontTheme, @Nullable IdvImageTheme imageTheme, @Nullable IdvLocalizationTheme localizationTheme, @Nullable IdvViewTheme viewTheme, @Nullable IdvNavigationTheme navigationTheme, @Nullable IdvDateFormatterTheme dateFormatterTheme, Result<Void> result);

    /** The codec used by IdvPlatformApi. */
    static MessageCodec<Object> getCodec() {
      return IdvPlatformApiCodec.INSTANCE;
    }

    /** Sets up an instance of `IdvPlatformApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, IdvPlatformApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvPlatformApi.startVerification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              IdvConfiguration idvConfigurationArg = (IdvConfiguration)args.get(0);
              if (idvConfigurationArg == null) {
                throw new NullPointerException("idvConfigurationArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.startVerification(idvConfigurationArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvPlatformApi.setupIdentityVerificationCustomization", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              IdvColorTheme colorThemeArg = (IdvColorTheme)args.get(0);
              IdvFontTheme fontThemeArg = (IdvFontTheme)args.get(1);
              IdvImageTheme imageThemeArg = (IdvImageTheme)args.get(2);
              IdvLocalizationTheme localizationThemeArg = (IdvLocalizationTheme)args.get(3);
              IdvViewTheme viewThemeArg = (IdvViewTheme)args.get(4);
              IdvNavigationTheme navigationThemeArg = (IdvNavigationTheme)args.get(5);
              IdvDateFormatterTheme dateFormatterThemeArg = (IdvDateFormatterTheme)args.get(6);
              Result<Void> resultCallback = new Result<Void>() {
                public void success(Void result) {
                  wrapped.put("result", null);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.setupIdentityVerificationCustomization(colorThemeArg, fontThemeArg, imageThemeArg, localizationThemeArg, viewThemeArg, navigationThemeArg, dateFormatterThemeArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class IdvDartApiCodec extends StandardMessageCodec {
    public static final IdvDartApiCodec INSTANCE = new IdvDartApiCodec();
    private IdvDartApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ClassInfo.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return DocumentResult.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ImageAnalysisResult.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ResultField.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return SimpleDate.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return VerificationResult.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ClassInfo) {
        stream.write(128);
        writeValue(stream, ((ClassInfo) value).toMap());
      } else 
      if (value instanceof DocumentResult) {
        stream.write(129);
        writeValue(stream, ((DocumentResult) value).toMap());
      } else 
      if (value instanceof ImageAnalysisResult) {
        stream.write(130);
        writeValue(stream, ((ImageAnalysisResult) value).toMap());
      } else 
      if (value instanceof ResultField) {
        stream.write(131);
        writeValue(stream, ((ResultField) value).toMap());
      } else 
      if (value instanceof SimpleDate) {
        stream.write(132);
        writeValue(stream, ((SimpleDate) value).toMap());
      } else 
      if (value instanceof VerificationResult) {
        stream.write(133);
        writeValue(stream, ((VerificationResult) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class IdvDartApi {
    private final BinaryMessenger binaryMessenger;
    public IdvDartApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return IdvDartApiCodec.INSTANCE;
    }

    public void onLivenessCheckSuccess(@Nullable byte[] imageArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvDartApi.onLivenessCheckSuccess", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(imageArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onVerificationResult(@NonNull VerificationResult verificationResultArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvDartApi.onVerificationResult", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(verificationResultArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onResultConfirmed(@NonNull DocumentResult documentResultArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvDartApi.onResultConfirmed", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(documentResultArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onLivenessCheckFailure(@NonNull String feebackCodeArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvDartApi.onLivenessCheckFailure", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(feebackCodeArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onLivenessCheckError(@Nullable String errorArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.IdvDartApi.onLivenessCheckError", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(errorArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
